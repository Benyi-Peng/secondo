
let Tasks = ten feed addcounter[C, 1] nest[C; Tuples]  
  addcounter[D, 2] project[C, D, Tuples] consume

let Tasks = thousand feed addcounter[C, 1] nest[C; Tuples]  
  addcounter[D, 2] project[C, D, Tuples] consume

let Tasks = Orte feed addcounter[C, 1] nest[C; Tuples]  
  addcounter[D, 2] project[C, D, Tuples] consume


while (Tasks count) > 1 do
  if ((Tasks count) mod 2) = 0 then 
    update Tasks := 
      Tasks feed filter[(.C mod 2) = 1] remove[C]
      Tasks feed remove[D] renameattr[Tuples2: Tuples] 
        mergejoin[D, C] 
        projectextend[; Tuples: .Tuples2 afeed .Tuples afeed concat aconsume]
        addcounter[C, 1] addcounter[D, 2]
        project[C, D, Tuples]
        consume
  else
    update Tasks := 
      Tasks feed head[1] 
      Tasks feed filter[(.D mod 2) = 1] remove[C]
      Tasks feed remove[D] renameattr[Tuples2: Tuples] 
        mergejoin[D, C] 
        projectextend[; Tuples: .Tuples2 afeed .Tuples afeed concat aconsume]
        addcounter[C, 2] addcounter[D, 3]
        project[C, D, Tuples]
        concat
        consume
endif
endwhile


query Tasks feed unnest[Tuples] count







