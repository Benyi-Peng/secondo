# Similarity Clustering as in paper + balancing slots over workers.

# Database must be open.
# Distributed array T with attribute Pos of type point must be present. 
# Workers relation must be present.

# Variable myPort must be set below to an exclusively used port.

restore Workers from Workers12;
let S = 'S' ffeed5 consume;
let T = S feed ddistribute3["T", 40, TRUE, Workers];



# Step 1

let sizeT = size(T);
query share("sizeT", TRUE, Workers)

let SS = T dmap["", . feed some[10000 div sizeT]] dsummarize consume

# Step 2

@&Scripts/SimilarityPartitioning.sec;
let n = PC count;
let MinPts = 10;
let Eps = 100.0;
let wgs84 = create_geoid("WGS1984");
let myPort = 1238;


# Step 3

query share("PC", TRUE, Workers);
query share("MinPts", TRUE, Workers);
query share("Eps", TRUE, Workers);
query share("wgs84", TRUE, Workers);
query share("n", TRUE, Workers);


# Step 4

query memclear();
query T dcommand['query meminit(3600)'] consume;

query T dlet["PCm", 'PC feed mconsume'] consume;
query T dlet["PCm_Pos_mtree", 'PCm mcreatemtree[Pos, wgs84]'] consume

let Va = T 
  dmap["",  . feed 
    loopjoin[fun(t: TUPLE) PCm_Pos_mtree PCm mdistScan[attr(t, Pos)] head[1] 
      projectextend[N; Dist: distance(attr(t, Pos), .Pos, wgs84)]]
    loopjoin[fun(u: TUPLE) PCm_Pos_mtree PCm mdistRange[attr(u, Pos), 
      attr(u, Dist) + (2 * Eps)] projectextend[; N2: .N]]
  ]
  partition["Va", .N2, n] 

let Vb = Va
  collect2["Vb", myPort]


# Step 4b Load Balancing

let wc = Workers count;
let reserve = ((wc - 1) div 20) + 1;

let W = intstream(0, wc - 1) namedtransformstream[Worker] extend[Load: 0.0] consume

let Sizes = Vb dmap["", . feed count] dsummarize namedtransformstream[Size] addcounter[Slot, 0] consume

let Slots = Sizes feed replaceAttr[Size: .Size * 1.0] sortby[Size desc] consume

let TargetSize = (Slots feed sum[Size]) / wc;

query memclear();
let PQ = W feed head[wc - reserve] mcreatepqueue[Load];

let Assignment = PQ mfeedpq 
  Slots feed obojoin 
  extend[Ok: PQ minserttuplepqprojectU[., .Load + .Size, Load; Worker, Load]]
  consume

delete PQ;
let PQ = W feed tail[reserve] mcreatepqueue[Load];

query PQ mfeedpq
  Assignment feed addid extend[LoadAfter: .Load + .Size] sortby[LoadAfter desc] 
    project[TID]
  Assignment deletebyid2[TID]
  project[Size, Slot]
  obojoin   
  extend[Ok: PQ minserttuplepqprojectU[., .Load + .Size, Load; Worker, Load]]
  Assignment insert
  cancel[(.Load + (2 * .Size)) > (TargetSize * 1.03)]
  count

let AssignmentV = Assignment feed sortby[Slot] project[Worker] transformstream collect_vector

let V = Va collectC["V", myPort, AssignmentV]



# Step 5


let X = V 
  dmap["X", $1 feed extend[Pos2: gk(.Pos)] dbscanM[Pos2, CID0, Eps, MinPts]
    extend[CID: (.CID0 * n) + $2] consume
  ]


# Step 6

query T dcommand['query memclear()'] filter[.Ok] count;

let Wm = X dmap["Wm", . feed filter[.N = .N2] mconsume];
let Wm_Pos_mtree = Wm dmap["Wm_Pos_mtree", . mcreatemtree[Pos, wgs84]];

let Neighbors = X Wm_Pos_mtree Wm 
  dmap3["Neighbors", $1 feed filter[.N # .N2] 
    loopsel[fun(t: TUPLE) $2 $3 mdistRange[attr(t, Pos), Eps] 
      projectextend[; P: .Osm_id, PosP: .Pos,  CID0: .CID0, CIDp: .CID, 
        IsCoreP: .IsCore, Np: .N, Q: attr(t, Osm_id), QPos: attr(t, Pos)]] 
    consume, myPort
  ]

query T dcommand['query memclear()'] filter[.Ok] count;
let NeighborsByP = Neighbors partition["", hashvalue(.P, 999997), 0]
  collect2["NeighborsByP", myPort];
let NeighborsByQ = Neighbors partition["", hashvalue(.Q, 999997), 0]
  collect2["NeighborsByQ", myPort];


# Step 7

let Merge = NeighborsByQ NeighborsByP 
  dmap2["Merge", . feed {n1} .. feed {n2} itHashJoin[Q_n1, P_n2] 
    filter[.IsCoreP_n1 and .IsCoreP_n2] 
    project[CIDp_n1, CIDp_n2] sort rdup consume, myPort
  ]

let Assignments = NeighborsByQ NeighborsByP 
  dmap2["", . feed {n1} .. feed {n2} itHashJoin[Q_n1, P_n2], myPort]
  dmap["", 
    . feed filter[.IsCoreP_n1 and not(.IsCoreP_n2)] 
      projectextend[; P: .P_n2, N: .Np_n2,  CID: .CIDp_n1]
    . feed filter[.IsCoreP_n2 and not(.IsCoreP_n1)] 
      projectextend[; P: .P_n1, N: .Np_n1, CID: .CIDp_n2]
    concat sort krdup[P] consume
  ]
  partition["", .N, 0]
  collect2["Assignments", myPort]


# Step 8

let MergeM = Merge dsummarize sort rdup createmgraph2[CIDp_n1, CIDp_n2, 1.0];
let MaxCN = X dmap["", . feed max[CID] feed transformstream] dsummarize max[Elem];


# Step 9

let Renumber = MergeM mg2connectedcomponents projectextend[; CID: .CIDp_n1, 
  CIDnew: .CompNo + MaxCN] sort rdup consume


# Step 10

query share("Renumber", TRUE, Workers);


# Step 11

query X Assignments 
  dmap2["",  $1 feed addid filter[.N = .N2] $2 feed sort krdup[P] {a} 
    itHashJoin[Osm_id, P_a] $1 updatedirect2[TID; CID: .CID_a] count, myPort
  ] 
  getValue tie[. + ..]

query X 
  dmap["", $1 feed addid filter[.N = .N2] Renumber feed sort krdup[CID] {a} 
    itHashJoin[CID, CID_a] $1 updatedirect2[TID; CID: .CIDnew_a] count
  ] 
  getValue tie[. + ..]



















