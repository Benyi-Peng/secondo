Reading a set of gpx files
==========================

# get all file names from some directory

query getDirectory('/home/ralf/Tracks', 2) transformstream filter[not(isDirectory(.Elem))] consume

let Raw =  getDirectory('/home/ralf/Tracks') transformstream 
  filter[not(isDirectory(.Elem))] 
  addcounter[TrackId, 1]
  loopsel[fun(t: TUPLE) gpximport(attr(t, Elem)) 
    projectextend[Time, Lon, Lat, Ele; TrackId: attr(t, TrackId), Pos: makepoint(.Lon, .Lat)]]
  consume

# create Trip and Altitude for each day

let twohours = [const duration value (0 7200000)]

let DayTrips =  Raw feed 
  extend[
    I: .Time + twohours, 
    Alt: .Ele] 
  sortby[TrackId, I asc]
  groupby[TrackId
  ; DayTrip: group feed approximate[I, Pos, [const duration value (0 300000)]],
    DayAlt: group feed approximate[I, Alt, [const duration value (0 300000)]] ]
  consume

# determine trajectory and speed of a trip

query DayTrips feed filter[.TrackId = 5] extend[Traj: trajectory(.DayTrip), Speed: speed(.DayTrip, create_geoid("WGS1984")) * 3.6]
  consume

# create a nested relation that contains only units with speed less than 200 km/h (data cleaning)

let DayTrips2 = DayTrips feed 
  projectextend[TrackId; CleanedTrip: units(.DayTrip) 
    namedtransformstream[UTrip]
    extend[Speed: val(initial(speed(.UTrip, create_geoid("WGS1984")))) * 3.6]
    filter[.Speed < 200.0]
    extend[Traj: trajectory(.UTrip)]
    aconsume]
  consume


