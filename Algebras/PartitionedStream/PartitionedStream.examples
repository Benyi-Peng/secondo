Database: opt 
Restore : No

Operator : PSTREAM1
Number   : 1
Signature: ((stream(ptuple(y)) ...) -> stream(tuple(y))
Example  : query plz pfeed[500] puse[fun (s: PSTREAM1) s head[5]] pdelete count
Result   : 5


Operator : PSTREAM2
Number   : 1
Signature: ((...) (stream(ptuple(y)) ...) -> stream(tuple(y))
Example  : query plz pfeed[500] plz pfeed[100] pjoin2[ symj: . .. {a2} symmjoin[.PLZ = ..PLZ_a2], smj: . .. {a2} sortmergejoin[PLZ, PLZ_a2] ] pdelete count
Result   : 248793


Operator : memshuffle
Number   : 1
Signature: stream(tuple(y)) -> stream(tuple(y))
Example  : query plz feed memshuffle count
Result   : 41267

Operator : memshuffle
Number   : 2
Signature: stream(ptuple(y)) -> stream(ptuple(y)), stream(tuple(y)) -> stream(tuple(y))
Example  : query plz pfeed[1000] memshuffle pdelete count
Result   : crashes
Remark   : Currently, this overloaded is not implemented yet!  

Operator : pcreate2
Number   : 1
Signature: stream(tuple(y)) x int x int -> stream(ptuple(y))
Example  : query plz feed pcreate2[100, 42167] pdelete count
Result   : bug
Remark   : Not implemented yet! 


Operator : pcreate
Number   : 1
Signature: stream(tuple(y)) x int -> stream(ptuple(y))
Example  : query plz feed pcreate[100] pdelete count
Result   : 41267


Operator : pdelete
Number   : 1
Signature: stream(ptuple(y) -> stream(tuple(y))
Example  : query plz pfeed[500] pdelete count
Result   : 41267


Operator : pfeed
Number   : 1
Signature: rel(tuple(y) -> stream(ptuple(y))
Example  : query plz pfeed[500] pdelete count
Result   : 41267


Operator : pjoin1
Number   : 1
Signature: ( stream(ptuple(y1)) rel(tuple(y2)) ( ( map (stream(tuple(y1))) (rel(tuple(y2))) (stream(tuple(z))) ) ... N repeats ... ))-> (stream(ptuple(z))).
Example  : query Staedte pfeed[100] puse[. {arg1}] plz pjoin1[ 1; symj: . .. feed head[1000] {1} filter[.PLZ < 50000] head[500] {2} symmjoin[.SName_arg1 = ..Ort], ilj: . loopjoin[fun(t1: TUPLE) plz_Ort .. exactmatch[attr(t1, SName_arg1)] filter[.PLZ < 50000] {3} ]] pdelete count 
Result   : 4340


Operator : pjoin2
Number   : 1
Signature: ( stream(ptuple(y1)) stream(ptuple(y2)) ( ( map (stream(tuple(y1))) (stream(tuple(y2))) (stream(tuple(z))) ) ... N repeats ... ))-> (stream(ptuple(z))).
Example  : query plz pfeed[500] plz pfeed[100] pjoin2[ symj: . .. {a2} symmjoin[.PLZ = ..PLZ_a2], smj: . .. {a2} sortmergejoin[PLZ, PLZ_a2] ] pdelete count
Result   : 248793 


Operator : pshow
Number   : 1
Signature: stream(ptuple(y)) -> stream(ptuple(y))
Example  : query plz pfeed[4000] pshow pdelete count
Result   : 41267


Operator : puse
Number   : 1
Signature: stream(ptuple(y) x ( stream(tuple(y)) ->  stream(tuple(y)) ) -> stream(tuple(y))
Example  : query plz pfeed[500] puse[. filter[.PLZ = 44227]] pdelete count
Result   : 1


Operator : shuffle
Number   : 1
Signature: stream(tuple(y)) -> stream(tuple(y))
Example  : query plz feed shuffle count
Result   : 41267
Remark   : Currently this is the same implementation as memshuffle!


Operator : shuffle
Number   : 2
Signature: stream(ptuple(y)) -> stream(ptuple(y))
Example  : query plz pfeed[1000] shuffle pdelete count
Result   : crashes
Remark   : Currently, this overloaded is not implemented yet!  


