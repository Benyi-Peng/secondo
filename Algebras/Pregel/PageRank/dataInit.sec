delete database pagerank;
create database pagerank;
open database pagerank;

let Workers = [const rel(tuple([Host: string, Port: int, Config: string, MessageServerPort: int])) value
(
    ("127.0.0.1" 1471 "SecondoConfig.ini" 9898)
    ("127.0.0.1" 1472 "SecondoConfig.ini" 9899)
    ("127.0.0.1" 1473 "SecondoConfig.ini" 9900)
    ("127.0.0.1" 1474 "SecondoConfig.ini" 9901)
)];

let WorkerNumber = Workers count;
# = 4

#
# Dampening Factor
#

let D = 0.85;

let PartitionFunction = fun (id: int) (hashvalue(id, WorkerNumber));

#
# Edges of the Graph
#

let Links = [const rel(tuple([Source: int, Target: int])) value
(
    (1 2)
    (3 4)
    (5 6)
    (7 8)
    (9 10)
    (11 12)
    (13 10)
    (14 15)
    (16 17)
    (18 10)
    (19 20)
    (21 22)
    (15 14)
    (23 13)
    (24 16)
    (9 8)
    (25 10)
    (26 7)
    (25 27)
    (9 28)
    (29 30)
    (11 12)
    (31 32)
    (33 6)
    (32 11)
    (12 10)
    (8 16)
    (34 23)
    (35 10)
    (15 9)
    (36 15)
    (11 12)
    (37 38)
    (23 35)
    (39 15)
    (34 10)
    (6 40)
    (41 42)
    (43 31)
    (24 15)
    (10 44)
    (45 38)
    (46 47)
    (48 4)
    (16 49)
    (50 14)
    (16 13)
    (17 10)
    (51 6)
    (31 52)
    (33 53)
    (12 11)
    (8 32)
    (10 54)
    (55 56)
    (15 57)
    (14 58)
    (59 12)
    (10 60)
    (61 11)
    (62 20)
    (63 16)
    (11 64)
    (54 10)
    (12 65)
    (11 8)
    (66 67)
    (13 68)
    (69 16)
    (10 13)
    (8 70)
    (12 14)
    (2 1)
    (71 5)
    (72 3)
    (73 74)
    (61 66)
    (75 6)
    (8 10)
    (9 12)
    (32 61)
    (76 77)
    (78 79)
    (80 10)
    (17 14)
    (6 13)
    (40 16)
    (14 13)
    (15 17)
    (16 50)
    (81 3)
    (1 2)
    (4 82)
    (83 84)
    (10 70)
    (9 54)
    (44 24)
    (8 10)
    (15 35)
    (61 85)
    (86 38)
    (8 6)
    (38 11)
    (87 15)
    (61 13)
    (74 88)
    (89 73)
    (61 87)
    (90 70)
    (60 10)
    (91 16)
    (92 10)
    (39 11)
    (15 35)
    (93 11)
    (9 38)
    (87 32)
    (42 78)
    (31 69)
    (77 65)
    (56 20)
    (45 79)
    (86 35)
    (49 70)
    (87 52)
    (85 3)
    (47 19)
    (21 27)
    (30 41)
    (71 60)
    (28 63)
    (64 75)
    (88 67)
    (40 39)
    (22 33)
    (16 48)
    (29 37)
    (72 5)
    (26 68)
    (53 58)
    (57 82)
    (4 43)
    (91 80)
    (84 89)
)];

#
# Vertices of the Graph
#

let PagesPersistent = Links feed projectextend[;Id: .Source] Links feed projectextend[;Id: .Target] concat sort rdup extend[Value: 0.0] consume;
let N = PagesPersistent count;
let Minimum = ((1 - D) / N);

update PagesPersistent := PagesPersistent feed projectextend[Id; Value: 1.0 / N] consume;

let Pages = PagesPersistent feed mconsume;


#
# Connect Edge Pages => Leads to WAY! more Links, so use with caution
#

let ConnectEdgePages = fun (pages: rel(tuple([Id: int, Value: real])), links: rel(tuple([Source: int, Target: int]))) (links feed project[Target] sort links feed projectextend[;Target: .Source] sort mergediff projectextend[; Source: .Target] loopjoin[pages feed projectextend[; Target: .Id]]);

# Fragments:
# let PagesWithoutForwardLinks = Links feed project[Target] sort Links feed projectextend[;Target: .Source] sort mergediff consume;
# let ExtraLinks = PagesWithoutForwardLinks feed projectextend[; Source: .Target] loopjoin[PagesPersistent feed projectextend[; Target: .Id]] consume;
#

update Links := Links feed ConnectEdgePages(PagesPersistent, Links) concat sortby[Source] consume;