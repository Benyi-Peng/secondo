delete database pagerank;
create database pagerank;
open database pagerank;

let Workers = [const rel(tuple([Host: string, Port: int, Config: string, MessageServerPort: int])) value
(
    ("127.0.0.1" 1471 "SecondoConfig.ini" 9898)
    ("127.0.0.1" 1472 "SecondoConfig.ini" 9899)
    ("127.0.0.1" 1473 "SecondoConfig.ini" 9900)
    ("127.0.0.1" 1474 "SecondoConfig.ini" 9901)
)];

let WorkerNumber = Workers count;
# = 4

#
# Dampening Factor
#

let D = 0.85;

let PartitionFunction = fun (id: int) (hashvalue(id, WorkerNumber));

#
# Edges of the Graph
#

restore Links from LinksLarge;

#
# Remove dangling Links
#

let RemoveDanglingLinks = fun (links: rel(tuple([Source: int, Target: int]))) (links feed sortby[Target] links feed project[Target] sort rdup links feed projectextend[;Target: .Source] sort rdup kmergediff kmergediff);

let NumberLinks = 100000000;
while Links count < NumberLinks do { update NumberLinks := Links count | update Links := RemoveDanglingLinks(Links) consume} endwhile;
delete NumberLinks;


#
# Vertices of the Graph
#

let PagesPersistent = Links feed projectextend[;Id: .Source] Links feed projectextend[;Id: .Target] concat sort rdup extend[Value: 0.0] consume;
let N = PagesPersistent count;
let Minimum = ((1 - D) / N);

update PagesPersistent := PagesPersistent feed projectextend[Id; Value: 1.0 / N] consume;

let Pages = PagesPersistent feed mconsume;


#
# Connect Edge Pages => Leads to WAY! more Links, so use with caution
#

let ConnectEdgePages = fun (pages: rel(tuple([Id: int, Value: real])), links: rel(tuple([Source: int, Target: int]))) (links feed project[Target] sort links feed projectextend[;Target: .Source] sort mergediff projectextend[; Source: .Target] loopjoin[pages feed projectextend[; Target: .Id]]);

# Fragments:
# let PagesWithoutForwardLinks = Links feed project[Target] sort rdup Links feed projectextend[;Target: .Source] sort mergediff consume;
# let ExtraLinks = PagesWithoutForwardLinks feed projectextend[; Source: .Target] loopjoin[PagesPersistent feed projectextend[; Target: .Id]] consume;
#

# update Links := Links feed ConnectEdgePages(PagesPersistent, Links) concat sortby[Source] consume;