Sequential: Yes
Database  : berlintest
Restore   : No

Operator  : memload
Number    : 1
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : meminit
Number    : 2
Signature : int -> int
Example   : query meminit (256)
Result    : 256

Operator  : mfeed
Number    : 3
Signature : string -> stream(tuple) | mem(rel(tuple)) -> stream(tuple)
Example   : query "ten" mfeed count
Result    : 10

Operator  : letmconsume
Number    : 4
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...))) 
Example   : query "ten" mfeed letmconsume ["mten"]
Result    : ((mem(rel(tuple((No int))))) "mten")


Operator  : memobject
Number    : 5
Signature : string -> MEMLOADABLE | mem(MEMLOADABLE) -> MEMLOADABLE
Example   : query memobject ("ten") count
Result    : 10

Operator  : memlet
Number    : 6
Signature : string x MEMLOADABLE -> bool
Example   : query memlet ("fuenf", ten feed head[5])
Result    : TRUE

Operator  : memdelete
Number    : 7
Signature : string -> bool
Example   : query memdelete ("ten")
Result    : TRUE

Operator  : memupdate
Number    : 8
Signature : string x MEMLOADABLE -> bool | mem(MEMLOADABLE) x MEMLOADABLE -> bool
Example   : query memupdate ("fuenf", ten feed head[7])
Result    : TRUE

Operator  : memload
Number    : 9
Signature : string -> bool
Example   : query memload ("strassen")
Result    : TRUE

Operator  : memgetcatalog
Number    : 10
Signature : -> stream(tuple(...))
Example   : query memgetcatalog () count
Result    : 3

Operator  : memlet
Number    : 11
Signature : string x m:MEMLOADABLE -> bool
Example   : query memlet ("fuenf2", ten feed head[5])
Result    : TRUE

Operator  : mcreateRtree
Number    : 12
Signature : string x Ident -> mem(rtree dim) | mem(rel(...)) x Ident -> mem(rtree dim)
Example   : query "strassen" mcreateRtree [GeoData]
Result    : ( (mem(rtree 2 )) "strassen_GeoData")

Operator  : memsize
Number    : 13
Signature : -> int
Example   : query memsize ()
Result    : 256

Operator  : memload
Number    : 14
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : meminsert
Number    : 15
Signature : stream(tuple) x string -> stream(tuple) | stream(tuple) x mem(tuple) -> stream(tuple)
Example   : query ten feed head[5] meminsert["ten"] count
Result    : 5

Operator  : mwindowintersects
Number    : 16
Signature : {string, mem(rtree dim) }  x {string, mem(rel(tuple(X)))}  x T -> stream(tuple(X)) , T in SPATIALdimD
Example   : query "strassen_GeoData" "strassen" mwindowintersects[thecenter] count
Result    : 1266

Operator  : mwindowintersectsS
Number    : 17
Signature : {string, mem(rtree)} x  T -> stream(tid) 
Example   : query "strassen_GeoData" mwindowintersectsS[thecenter] count
Result    : 1266

Operator  : mconsume
Number    : 18
Signature : stream(tuple) -> memoryRelObject
Example   : query "ten" mfeed head[2] mconsume
Result    : ((memoryRelObject(tuple((No int))))((1)(2)))

Operator  : memclear
Number    : 19
Signature : -> bool
Example   : query memclear ()
Result    : TRUE

Operator  : memload
Number    : 20
Signature : string -> bool
Example   : query memload ("Staedte")
Result    : TRUE

Operator  : mcreateAVLtree
Number    : 21
Signature : {string, mem(rel(...)) }  x Ident -> mem(rel(...))
Example   : query "Staedte" mcreateAVLtree [SName]
Result    : ( (mem (avltree string)) "Staedte_SName")

Operator  : mexactmatch
Number    : 22
Signature : {string, mem(avltree T)}  x {string, rel(tuple(X))}  x T -> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mexactmatch ["Aachen"] count;
Result    : 1

Operator  : mrange
Number    : 23
Signature : {string, mem(avltree T) } x {string, mem(rel(tuple(X)))}  x T x T-> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mrange ["Aachen", "Dortmund"] count;
Result    : 10

Operator  : memload
Number    : 24
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : mcreateAVLtree
Number    : 25
Signature : {string, mem(rel(...))}  x Ident -> mem(avltree X)
Example   : query "ten" mcreateAVLtree[No]
Result    : ((mem (avltree int )) "ten_No")

Operator  : matchbelow
Number    : 26
Signature : {string, mem(avltree T)} x {string, mem(rel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "ten_No" "ten" matchbelow [2] count;
Result    : 1

Operator  : memloadflob
Number    : 27
Signature : string -> bool
Example   : query memloadflob ("Trains")
Result    : TRUE

Operator  : letmconsumeflob
Number    : 28
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...)))
Example   : query Trains feed letmconsumeflob ["trainsFlob"]
Result    : ((mem(rel(tuple((Id int)(Line int)(Up bool)(Trip mpoint))))) "trainsFlob")

Operator  : memletflob
Number    : 29
Signature : string x MEMLOADABLE -> bool
Example   : query memletflob ("trains5", Trains feed head[5])
Result    : TRUE

Operator  : memload
Number    : 30
Signature : string -> bool
Example   : query memload ("strassen")
Result    : TRUE

Operator  : mcreateRtree2
Number    : 31
Signature : stream(Tuple) x Ident x string -> mem(rtree...)
Example   : query "strassen" mfeed projectextend [Name,Typ, GeoData; TID: tupleid(.)] mcreateRtree2 [GeoData, "strassen_GeoData"]
Result    : ((mem(rtree 2 )) "strassen_GeoData")

Operator  : mcreateMtree2
Number    : 32
Signature : stream(Tuple) x T x T x string -> mem(mtree ...) 
Example   : query Kinos feed addid mcreateMtree2 [GeoData, TID, "kinos_GeoData_mtree"]
Result    : ((mem (mtree point))"kinos_GeoData_mtree")

Operator  : mdistRange2 
Number    : 33
Signature : {string, mem(mtree T)} x T x real -> stream(tid)
Example   :  query "kinos_GeoData_mtree" mdistRange2[alexanderplatz, 2000.0] transformstream Kinos gettuples sort = Kinos feed filter[ distance(.GeoData, alexanderplatz) < 2000.0] sort 
Result    : TRUE

Operator  : mdistScan2
Number    : 34
Signature : {string, mem(mtree T)} x T -> stream(tid)
Example   : query "kinos_GeoData_mtree" mdistScan2[alexanderplatz] transformstream Kinos gettuples projectextend[; D : distance(.GeoData, alexanderplatz)] transformstream isOrdered
Result    : TRUE


Operator  : memload
Number    : 35
Signature : string -> bool
Example   : query memload ("Kinos")
Result    : TRUE

Operator  : mcreateMtree
Number    : 36
Signature : {string, mem(rel(X))}  x Ident x string -> mem(mtree Y)
Example   : query "Kinos" mcreateMtree[GeoData, "Kinos_GeoData_mtree2"]
Result    : ((mem (mtree point)) "Kinos_GeoData_mtree2")

Operator  : mdistRange
Number    : 37
Signature : {string, mem(mtree T)}  x {string, rel(X)}  x T x real -> stream(X)
Example   : query "Kinos_GeoData_mtree2" "Kinos" mdistRange[alexanderplatz, 2000.0] count
Result    : 17

Operator  : mdistScan
Number    : 38
Signature : {string, mem(mtree T)}  x {string, mem(rel X)}  x T -> stream(X)
Example   : query "Kinos_GeoData_mtree2" "Kinos" mdistScan[alexanderplatz] head[17] extend[D : distance(.GeoData, alexanderplatz)] max[D]  <= 2000.0
Result    : TRUE


Operator  : mcreateAVLtree2
Number    : 39
Signature : stream(tuple) x ident x ident x string -> mem(rel(tuple))
Example   : query strassen feed addid mcreateAVLtree2[Name, TID, "strassen_Name7"]
Result    : ( (mem (avltree string)) "strassen_Name7")

Operator  : mexactmatchS
Number    : 40
Signature : {string, mem(avltree T) } x T -> stream(TID)
Example   : query "strassen_Name7" mexactmatchS["Hirzerweg"] count
Result    : 5

Operator  : mrangeS
Number    : 41  
Signature : {string, mem(avltree T} x T x T -> stream(TID)
Example   : query "strassen_Name7" mrangeS["A", "B"] count
Result    : 247

Operator  : matchbelowS
Number    : 42  
Signature : {string, mem(avltree T} x T -> stream(TID)
Example   : query "strassen_Name7" matchbelowS["B"] count
Result    : 1

Operator  : gettuples
Number    : 43
Signature : stream(tid) x {string, mem(rel(tuple(X)))} -> stream(tuple(X))
Example   : query "ten_No" mrangeS[4, 5] "ten" gettuples consume count 
Result    : 2



Operator  : memclear
Number    : 44
Signature : -> bool
Example   : query memclear()
Result    : TRUE




Operator  : mcreateTTree
Number    : 1
Signature : {string, mem(rel(...)) } x ID -> mem(rel(...))
Example   : query "Staedte" mcreateTTree[SName]
Result    : ((mem (ttree string)) "Staedte_SName")

Operator  : minsert
Number    : 1
Signature : stream(tuple(x)) x {string, mem(rel(...))} → stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] minsert["ten"] count
Result    : 5

Operator  : minsert
Number    : 2
Signature : stream(tuple(x)) x {string, mem(orel(...))} → stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] minsert["oten"] count
Result    : 5

Operator  : minserttuple
Number    : 1
Signature : {string, mem(rel(...))} x [t1 ... tn] -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" minserttuple["AA",34,5666,899,"ZZ"] count
Result    : 1

Operator  : mdelete
Number    : 1
Signature : stream(tuple(x)) x {string, mem(rel(...))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed filter [.No = 2] mdelete["ten"] count
Result    : 3

Operator  : mdelete
Number    : 2
Signature : stream(tuple(x)) x {string, mem(orel(...))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed filter [.No = 2] mdelete["oten"] count
Result    : 3

Operator  : mdeletebyid
Number    : 1
Signature : {string, mem(rel(tuple))} x (tid)  -> stream(tuple(x@[TID:tid]))] 
Example   : query "Staedte" mdeletebyid[[const tid value 5]] mconsume
Result    : file

Operator  : mupdate
Number    : 2
Signature : stream(tuple(x)) x {string, mem(rel(...))} x [(a1, (tuple(x) -> d1)) ... (an,(tuple(x) -> dn))] -> stream(tuple(x @ [x1_old t1] @...[xn_old tn] @ [TID tid])))
Example   : query Staedte feed filter[.SName = "Hannover"] mupdate["Staedte";Bev: .Bev + 1000] count
Result    : 1

Operator  : mupdate
Number    : 1
Signature : stream(tuple(x)) x {string, mem(orel(...))} x [(a1, (tuple(x) -> d1)) ... (an,(tuple(x) -> dn))] -> stream(tuple(x @ [x1_old t1] @...[xn_old tn] @ [TID tid])))
Example   : query ten feed filter[.No = 2] mupdate["oten"; No: .No + 1000] count
Result    : 3

Operator  : mupdatebyid
Number    : 1
Signature : {string, mem(rel(tuple))} -> stream(tuple) x (tid)  -> stream(tuple(x@[TID:tid]))] 
Example   : query "Staedte" mupdatebyid[[const tid value 10]; Bev: .Bev + 10000, PLZ: 44225] mconsume
Result    : file

Operator  : memload
Number    : 3
Signature : string -> bool
Example   : query memload ("oten")
Result    : TRUE

Operator  : mfeed
Number    : 2
Signature : {string, mem(orel(tuple))} -> stream(tuple)
Example   : query "oten" mfeed count
Result    : 10

Operator  : moconsume
Number    : 1
Signature : stream(tuple) x ID -> memoryORelObject
Example   : query "ten" mfeed head[2] moconsume[No]
Result    : ((memoryORelObject(tuple((No int))))((1)(2)))

Operator  : letmoconsume
Number    : 4
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...))) 
Example   : query "oten" mfeed letmoconsume ["mten",No]
Result    : ((mem(orel(tuple((No int))))) "mten")

Operator  : letmoconsumeflob
Number    : 4
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...))) 
Example   : query "ten" mfeed letmoconsumeflob ["mten",No]
Result    : ((mem(rel(tuple((No int))))) "mten")

Operator  : morange
Number    : 1
Signature : {string, mem(orel(tuple(X)))}  x T x T -> stream(tuple(X))
Example   : query "oten" morange[2,2] count;
Result    : 3

Operator  : moleftrange
Number    : 1
Signature : {string, mem(orel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "oten" moleftrange[2] count;
Result    : 3

Operator  : morightrange
Number    : 1
Signature : {string, mem(orel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "o1" morightrange["Zweibruecken"] count;
Result    : 3

Operator  : moshortestpath
Number    : 1
Signature : stream(tuple(x)) x int x int x int x (tuple->real) -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query "otestrel" mfeed moshortestpath [1,3,0; distance(.GeoData_s1,.GeoData_s2)] moconsume[SeqNo];
Result    : 10

Operator  : moconnectedcomponents
Number    : 1
Signature : {string, mem(orel(tuple(X)))} -> stream(tuple(x@[TID:tid]))
Example   : query "otestrel" moconnectedcomponents mconsume;
Result    : 10

Operator  : mquicksort
Number    : 1
Signature : {string, mem(rel(tuple(x)))} x ID -> stream(tuple(x))
Example   : query "Staedte" mquicksort[SName] count;
Result    : 58

Operator  : mgshortestpath
Number    : 1
Signature : {string, mem(rel(tuple(X)))} x int x int x int -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query "testrel" mgshortestpath [1,2,0] consume;
Result    : 10

Operator  : mgconnectedcomponents
Number    : 1
Signature : {string, mem(rel(tuple(X)))} -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query "testrel" mgconnectedcomponents consume;
Result    : 10

Operator : momapmatchmht
Number   : 1
Signature: orel x rtree x rel x text -> stream(tuple(...))
Example  : query momapmatchmht("Edges", "EdgeIndex_Box", "EdgeIndex", 'Trk_MapMatchTest.gpx') consume;
Result   : file
Tolerance: 0.01%

Operator : momapmatchmht
Number   : 2
Signature: orel x rtree x rel x stream(tuple(...)) -> stream(tuple(...))
Example  : query momapmatchmht("Edges", "EdgeIndex_Box", "EdgeIndex", gpximport('Trk_MapMatchTest.gpx')) consume;
Result   : file
Tolerance: 0.01%

Operator : momapmatchmht
Number   : 3
Signature: orel x rtree x rel x mpoint -> stream(tuple(...))
Example  : query DayTrips feed projectextend[;MatchedTrip: omapmatchmht("Edges", "EdgeIndex_Box", "EdgeIndex", .DayTrip) aconsume] consume;
Result   : file
Tolerance: 0.01%
