Sequential: Yes
Database  : berlintest
Restore   : No

Operator  : memload
Number    : 1
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : meminit
Number    : 2
Signature : int -> int
Example   : query meminit (256)
Result    : 256

Operator  : mfeed
Number    : 3
Signature : string -> stream(tuple) | mem(rel(tuple)) -> stream(tuple)
Example   : query "ten" mfeed count
Result    : 10

Operator  : letmconsume
Number    : 4
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...))) 
Example   : query "ten" mfeed letmconsume ["mten"]
Result    : ((mem(rel(tuple((No int))))) "mten")


Operator  : memobject
Number    : 5
Signature : string -> MEMLOADABLE | mem(MEMLOADABLE) -> MEMLOADABLE
Example   : query memobject ("ten") count
Result    : 10

Operator  : memlet
Number    : 6
Signature : string x MEMLOADABLE -> bool
Example   : query memlet ("fuenf", ten feed head[5])
Result    : TRUE

Operator  : memdelete
Number    : 7
Signature : string -> bool
Example   : query memdelete ("ten")
Result    : TRUE

Operator  : memupdate
Number    : 8
Signature : string x MEMLOADABLE -> bool | mem(MEMLOADABLE) x MEMLOADABLE -> bool
Example   : query memupdate ("fuenf", ten feed head[7])
Result    : TRUE

Operator  : memload
Number    : 9
Signature : string -> bool
Example   : query memload ("strassen")
Result    : TRUE

Operator  : memgetcatalog
Number    : 10
Signature : -> stream(tuple(...))
Example   : query memgetcatalog () count
Result    : 3

Operator  : memlet
Number    : 11
Signature : string x m:MEMLOADABLE -> bool
Example   : query memlet ("fuenf2", ten feed head[5])
Result    : TRUE

Operator  : mcreateRtree
Number    : 12
Signature : string x Ident -> mem(rtree dim) | mem(rel(...)) x Ident -> mem(rtree dim)
Example   : query "strassen" mcreateRtree [GeoData]
Result    : ( (mem(rtree 2 )) "strassen_GeoData")

Operator  : memsize
Number    : 13
Signature : -> int
Example   : query memsize ()
Result    : 256

Operator  : memload
Number    : 14
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : meminsert
Number    : 15
Signature : stream(tuple) x string -> stream(tuple) | stream(tuple) x mem(tuple) -> stream(tuple)
Example   : query ten feed head[5] meminsert["ten"] count
Result    : 5

Operator  : mwindowintersects
Number    : 16
Signature : {string, mem(rtree dim) }  x {string, mem(rel(tuple(X)))}  x T -> stream(tuple(X)) , T in SPATIALdimD
Example   : query "strassen_GeoData" "strassen" mwindowintersects[thecenter] count
Result    : 1266

Operator  : mwindowintersectsS
Number    : 17
Signature : {string, mem(rtree)} x  T -> stream(tid) 
Example   : query "strassen_GeoData" mwindowintersectsS[thecenter] count
Result    : 1266

Operator  : mconsume
Number    : 18
Signature : stream(tuple) -> memoryRelObject
Example   : query "ten" mfeed head[2] mconsume
Result    : ((memoryRelObject(tuple((No int))))((1)(2)))

Operator  : memclear
Number    : 19
Signature : -> bool
Example   : query memclear ()
Result    : TRUE

Operator  : memload
Number    : 20
Signature : string -> bool
Example   : query memload ("Staedte")
Result    : TRUE

Operator  : mcreateAVLtree
Number    : 21
Signature : {string, mem(rel(...)) }  x Ident -> mem(rel(...))
Example   : query "Staedte" mcreateAVLtree [SName]
Result    : ( (mem (avltree string)) "Staedte_SName")

Operator  : mdeleteavltree
Number    : 22
Signature : stream(tuple(x@[TID:tid])) x {string, mem(ttree)} x ident -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" mfeed addid head[5] mdeleteavltree["Staedte_SName", SName] count
Result    : 5

Operator  : minsertavltree
Number    : 23
Signature : stream(tuple(x@[TID:tid])) x {string, mem(ttree)} x ident -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" mfeed addid head[5] minsertavltree["Staedte_SName", SName] count;
Result    : 5

Operator  : mexactmatch
Number    : 24
Signature : {string, mem(avltree T)}  x {string, rel(tuple(X))}  x T -> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mexactmatch ["Aachen"] count;
Result    : 1

Operator  : mrange
Number    : 25
Signature : {string, mem(avltree T) } x {string, mem(rel(tuple(X)))}  x T x T-> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mrange ["Aachen", "Dortmund"] count;
Result    : 10

Operator  : memload
Number    : 26
Signature : string -> bool
Example   : query memload ("ten")
Result    : TRUE

Operator  : mcreateAVLtree
Number    : 27
Signature : {string, mem(rel(...))}  x Ident -> mem(avltree X)
Example   : query "ten" mcreateAVLtree[No]
Result    : ((mem (avltree int )) "ten_No")

Operator  : matchbelow
Number    : 28
Signature : {string, mem(avltree T)} x {string, mem(rel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "ten_No" "ten" matchbelow [2] count;
Result    : 1

Operator  : memloadflob
Number    : 29
Signature : string -> bool
Example   : query memloadflob ("Trains")
Result    : TRUE

Operator  : letmconsumeflob
Number    : 30
Signature : stream(tuple(...)) x string -> mem(rel(tuple(...)))
Example   : query Trains feed letmconsumeflob ["trainsFlob"]
Result    : ((mem(rel(tuple((Id int)(Line int)(Up bool)(Trip mpoint))))) "trainsFlob")

Operator  : memletflob
Number    : 31
Signature : string x MEMLOADABLE -> bool
Example   : query memletflob ("trains5", Trains feed head[5])
Result    : TRUE

Operator  : memload
Number    : 32
Signature : string -> bool
Example   : query memload ("strassen")
Result    : TRUE

Operator  : mcreateRtree2
Number    : 33
Signature : stream(Tuple) x Ident x string -> mem(rtree...)
Example   : query "strassen" mfeed projectextend [Name,Typ, GeoData; TID: tupleid(.)] mcreateRtree2 [GeoData, "strassen_GeoData"]
Result    : ((mem(rtree 2 )) "strassen_GeoData")

Operator  : mcreateMtree2
Number    : 34
Signature : stream(Tuple) x T x T x string -> mem(mtree ...) 
Example   : query Kinos feed addid mcreateMtree2 [GeoData, TID, "kinos_GeoData_mtree"]
Result    : ((mem (mtree point))"kinos_GeoData_mtree")

Operator  : mdistRange2 
Number    : 35
Signature : {string, mem(mtree T)} x T x real -> stream(tid)
Example   :  query "kinos_GeoData_mtree" mdistRange2[alexanderplatz, 2000.0] transformstream Kinos gettuples sort = Kinos feed filter[ distance(.GeoData, alexanderplatz) < 2000.0] sort 
Result    : TRUE

Operator  : mdistScan2
Number    : 36
Signature : {string, mem(mtree T)} x T -> stream(tid)
Example   : query "kinos_GeoData_mtree" mdistScan2[alexanderplatz] transformstream Kinos gettuples projectextend[; D : distance(.GeoData, alexanderplatz)] transformstream isOrdered
Result    : TRUE


Operator  : memload
Number    : 37
Signature : string -> bool
Example   : query memload ("Kinos")
Result    : TRUE

Operator  : mcreateMtree
Number    : 38
Signature : {string, mem(rel(X))}  x Ident x string -> mem(mtree Y)
Example   : query "Kinos" mcreateMtree[GeoData, "Kinos_GeoData_mtree2"]
Result    : ((mem (mtree point)) "Kinos_GeoData_mtree2")

Operator  : mdistRange
Number    : 39
Signature : {string, mem(mtree T)}  x {string, rel(X)}  x T x real -> stream(X)
Example   : query "Kinos_GeoData_mtree2" "Kinos" mdistRange[alexanderplatz, 2000.0] count
Result    : 17

Operator  : mdistScan
Number    : 40
Signature : {string, mem(mtree T)}  x {string, mem(rel X)}  x T -> stream(X)
Example   : query "Kinos_GeoData_mtree2" "Kinos" mdistScan[alexanderplatz] head[17] extend[D : distance(.GeoData, alexanderplatz)] max[D]  <= 2000.0
Result    : TRUE


Operator  : mcreateAVLtree2
Number    : 41
Signature : stream(tuple) x ident x ident x string -> mem(rel(tuple))
Example   : query strassen feed addid mcreateAVLtree2[Name, TID, "strassen_Name7"]
Result    : ( (mem (avltree string)) "strassen_Name7")

Operator  : mexactmatchS
Number    : 42
Signature : {string, mem(avltree T) } x T -> stream(TID)
Example   : query "strassen_Name7" mexactmatchS["Hirzerweg"] count
Result    : 5

Operator  : mrangeS
Number    : 43  
Signature : {string, mem(avltree T} x T x T -> stream(TID)
Example   : query "strassen_Name7" mrangeS["A", "B"] count
Result    : 247

Operator  : matchbelowS
Number    : 44  
Signature : {string, mem(avltree T} x T -> stream(TID)
Example   : query "strassen_Name7" matchbelowS["B"] count
Result    : 1

Operator  : gettuples
Number    : 45
Signature : stream(tid) x {string, mem(rel(tuple(X)))} -> stream(tuple(X))
Example   : query "ten_No" mrangeS[4, 5] "ten" gettuples consume count 
Result    : 2

Operator  : memclear
Number    : 46
Signature : -> bool
Example   : query memclear()
Result    : TRUE

Operator  : memload
Number    : 47
Signature : string -> bool
Example   : query memload("Staedte")
Result    : TRUE


Operator  : memload
Number    : 48
Signature : string -> bool
Example   : query memload("ten")
Result    : TRUE


Operator  : mcreatettree
Number    : 49
Signature : {string, mem(rel(...))} x Ident -> mem(ttree string)
Example   : query "Staedte" mcreatettree[SName]
Result    : ((mem (ttree string)) "Staedte_SName")


Operator  : mdeletettree
Number    : 50
Signature : stream(tuple(x@[TID:tid])) x {string, mem(ttree)} x ident -> stream(tuple(x@[TID:tid]))
Example   : query Staedte feed head[5] addid mdeletettree["Staedte_SName",SName] count;
Result    : 5


Operator  : minsertttree
Number    : 51
Signature : stream(tuple(x@[TID:tid])) x {string, mem(ttree)} x ident -> stream(tuple(x@[TID:tid]))
Example   : query Staedte feed head[5] addid minsertttree["Staedte_SName",SName] count;
Result    : 5


Operator : mcreateinsertrel
Number   : 52
Signature: {string, mem(rel(...))} -> mem(rel(tuple(x@[TID:tid]))) 
Example  : query memlet ("ten_wtid", mcreateinsertrel("ten"));
Result   : TRUE

Operator  : minsert
Number    : 53
Signature : stream(tuple(x)) x {string, mem(rel(...))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] minsert["ten"] count;
Result    : 5

Operator  : minsertsave
Number    : 54
Signature : stream(tuple(x)) x {string, mem(rel((tuple(x))))} x {string, mem(rel((tuple(x@[TID:tid]))))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] minsertsave["ten","ten_wtid"] count;
Result    : 5

Operator  : minserttuple
Number    : 55
Signature : {string, mem(rel((tuple(x))))} x [t1 ... tn] -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" minserttuple["AA",34,5666,"899","ZZ"] count;
Result    : 1


Operator  : memlet
Number    : 56
Signature : stream(tuple) x string -> mem(rel(tuple))
Example   : query memlet("Stadt",  mcreateinsertrel("Staedte")) 
Result    : TRUE


Operator  : minserttuplesave
Number    : 57
Signature : {string, mem(rel(tuple(x)))} x [t1 ... tn] x {string, mem(rel(tuple(x@[TID:tid])))} -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" minserttuplesave["AusgedachtDorf",34,5666,"899","ZZ"; "Stadt"] count;
Result    : 1

Operator  : mcreatedeleterel
Number    : 58
Signature : {string, mem(rel((tuple(x))))} -> mem(rel(tuple(x@[TID:tid]))) 
Example   : query memlet ("Doerfer", mcreatedeleterel("Staedte"))
Result    : TRUE

Operator  : mdelete
Number    : 59
Signature : stream(tuple(x)) x {string, mem(rel(tuple(x)))} -> stream(tuple(x@[TID:tid]))
Example   : query "ten" mfeed filter [.No = 8] tids mdelete["ten"] count
Result    : 1


Operator  : mdeletesave
Number    : 60
Signature : stream(tuple(x)) x {string, mem(rel(tuple(x)))} x {string, mem(rel(tuple(x)))} -> stream(tuple(x@[TID:tid]))
Example   : query "Staedte" mfeed filter[.PLZ = 4000]  tids mdeletesave["Staedte","Doerfer"] count;
Result    : 1

Operator  : mdeletebyid
Number    : 61
Signature : {string, mem(rel(tuple(x)))} x (tid)  -> stream(tuple(x@[TID:tid]))] 
Example   : query "Staedte" mdeletebyid[[const tid value 5]] count;
Result    : 1

Operator  : mcreateupdaterel
Number    : 62
Signature : {string, mem(rel(tuple(x)))} -> mem(rel(tuple(x@[(a1_old x1)...(an_old xn)(TID:tid)]))) 
Example   : query memlet ("StaedteUp", mcreateupdaterel("Staedte"));
Result    : TRUE

Operator  : mupdate
Number    : 63
Signature : stream(tuple(x)) x {string, mem(rel(tuple(x)))} x [(ai, (tuple(x) -> di))] -> stream(tuple(x @ [x1_old t1] @...[xn_old tn] @ [TID tid])))
Example   : query "Staedte" mfeed filter[.SName = "Hannover"] tids mupdate["Staedte"; Bev: .Bev + 1000] count;
Result    : 1

Operator  : mupdatesave
Number    : 64
Signature : stream(tuple(x)) x {string, mem(rel(tuple(x)))} x [(ai, (tuple(x) -> di))] ... (an,(tuple(x) -> dn))] x {string, mem(rel((tuple(x@[TID:tid]))))} -> stream(tuple(x @ [x1_old t1] @...[xn_old tn] @ [TID tid])))
Example   : query "Staedte" mfeed filter[.SName = "Hannover"] tids mupdatesave["Staedte","StaedteUp";Bev: .Bev + 1000] count
Result    : 1

Operator  : mupdatebyid
Number    : 65
Signature : {string, mem(rel(tuple))} x (tid) x [(a1, (tuple(x) -> d1)) ... (an,(tuple(x) -> dn))] -> stream(tuple(x @ [x1_old t1] @...[xn_old tn] @ [TID tid])))
Example   : query mwrap("ten") mupdatebyid[ [const tid value 5]; No: .No + 1000] count;
Result    : 1

Operator  : mquicksort
Number    : 66
Signature : {string, mem(rel(tuple(x)))} -> stream(tuple(x))
Example   : query "Staedte" mquicksort isOrdered 
Result    : TRUE

Operator  : mquicksortby
Number    : 67
Signature : {string, mem(rel(tuple(x)))} x (ident1 ... identn) -> stream(tuple(x))
Example   : query "Staedte" mquicksortby[SName] isOrderedBy[SName]
Result    : TRUE

Operator  : letmoconsume 
Number    : 68
Signature : stream(tuple) x string x attlist -> stream(tuple) 
Example   : query ten feed letmoconsume["oten"; No] mfeed count
Result    : 10

Operator  : mfeed
Number    : 69
Signature : {string, mem(orel(tuple(x)))} -> stream(tuple(x))
Example   : query "oten" mfeed count
Result    : 10


Operator  : letmoconsume
Number    : 70
Signature : stream(tuple(x)) x string x (ident1 ... identn) -> mem(orel(tuple(x)) (ident1 ... identn)) 
Example   : query ten feed head[5] minsert["ten"] letmoconsume["fuenf"; No];
Result    : ((mem (orel (tuple ((No int) (TID tid))) (No))) "fuenf")

Operator  : letmoconsumeflob
Number    : 71
Signature : stream(tuple(x)) x string x (ident1 ... identn) -> mem(orel(tuple(x)) (ident1 ... identn))
Example   : query Trains feed letmoconsumeflob ["moTrains"; Id]
Result    : ((mem (orel (tuple ( (Id int) (Line int) (Up bool) (Trip mpoint))) (Id))) "moTrains")

Operator  : morange
Number    : 72
Signature : {string, mem(orel(tuple(x)))}  x T x T -> stream(tuple(x))
Example   : query "oten" morange[2;2] count;
Result    : 1

Operator  : moleftrange
Number    : 73
Signature : {string, mem(orel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "oten" moleftrange[2] count;
Result    : 2

Operator  : morightrange
Number    : 74
Signature : {string, mem(orel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "oten" morightrange[5] count;
Result    : 6

Operator  : moinsert
Number    : 75
Signature : stream(tuple(x)) x {string, mem(orel(tuple(x)))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] moinsert["oten"] count;
Result    : 5

Operator  : modelete
Number    : 76
Signature : stream(tuple(x)) x {string, mem(orel(tuple(x)))} -> stream(tuple(x@[TID:tid]))
Example   : query ten feed head[5] modelete["oten"] count;
Result    : 5

Operator  : memload
Number    : 77
Signature : string -> bool
Example   : query memload("otestrel")
Result    : TRUE

Operator  : moshortestpathd
Number    : 78
Signature : {string, mem(orel(tuple(x)))} x int x int x int x (tuple->real) -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query mwrap("otestrel") moshortestpathd [1,3,0; distance(.GeoData_s1,.GeoData_s2)] count;
Result    : 1

Operator  : moshortestpatha
Number    : 79
Signature : {string, mem(orel(tuple(x)))} x int x int x int x (tuple->real) x (tuple->real)-> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query mwrap("otestrel") moshortestpatha [1,3,0; distance(.GeoData_s1,.GeoData_s2),distance(.GeoData_s1,.GeoData_s2) * 0.0] count;
Result    : 1

Operator  : moconnectedcomponents
Number    : 80
Signature : {string, mem(orel(tuple(X)))} -> stream(tuple(x@[compNo:int]))
Example   : query "otestrel" moconnectedcomponents count;
Result    : 74

Operator  : memglet
Number    : 81
Signature : string x orel(tuple(x)) -> bool
Example   : query memglet ("graph", otestrel)
Result    : TRUE

Operator  : memgletflob
Number    : 82
Signature : string x orel(tuple(x)) -> bool
Example   : query memgletflob ("graph1", otestrel)
Result    : TRUE

Operator  : mgshortestpathd
Number    : 83
Signature : {string, mem(graph(tuple(x)))} x int x int x int x (tuple->real) -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query mwrap("graph") mgshortestpathd [1,3,0; distance(.GeoData_s1,.GeoData_s2)] count;
Result    : 1

Operator  : mgshortestpatha
Number    : 84
Signature : {string, mem(graph(tuple(x)))} x int x int x int x (tuple->real) x (tuple->real) -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query mwrap("graph") mgshortestpatha [1,40,0; distance(.GeoData_s1,.GeoData_s2), distance(.GeoData_s1,.GeoData_s2) * 2.0] count;
Result    : 8

Operator  : mgconnectedcomponents
Number    : 85
Signature : {string, mem(graph(tuple(x)))} -> stream(tuple(a1:t1,...an+1:tn+1))
Example   : query "graph" mgconnectedcomponents count;
Result    : 74

Operator  : mwrap
Number    : 89
Signature : string -> mem(x)
Example   : query mwrap("ten")
Result    : ( (mem(rel(tuple((No int))))) "ten")

Operator  : mexactmatch
Number    : 90
Signature : {string, mem(ttree T)}  x {string, rel(tuple(X))}  x T -> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mexactmatch ["Wolfsburg"] count;
Result    : 1

Operator  : mrange
Number    : 91
Signature : {string, mem(ttree T) } x {string, mem(rel(tuple(X)))}  x T x T-> stream(tuple(X))
Example   : query "Staedte_SName" "Staedte" mrange ["Wiesbaden", "Wuppertal"] count;
Result    : 4

Operator  : mcreatettree
Number    : 92
Signature : {string, mem(rel(...))} x Ident -> mem(ttree string)
Example   : query "ten" mcreatettree[No]
Result    : ((mem (ttree int)) "ten_No")

Operator  : matchbelow
Number    : 93
Signature : {string, mem(ttree T)} x {string, mem(rel(tuple(X)))}  x T -> stream(tuple(X))
Example   : query "ten_No" "ten" matchbelow [2] count;
Result    : 1

Operator  : moconsume
Number    : 94
Signature : stream(tuple) x attr^n -> mem(orel(tuple))
Example   : query Staedte feed head[2] moconsume[SName]  
Result    : ( (memoryORelObject (tuple ( (SName string) (Bev int) (PLZ int) (Vorwahl string) (Kennzeichen string)))) ( ("Aachen" 239000 5100 "0241" "AC") ("Berlin" 1859000 1000 "030" "B"))) 


Operator  : collect_mvector
Number    : 95
Signature : stream(DATA) x string x bool -> bool
Example   : query plz feed projecttransformstream[PLZ] collect_mvector["V_PLZ", TRUE]
Result    : TRUE


Operator  : pwrap
Number    : 96
Signature : {string, mem} -> mpointer
Example   : query pwrap("ten") getTypeNL contains "mpointer"
Result    : TRUE

Operator  : memload
Number    : 97
Signature : string -> bool
Example   : query memload("plz")
Result    : TRUE



Operator  : mcreateAVLtree
Number    : 98
Signature : memrel x attrname -> memavltree
Example   : query "plz" mcreateAVLtree[PLZ]
Result    : ((mem (avltree int )) "plz_PLZ")

Operator  : matchbelow2
Number    : 99
Signature : memavltree x memrel x T x Ident x V -> V
Example   : query "plz_PLZ" "plz" matchbelow2[5000, Ort, "anywhere"]
Result    : "Wiederau"


