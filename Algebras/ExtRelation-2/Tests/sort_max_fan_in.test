# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

set "ERA:TraceSort" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup sort_max_fan_in_test StandardAlgebra RelationAlgebra ExtRelation2Algebra

#--------------------------------------------------  
# Create objects opt and thousand

restore database opt from '$(SECONDO_BUILD_DIR)/bin/opt';
save plz to '$(SECONDO_BUILD_DIR)/bin/tmp/plz';
save thousand to '$(SECONDO_BUILD_DIR)/bin/tmp/thousand';
close database;

#--------------------------------------------------  
# Create database with 1 GB data and tuplesize 1 KB

create database db_R1G_T1KB;
open database db_R1G_T1KB;
restore plz from '$(SECONDO_BUILD_DIR)/bin/tmp/plz';
restore thousand from '$(SECONDO_BUILD_DIR)/bin/tmp/thousand';
restore largetext from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/Tests/objects/largetext';
let R1G_T1KB = plz feed project[PLZ] thousand feed product head[1048576] head[100] extend[ival: randint(9), rval: randint(100) * 0.1, bval: TRUE, textval: subtext(largetext,1,959), ran: randint(100000)] sortby[ran asc] remove[ran] consume;

##############################################################################
# TestCases
##############################################################################

#testcase tuplesize_R1G_T1KB
#yields (real 1024.0)
query R1G_T1KB feed head[1] tuplesize;

#--------------------------------------------------  

#testcase fan_in_600
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,600,4096] count;

#--------------------------------------------------  

#testcase fan_in_500
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,500,4096] count;

#--------------------------------------------------  

#testcase fan_in_400
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,400,4096] count;

#--------------------------------------------------  

#testcase fan_in_300
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,300,4096] count;

#--------------------------------------------------  

#testcase fan_in_200
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,200,4096] count;

#--------------------------------------------------  

#testcase fan_in_100
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,100,4096] count;

#--------------------------------------------------  

#testcase fan_in_90
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,90,4096] count;

#--------------------------------------------------  

#testcase fan_in_80
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,80,4096] count;

#--------------------------------------------------  

#testcase fan_in_70
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,70,4096] count;

#--------------------------------------------------  

#testcase fan_in_60
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,60,4096] count;

#--------------------------------------------------  

#testcase fan_in_50
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,50,4096] count;

#--------------------------------------------------  

#testcase fan_in_40
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,40,4096] count;

#--------------------------------------------------  

#testcase fan_in_30
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,30,4096] count;

#--------------------------------------------------  

#testcase fan_in_20
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,20,4096] count;

#--------------------------------------------------  

#testcase fan_in_10
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,10,4096] count;

#--------------------------------------------------  

#testcase fan_in_5
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,5,4096] count;

#--------------------------------------------------  

#testcase fan_in_2
#yields success
query R1G_T1KB feed head[100] sortby2with[textval asc, PLZ asc; 1024*1024,2,4096] count;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_R1G_T1KB;
