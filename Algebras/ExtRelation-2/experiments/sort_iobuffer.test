# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceSort" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_R1G
#--------------------------------------------------  

#setup sort_iobuffer StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_R1G;
open database db_R1G;

#--------------------------------------------------  
# Create relation with 1 GB data and 512 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T512B';

#testcase create_relation
#yields success
let ten = R100MB_T512B feed head[10] project [Nr] {a} consume; 

#testcase create_relation
#yields success
let R1G_T512B = R100MB_T512B feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;64*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T512B
#yields (real 512.0)
query R1G_T512B feed head[1] tuplesize;

#testcase small_tuplesize_1
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,0] count;

#testcase small_tuplesize_2
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,1024] count;

#testcase small_tuplesize_3
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,2048] count;

#testcase small_tuplesize_4
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,4096] count;

#testcase small_tuplesize_5
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,8192] count;

#testcase small_tuplesize_6
#yields success
query R1G_T512B feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 8 KByte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T8KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T8KB';

#testcase create_relation
#yields success
let R1G_T8KB = R100MB_T8KB feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;64*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T8KB
#yields (real 8192.0)
query R1G_T8KB feed head[1] tuplesize;

#--------------------------------------------------  

#testcase medium_tuplesize_1
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,0] count;

#--------------------------------------------------  

#testcase medium_tuplesize_2
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,1024] count;

#--------------------------------------------------  

#testcase medium_tuplesize_3
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,2048] count;

#--------------------------------------------------  

#testcase medium_tuplesize_4
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,4096] count;

#--------------------------------------------------  

#testcase medium_tuplesize_5
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,8192] count;

#--------------------------------------------------  

#testcase medium_tuplesize_6
#yields success
query R1G_T8KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 64 KByte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T64KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T64KB';

#testcase create_relation
#yields success
let R1G_T64KB = R100MB_T64KB feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;64*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T64KB
#yields (real 65536.0)
query R1G_T64KB feed head[1] tuplesize;

#--------------------------------------------------  

#testcase big_tuplesize_1
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,0] count;

#--------------------------------------------------  

#testcase big_tuplesize_2
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,1024] count;

#--------------------------------------------------  

#testcase big_tuplesize_3
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,2048] count;

#--------------------------------------------------  

#testcase big_tuplesize_4
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,4096] count;

#--------------------------------------------------  

#testcase big_tuplesize_5
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,8192] count;

#--------------------------------------------------  

#testcase big_tuplesize_6
#yields success
query R1G_T64KB feed sortby2Param[Flob asc, Nr asc;16*1024*1024,-1,16384] count;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_R1G;
