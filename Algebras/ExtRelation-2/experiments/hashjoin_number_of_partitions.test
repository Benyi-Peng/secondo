# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_number_of_partitions StandardAlgebra RelationAlgebra ExtRelation2Algebra

restore database db_tmp from '$(SECONDO_BUILD_DIR)/bin/opt';

#--------------------------------------------------  
# Create relations with 25/30 MB data 
# and ~25 Byte tuples
#--------------------------------------------------  

#testcase create_relation_A
#yields success
let relA = plz feed thousand feed head[26] product head[1048576] extend[ran: randint(50000)] sortby2Param[PLZ;30*1024*1024,-1,-1] remove[ran] {a} consume; 

#testcase create_relation_B
#yields success
let relB = plz feed thousand feed head[31] product head[209716] extend[ran: randint(50000)] sortby2Param[PLZ;30*1024*1024,-1,-1] remove[ran] {b} consume; 

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 2 MB
#--------------------------------------------------  

#testcase 25MB_join_2MB_2_partitions
#yields success
query relA feed relB feed head[83887] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_2MB_16_partitions
#yields success
query relA feed relB feed head[83887] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 5 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[209716] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[209716] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 10 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[419431] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[419431] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 15 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[629146] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[629146] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 20 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[838861] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[838861] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[1048576] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[1048576] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 30 MB
#--------------------------------------------------  

#testcase 25MB_join_5MB_2_partitions
#yields success
query relA feed relB feed head[1258292] hybridhashjoinParam[PLZ_a,PLZ_b;1000,2,1024*1024,-1] count;

#testcase 25MB_join_5MB_16_partitions
#yields success
query relA feed relB feed head[1258292] hybridhashjoinParam[PLZ_a,PLZ_b;1000,16,1024*1024,-1] count;


##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
