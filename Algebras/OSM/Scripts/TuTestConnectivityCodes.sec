################################################################################
### Compares possible transistions with connectivity codes (optional)
################################################################################
### Description:
### - This script tests if transistions at junctions correspond to the computed
### connectivity codes in networks from imported OSM data.
### Please, see tu_osm_import.sh for further details. 
###
### Preconditions:
###
### Postconditions:
###
### Author:
### - Thomas Uchdorf, thomas.uchdorf(at)fernuni-hagen.de
################################################################################

open database beispielCity;

delete cityNetwork;
delete testRoads;
delete testJunctions;

let testRoads =
   cityRoads feed
   filter [(.Road = 1) or (.Road = 22)]
   projectextend [Road, Length, Geometry; 
      Dual: ifthenelse(.Road = 1,TRUE,TRUE),
      StartsSmaller: .StartsSmaller]
   consume;

let testJunctions =
   cityJunctions feed
   filter [(.Road1 = 1) and (.Road2 = 22)]
   remove [NewJunctionType]
   extend [NewJunctionType: 10920]
   consume;
 
let cityNetwork = thenetwork(
   1,
   1.0,
   testRoads,
   testJunctions);

# Testing transitions at junctions
#        |
#        o 8
#        |
#        o 4
#   5 1  |  3 7
# --o-o--x--o-o--
#        |
#        o 2
#        |
#        o 6
#        |
delete spot1;
delete spot2;
delete spot3;
delete spot4;
delete spot5;
delete spot6;
delete spot7;
delete spot8;
let spot1 =
   point2gpoint(cityNetwork,[const point value(6800.0787 51236.7884)]);
let spot2 =
   point2gpoint(cityNetwork,[const point value(6800.7417 51236.2057)]);
let spot3 =
   point2gpoint(cityNetwork,[const point value(6801.3243 51236.0249)]);
let spot4 =
   point2gpoint(cityNetwork,[const point value(6801.1836 51236.6276)]);
let spot5 =
   point2gpoint(cityNetwork,[const point value(6799.7426 51236.9659)]);
let spot6 =
   point2gpoint(cityNetwork,[const point value(6800.6419 51236.1895)]);
let spot7 =
   point2gpoint(cityNetwork,[const point value(6801.5182 51235.9436)]);
let spot8 =
   point2gpoint(cityNetwork,[const point value(6801.2491 51236.7506)]);
delete transitions;
let transitions =
   makearray(
      ifthenelse(isdefined(shortest_path(spot1,spot3)),1,0),
      ifthenelse(isdefined(shortest_path(spot1,spot5)),1,0),
      ifthenelse(isdefined(shortest_path(spot1,spot4)),1,0),
      ifthenelse(isdefined(shortest_path(spot1,spot2)),1,0),
      ifthenelse(isdefined(shortest_path(spot3,spot7)),1,0),
      ifthenelse(isdefined(shortest_path(spot3,spot1)),1,0),
      ifthenelse(isdefined(shortest_path(spot3,spot4)),1,0),
      ifthenelse(isdefined(shortest_path(spot3,spot2)),1,0),
      ifthenelse(isdefined(shortest_path(spot2,spot3)),1,0),
      ifthenelse(isdefined(shortest_path(spot2,spot1)),1,0),
      ifthenelse(isdefined(shortest_path(spot2,spot4)),1,0),
      ifthenelse(isdefined(shortest_path(spot2,spot6)),1,0),
      ifthenelse(isdefined(shortest_path(spot4,spot3)),1,0),
      ifthenelse(isdefined(shortest_path(spot4,spot1)),1,0),
      ifthenelse(isdefined(shortest_path(spot4,spot8)),1,0),
      ifthenelse(isdefined(shortest_path(spot4,spot2)),1,0));
save transitions to '/Users/fernuni-student/secondo/Algebras/OSM/Scripts/Exported/10920.txt';
#let transitions =
#   [const rel(tuple([
#      AupAup: int, 
#      AupAdown: int, 
#      AupBup: int, 
#      AupBdown: int,
#      AdownAup: int,
#      AdownAdown: int,
#      AdownBup: int,
#      AdownBdown: int,
#      BupAup: int, 
#      BupAdown: int, 
#      BupBup: int, 
#      BupBdown: int,
#      BdownAup: int,
#      BdownAdown: int,
#      BdownBup: int,
#      BdownBdown: int,
#      cc: int
#   ])) 
#   value ()];
#update transitions :=
#      (ifthenelse(isdefined(shortest_path(spot1,spot3)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot1,spot5)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot1,spot4)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot1,spot2)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot3,spot7)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot3,spot1)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot3,spot4)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot3,spot2)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot2,spot3)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot2,spot1)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot2,spot4)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot2,spot6)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot4,spot3)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot4,spot1)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot4,spot8)),1,0) 
#      ifthenelse(isdefined(shortest_path(spot4,spot2)),1,0) 
#      10920);
close database;
