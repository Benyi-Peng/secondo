################################################################################
### Creating networks from imported OSM data (11 / 11)
################################################################################
### Description:
### - This script creates networks from imported OSM data.
### Please, see tu_oms_import.sh for further details. 
###
### Preconditions:
### - activated necessary algebras
### - existing open database with successfully imported osm data
### - extStreetsRel-relation
### extStreetsRel: rel{geoData: sline, streetId: int, name: string, ref: string,
###                    roadClass: string, oneWay: int, bridge: int,
###                    maxSpeed: int, tunnel: bool, layer: int, groupId: int}
### - twoSecJuncBtwTwoSts-relation
### twoSecJuncBtwTwoSts: rel{Road1: int, Pos1: double, Road2: int,
###                          Pos2: double, JunctionType: int}
### - threeSecJuncBtwTwoSts-relation
### threeSecJuncBtwTwoSts: rel{Road1: int, Pos1: double, Road2: int,
###                            Pos2: double, JunctionType: int}
### - fourSecJuncBtwTwoSts-relation
### fourSecJuncBtwTwoSts: rel{Road1: int, Pos1: double, Road2: int,
###                           Pos2: double, JunctionType: int}
###
### Postconditions:
### - cityRoads-relation
### cityRoads: rel{Name: string, Road: int, Length: double, Geometry: line,
###                Dual: bool, StartsSmaller: bool, RoadLevel: int}
### - cityJunctions-relation
### cityJunctions: rel{Road1: int, Pos1: double, Road2: int, Pos2: double,
###                    JunctionType: int}
### - cityNetwork-network
###
### Author:
### - Thomas Uchdorf, t.uchdorf@arcor.de
################################################################################

# Making a relation with road data to enable network creation
# see also PaperMon-paper page 11
let cityRoads =
   extStreetsRel feed
   projectextend [; Name : .name, Road: .streetId,
     Length: size(.geoData),
     Geometry: .geoData, Dual: .oneWay=0,
     StartsSmaller: get_startsmaller(.geoData),
     RoadLevel : .roadClassRef]
   consume;

# Calculating and inserting road measures into a new relation containing
# junction data
# see also PaperMon-paper page 11
let cityJunctionsTmp =
   ((twoSecJuncBtwTwoSts feed
     extend [numSecs: 2]
     project [Road1,Pos1,Road2,Pos2,JunctionType,numSecs]
     threeSecJuncBtwTwoSts feed
     extend [numSecs: 3]
     project [Road1,Pos1,Road2,Pos2,JunctionType,numSecs]
     concat)
    fourSecJuncBtwTwoSts feed
    extend [numSecs: 4]
    project [Road1,Pos1,Road2,Pos2,JunctionType,numSecs]
    concat)
   consume;
# should not make a difference since the combined junctions are composed in a 
# disjunct way 
let cityJunctions =
   cityJunctionsTmp feed
   sortby[Road1,Pos1,Road2,Pos2]
   groupby [Road1,Pos1,Road2,Pos2; 
      NewJunctionType: group feed 
         aggregateB [JunctionType; 
                     fun(a:int,b:int) binor(a,b); 
                     0]]
   consume;

# Creating the network
let cityNetwork = thenetwork(
   1,
   1.0,
   (cityRoads feed
   project [Road, Length, Geometry, Dual, StartsSmaller]
   consume),
   cityJunctions);

close database;
