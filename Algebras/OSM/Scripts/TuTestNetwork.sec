################################################################################
### Tests networks from imported OSM data (optional)
################################################################################
### Description:
### - This script tests networks from imported OSM data.
### Please, see tu_osm_import.sh for further details. 
###
### Preconditions:
###
### Postconditions:
###
### Author:
### - Thomas Uchdorf, t.uchdorf@arcor.de
################################################################################

# Adding some gpoints for testing purposes
let spot1 =
   point2gpoint(cityNetwork,[const point value(6800.58 51236.37)]);
let spot2 =
   point2gpoint(cityNetwork,[const point value(6775.94 51238.47)]);
#let spot3 =
#   point2gpoint(cityNetwork,[const point value(6783.25 51263.80)]);

# Checking whether the oneWay-Attribute is set correctly
query extStreetsRel feed
filter [(.roadClassRef = 1)
   and not(.oneWay = 1)]
consume;

# Testing if any junctions were computed
query (cityJunctions feed count) > 0;

# Checking whether there are duplicate junctions
query ((cityJunctionsTmp feed count) - (cityJunctions feed count)) = 0;
query (cityJunctionsTmp feed
   sortby [Road1,Pos1,Road2,Pos2]
   groupby [Road1,Pos1,Road2,Pos2; Cnt: group count]
   filter [.Cnt > 1] count) = 0;

query cityJunctions feed
   cityRoads feed {a}
   hashjoin[Road1,Road_a,99997]
   cityRoads feed {b}
   hashjoin[Road2,Road_b,99997]
   consume;

# Testing transitions at junctions
#        |
#        o 8
#        |
#        o 4
#   5 1  |  3 7
# --o-o--x--o-o--
#        |
#        o 2
#        |
#        o 6
#        |
delete spot1;
delete spot2;
delete spot3;
delete spot4;
delete spot5;
delete spot6;
delete spot7;
delete spot8;
let spot1 =
   point2gpoint(cityNetwork,[const point value(6800.0787 51236.7884)]);
let spot2 =
   point2gpoint(cityNetwork,[const point value(6800.7417 51236.2057)]);
let spot3 =
   point2gpoint(cityNetwork,[const point value(6801.3243 51236.0249)]);
let spot4 =
   point2gpoint(cityNetwork,[const point value(6801.1836 51236.6276)]);
let spot5 =
   point2gpoint(cityNetwork,[const point value(6799.7426 51236.9659)]);
let spot6 =
   point2gpoint(cityNetwork,[const point value(6800.6419 51236.1895)]);
let spot7 =
   point2gpoint(cityNetwork,[const point value(6801.5182 51235.9436)]);
let spot8 =
   point2gpoint(cityNetwork,[const point value(6801.2491 51236.7506)]);
query makearray(
   ifthenelse(isdefined(shortest_path(spot1,spot3)),1,0),
   ifthenelse(isdefined(shortest_path(spot1,spot5)),1,0),
   ifthenelse(isdefined(shortest_path(spot1,spot4)),1,0),
   ifthenelse(isdefined(shortest_path(spot1,spot2)),1,0),
   ifthenelse(isdefined(shortest_path(spot3,spot7)),1,0),
   ifthenelse(isdefined(shortest_path(spot3,spot1)),1,0),
   ifthenelse(isdefined(shortest_path(spot3,spot4)),1,0),
   ifthenelse(isdefined(shortest_path(spot3,spot2)),1,0),
   ifthenelse(isdefined(shortest_path(spot2,spot3)),1,0),
   ifthenelse(isdefined(shortest_path(spot2,spot1)),1,0),
   ifthenelse(isdefined(shortest_path(spot2,spot4)),1,0),
   ifthenelse(isdefined(shortest_path(spot2,spot6)),1,0),
   ifthenelse(isdefined(shortest_path(spot4,spot3)),1,0),
   ifthenelse(isdefined(shortest_path(spot4,spot1)),1,0),
   ifthenelse(isdefined(shortest_path(spot4,spot8)),1,0),
   ifthenelse(isdefined(shortest_path(spot4,spot2)),1,0));

query cityRoads feed filter [(.Road = 1) or (.Road = 22)] consume
query cityJunctions feed filter [(.Road1 = 1) and (.Road2 = 22)] consume
let cityNetwork = thenetwork(
   1,
   1.0,
   (cityRoads feed filter [(.Road = 1) or (.Road = 22)]
   project [Road, Length, Geometry, Dual, StartsSmaller]
   consume),
   (cityJunctions feed filter [(.Road1 = 1) and (.Road2 = 22)] consume));
# Playing around
let cityNetwork = thenetwork(
   1,
   1.0,
   (cityRoads feed filter [(.Road = 1) or (.Road = 22)]
   projectextend [Road, Length, Geometry; Dual: TRUE, StartsSmaller: .StartsSmaller]
   consume),
   (cityJunctions feed filter [(.Road1 = 1) and (.Road2 = 22)]
    remove [NewJunctionType] extend [NewJunctionType: 1911]
    consume));

# adjacent sections starting at lower part of A in opposite direction in
# respect to the junction
# (should return nothing - street ends)
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,1,FALSE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at lower part of A
# (should return
#  1 FALSE [AUP->ADOWN], 2 TRUE [AUP->AUP], 4 TRUE[AUP->BUP])
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,1,TRUE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at upper part of A
# (should return
#  1 FALSE [ADOWN->ADOWN], 2 TRUE [ADOWN->AUP], 4 TRUE [ADOWN->BUP])
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,2,FALSE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at upper part of A in opposite direction in
# respect to the junction
# (should return nothing - street ends)
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,2,TRUE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at lower part of B in opposite direction in
# respect to the junction
# (should return nothing - street ends)
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,3,FALSE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at lower part of B
# (should return
#  1 FALSE [BUP->ADOWN], 2 TRUE [BUP->AUP], 4 TRUE[BUP->BUP]) WRONG!!!
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,3,TRUE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at upper part of B
# (should return nothing - oneway-street) WRONG!!!
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,4,FALSE)
   hashjoin [sid_a,SecID,99997]
   consume;

# adjacent sections starting at upper part of B in opposite direction in
# respect to the junction
# (should return nothing - street ends)
query sections(cityNetwork)
   feed project [sid,curve] {a}
   getAdjacentSections(cityNetwork,4,TRUE)
   hashjoin [sid_a,SecID,99997]
   consume;


