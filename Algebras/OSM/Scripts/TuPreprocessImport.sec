################################################################################
### Importing OSM data from shape files (1 / 11)
################################################################################
### Description:
### - This script creates, opens and initializes a database intended for data
### from shape-files. The actual data import takes place in another Secondo-
### script. In the script at hand various help variables are set enabling an
### optional limitation of the region of interest.
### Please, see tu_shp_import.sh for further details.
###
### Preconditions:
### - none
###
### Postconditions:
### - existing open database with some specifications on the corresponding city
###
### Author:
### - Thomas Uchdorf, t.uchdorf@arcor.de
################################################################################

# Creating and opening a new database
create database duesseldorfCity;
open database duesseldorfCity;

# Changing the scaling applied to all coordinates during import
query setscalefactorx(1000);
query setscalefactory(1000);

# Setting the path to the directory with the shape data:
let SRC_DIR_PATH =
   '/Users/fernuni-student/osm-data/osm-files/geofabrik/duesseldorf/';
let PART =
   'City';
let SCALE_FACTOR_X =
   getscalefactorx();
let SCALE_FACTOR_Y =
   getscalefactory();


# Defining the clipping rectangle used to restrict the data to the city area
let cityRect =
   rectangle2 (
      (6.65 * SCALE_FACTOR_X),
      (6.91 * SCALE_FACTOR_X),
      (51.18 * SCALE_FACTOR_Y),
      (51.28 * SCALE_FACTOR_Y));

# Dividing the main city rectangle into 9 parts for each orientation
let districtWidth =
   (maxD(cityRect,1) - minD(cityRect,1)) / 3;
let districtHeight =
   (maxD(cityRect,2) - minD(cityRect,2)) / 3;
# north-west
let nwRect = 
   rectangle2(
      minD(cityRect,1),
      (minD(cityRect,1) + districtWidth), 
      (minD(cityRect,2) + districtHeight + districtHeight),
      maxD(cityRect,2));
# west
let wRect = 
   rectangle2(
      minD(cityRect,1),
      (minD(cityRect,1) + districtWidth), 
      (minD(cityRect,2) + districtHeight),
      (minD(cityRect,2) + districtHeight + districtHeight));
# south-west
let swRect = 
   rectangle2(
      minD(cityRect,1),
      (minD(cityRect,1) + districtWidth), 
      (minD(cityRect,2)),
      (minD(cityRect,2) + districtHeight));
# north-east
let neRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth + districtWidth),
      maxD(cityRect,1), 
      (minD(cityRect,2) + districtHeight + districtHeight),
      maxD(cityRect,2));
# east
let eRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth + districtWidth),
      maxD(cityRect,1), 
      (minD(cityRect,2) + districtHeight),
      (minD(cityRect,2) + districtHeight + districtHeight));
# south-east
let seRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth + districtWidth),
      maxD(cityRect,1), 
      (minD(cityRect,2)),
      (minD(cityRect,2) + districtHeight));
# north
let nRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth),
      (minD(cityRect,1) + districtWidth + districtWidth),
      (minD(cityRect,2) + districtHeight + districtHeight),
      maxD(cityRect,2));
# center
let cRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth),
      (minD(cityRect,1) + districtWidth + districtWidth),
      (minD(cityRect,2) + districtHeight),
      (minD(cityRect,2) + districtHeight + districtHeight));
# south
let sRect = 
   rectangle2(
      (minD(cityRect,1) + districtWidth),
      (minD(cityRect,1) + districtWidth + districtWidth),
      (minD(cityRect,2)),
      (minD(cityRect,2) + districtHeight));

# Limiting the region of interest if desired
let partRect =
   ifthenelse(PART = 'NW',
      nwRect,
      ifthenelse(PART = 'W',
         wRect,
         ifthenelse(PART = 'SW',
            swRect,
            ifthenelse(PART = 'NE',
               neRect,
               ifthenelse(PART = 'E',
                  eRect,
                  ifthenelse(PART = 'SE',
                     seRect,
                     ifthenelse(PART = 'N',
                        nRect,
                        ifthenelse(PART = 'C',
                           cRect,
                           ifthenelse(PART = 'S',
                              sRect,cityRect)))))))));
