Database : symtraj
Restore  : No

Operator : contains
Number   : 1
Signature: labels x string -> bool
Example  : query [const labels value ("hummels" "bittencourt")] contains "bittencourt"
Result   : TRUE

Operator : topattern
Number   : 1
Signature: text -> pattern
Example  : query michael matches ('(_ at_home) * (_ at_home)' topattern)
Result   : TRUE

Operator : matches
Number   : 1
Signature: mlabel x text -> bool
Example  : query michael matches '()'
Result   : FALSE

Operator : matches
Number   : 2
Signature: mstring x text -> bool
Example  : query [const mstring value ((("2013-01-01" "2013-01-02" TRUE FALSE) "at_home"))] matches '()'
Result   : TRUE

Operator : indexmatches
Number   : 1
Signature: rel(tuple(X)) x IDENT x invfile x text -> stream(tuple(X))
Example  : query Dotraj indexmatches[Trajectory, Dotrajindex, '(_ "Innenstadt-Ost") X * (_ "Innenstadt-Ost") // X.labels contains "Brackel"'] count
Result   : 0

Operator : filtermatches
Number   : 1
Signature: stream(tuple(X)) x IDENT x text -> stream(tuple(X))
Example  : query SymbolicTripsTiny feed filtermatches[SymTrip, '(_ "Alte Teichstraße") * (_ "Alte Teichstraße")'] count
Result   : 14

Operator : rewrite
Number   : 1
Signature: mlabel x text -> stream(mlabel)
Example  : query michael '* () Z * => Z' rewrite count
Result   : 62
 
Operator : classify
Number   : 1
Signature: stream(tuple(string, text)) x stream(mlabel) -> stream(tuple(string, mlabel))
Example  : query (patterns4 feed SymbolicTripsTiny feed projecttransformstream[SymTrip] classify) count
Result   : 63

Operator : indexclassify
Number   : 1
Signature: stream(tuple(string, text)) x rel(tuple(..., mlabel, ...)) x attrname x invfile -> stream(tuple(string, mlabel))
Example  : query (patterns1 feed indexclassify [Dotraj, Trajectory, Dotrajindex]) count
Result   : 0

Operator : rewrite
Number   : 2
Signature: stream(text) x stream(mlabel) -> stream(mlabel)
Example  : query (rewrite1 feed projecttransformstream[Pattern] SymbolicTripsTiny feed projecttransformstream[SymTrip] rewrite) count
Result   : 18

Operator : compress
Number   : 1
Signature: mlabel -> mlabel
Example  : query compress([const mlabel value ((("2013-01-01" "2013-01-02" TRUE FALSE) "at_home") (("2013-01-02" "2013-01-03" TRUE FALSE) "at_home"))])
Result   : (mlabel ((("2013-01-01" "2013-01-03" TRUE FALSE) "at_home")))

Operator : compress
Number   : 2
Signature: mstring -> mstring
Example  : query compress([const mstring value ((("2013-01-01" "2013-01-02" TRUE FALSE) "at_home") (("2013-01-02" "2013-01-03" TRUE FALSE) "at_home"))])
Result   : (mstring ((("2013-01-01" "2013-01-03" TRUE FALSE) "at_home")))

Operator : compress
Number   : 3
Signature: stream(mlabel) -> stream(mlabel)
Example  : query compress(SymbolicTripsTiny feed head[1] projecttransformstream[SymTrip]) = (SymbolicTripsTiny feed head[1] projecttransformstream[SymTrip])
Result   : FALSE

Operator : fillgaps
Number   : 1
Signature: mstring -> mstring
Example  : query fillgaps([const mstring value ((("2012-10-01" "2012-10-02-05:00:00" TRUE FALSE) "at_home") (("2012-10-02-05:00:58" "2012-10-02-07:00:00" TRUE FALSE) "at_home"))], 60000)
Result   : (mstring ((("2012-10-01" "2012-10-02-07:00" TRUE FALSE) "at_home")))

Operator : fillgaps
Number   : 2
Signature: stream(mstring) -> stream(mstring)
Example  : query fillgaps(SymbolicTripsTiny feed head[1] projecttransformstream[SymTrip], 10000) = (SymbolicTripsTiny feed head[1] projecttransformstream[SymTrip])
Result   : FALSE

Operator : createml
Number   : 1
Signature: int x real -> mlabel
Example  : query createml(2, 0.5) matches '() ()'
Result   : TRUE

Operator : createmlrelation
Number   : 1
Signature: int x int x string -> bool
Example  : query createmlrelation(10, 50, "Dotraj")
Result   : FALSE

Operator : createindex
Number   : 1
Signature: mlabel -> mlabel
Example  : query createindex(michael) matches '* (_ at_home)'
Result   : TRUE

Operator : createtrie
Number   : 1
Signature: rel(tuple(..., mlabel, ...)) x attrname -> invfile
Example  : query Dotraj createtrie[Trajectory]
Result   : unpredictable
Remark   : A InvFile has no out function