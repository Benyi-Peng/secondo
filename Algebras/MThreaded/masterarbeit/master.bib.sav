% Encoding: UTF-8

@InProceedings{DBLP:conf/cidr/Narula15,
  author    = {Neha Narula},
  title     = {A Multicore Database is not a Distributed System},
  booktitle = {CIDR 2015, Seventh Biennial Conference on Innovative Data Systems Research, Asilomar, CA, USA, January 4-7, 2015, Online Proceedings},
  year      = {2015},
  url       = {http://cidrdb.org/cidr2015/Papers/24\_Abstract77NN.pdf},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/conf/cidr/Narula15},
  crossref  = {DBLP:conf/cidr/2015},
  file      = {:A Multicore Database Is Not a Distributed System.pdf:PDF},
  timestamp = {Thu, 29 Jun 2017 19:21:38 +0200},
}

@InProceedings{DBLP:conf/cidr/HalsteadANT15,
  author    = {Robert J. Halstead and Ildar Absalyamov and Walid A. Najjar and Vassilis J. Tsotras},
  title     = {FPGA-based Multithreading for In-Memory Hash Joins},
  booktitle = {CIDR 2015, Seventh Biennial Conference on Innovative Data Systems Research, Asilomar, CA, USA, January 4-7, 2015, Online Proceedings},
  year      = {2015},
  url       = {http://cidrdb.org/cidr2015/Papers/CIDR15\_Paper12.pdf},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/conf/cidr/HalsteadANT15},
  crossref  = {DBLP:conf/cidr/2015},
  file      = {:FPGA-based Multithreading for In-Memory Hash Joins.pdf:PDF},
  timestamp = {Thu, 29 Jun 2017 19:21:38 +0200},
}

@InProceedings{DBLP:conf/vldb/Dominico18,
  author    = {Simone Dominico},
  title     = {Multi-Core Allocation Model for Database Systems},
  booktitle = {Proceedings of the VLDB 2018 PhD Workshop co-located with the 44th International Conference on Very Large Databases (VLDB 2018), Rio de Janeiro, Brasil, Aug 27-31, 2018},
  year      = {2018},
  url       = {http://ceur-ws.org/Vol-2175/paper08.pdf},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/conf/vldb/Dominico18},
  crossref  = {DBLP:conf/vldb/2018phd},
  file      = {:Multi-Core Allocation Model for Database Systems.pdf:PDF},
  timestamp = {Tue, 28 May 2019 16:23:39 +0200},
}

@InProceedings{10.1007/978-3-319-66917-5_15,
  author    = {García-García, Francisco and Corral, Antonio and Iribarne, Luis and Mavrommatis, George and Vassilakopoulos, Michael},
  title     = {A Comparison of Distributed Spatial Data Management Systems for Processing Distance Join Queries},
  booktitle = {Advances in Databases and Information Systems},
  year      = {2017},
  editor    = {Kirikova, Mārı̄te and Nørvåg, Kjetil and Papadopoulos, George A.},
  publisher = {Springer International Publishing},
  isbn      = {978-3-319-66917-5},
  pages     = {214--228},
  abstract  = {Due to the ubiquitous use of spatial data applications and the large amounts of spatial data that these applications generate, the processing of large-scale distance joins in distributed systems is becoming increasingly popular. Two of the most studied distance join queries are the K Closest Pair Query (KCPQ) and the varepsilon Distance Join Query (varepsilon DJQ). The KCPQ finds the K closest pairs of points from two datasets and the varepsilon DJQ finds all the possible pairs of points from two datasets, that are within a distance threshold varepsilon of each other. Distributed cluster-based computing systems can be classified in Hadoop-based and Spark-based systems. Based on this classification, in this paper, we compare two of the most current and leading distributed spatial data management systems, namely SpatialHadoop and LocationSpark, by evaluating the performance of existing and newly proposed parallel and distributed distance join query algorithms in different situations with big real-world datasets. As a general conclusion, while SpatialHadoop is more mature and robust system, LocationSpark is the winner with respect to the total execution time.},
  address   = {Cham},
  file      = {:A Comparison of Distributed Spatial Data Management Systems for Processing Distance Join Queries.pdf:PDF},
}

@InProceedings{994786,
  author    = {Gang Luo and J. F. Naughton and C. J. Ellmann},
  title     = {A non-blocking parallel spatial join algorithm},
  booktitle = {Proceedings 18th International Conference on Data Engineering},
  year      = {2002},
  month     = feb,
  pages     = {697--705},
  doi       = {10.1109/ICDE.2002.994786},
  abstract  = {Interest in incremental and adaptive query processing has led to the investigation of equijoin evaluation algorithms that are non-blocking. This investigation has yielded a number of algorithms, including the symmetric hash join, the XJoin, the Ripple Join, and their variants. However, to our knowledge no one has proposed a nonblocking spatial join algorithm. In this paper, we propose a parallel non-blocking spatial join algorithm that uses duplicate avoidance rather than duplicate elimination. Results from a prototype implementation in a commercial parallel object-relational DBMS show that it generates answer tuples steadily even in the presence of memory overflow, and that its rate of producing answer tuples scales with the number of processors. Also, when allowed to run to completion, its performance is comparable with the state-of-the-art blocking parallel spatial join algorithm.},
  file      = {:A Non-blocking Parallel Spatial Join Algorithm.pdf:PDF},
  issn      = {1063-6382},
  keywords  = {parallel algorithms;query processing;parallel databases;object-oriented databases;relational databases;nonblocking parallel spatial join algorithm;incremental query processing;adaptive query processing;equijoin evaluation algorithms;duplicate avoidance;parallel object-relational DBMS;answer tuples;memory overflow;Query processing;Data visualization;Concurrent computing;Prototypes;Data engineering},
}

@Article{KARYPIS199871,
  author   = {George Karypis and Vipin Kumar},
  title    = {A Parallel Algorithm for Multilevel Graph Partitioning and Sparse Matrix Ordering},
  journal  = {Journal of Parallel and Distributed Computing},
  year     = {1998},
  volume   = {48},
  number   = {1},
  pages    = {71--95},
  issn     = {0743-7315},
  doi      = {https://doi.org/10.1006/jpdc.1997.1403},
  url      = {http://www.sciencedirect.com/science/article/pii/S0743731597914039},
  abstract = {In this paper we present a parallel formulation of the multilevel graph partitioning and sparse matrix ordering algorithm. A key feature of our parallel formulation (that distinguishes it from other proposed parallel formulations of multilevel algorithms) is that it partitions the vertices of the graph intopparts while distributing the overall adjacency matrix of the graph among allpprocessors. This mapping results in substantially smaller communication than one-dimensional distribution for graphs with relatively high degree, especially if the graph is randomly distributed among the processors. We also present a parallel algorithm for computing a minimal cover of a bipartite graph which is a key operation for obtaining a small vertex separator that is useful for computing the fill reducing ordering of sparse matrices. Our parallel algorithm achieves a speedup of up to 56 on 128 processors for moderate size problems, further reducing the already moderate serial run time of multilevel schemes. Furthermore, the quality of the produced partitions and orderings are comparable to those produced by the serial multilevel algorithm that has been shown to outperform both spectral partitioning and multiple minimum degree.},
  file     = {:A Parallel Algorithm for Multilevel Graph Partitioning and Sparse Matrix Ordering.pdf:PDF},
  keywords = {parallel graph partitioning, multilevel partitioning methods, fill reducing ordering, numerical linear algebra.},
}

@Conference{sathe14sigspatial,
  author    = {Mihir Sathe and Knoblock, Craig A. and Yao-Yi Chiang and Aaron Harris},
  title     = {A Parallel Query Engine for Interactive Spatiotemporal Analysis},
  booktitle = {Proceedings of the 22nd ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems},
  year      = {2014},
  file      = {:A Parallel Query Engine for Interactive Spatiotemporal Analysis.pdf:PDF},
  urlpaper  = {http://usc-isi-i2.github.io/papers/sathe14-sigspatial.pdf},
}

@InProceedings{10.1007/3-540-36109-X_17,
  author    = {Kang, Myoung-Soo and Ko, Seung-Kyu and Koh, Kyun and Choy, Yoon-Chul},
  title     = {A Parallel Spatial Join Processing for Distributed Spatial Databases},
  booktitle = {Flexible Query Answering Systems},
  year      = {2002},
  editor    = {Carbonell, Jaime G. and Siekmann, Jörg and Andreasen, Troels and Christiansen, Henning and Motro, Amihai and Legind Larsen, Henrik},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-36109-1},
  pages     = {212--225},
  abstract  = {In recent years, there have been needs of accessing spatial data from distributed and preexisting spatial database systems interconnected through a network. In a distributed environment, spatial joins for two spatial relations residing at geographically separated sites are expensive in terms of computation and transmission cost because of the large size and complexity of spatial data. Previous distributed algorithm based on the spatial semijoin has accomplished performance improvements by eliminating objects before transmission to reduce both transmission and local processing costs. But with a widespread of a high bandwidth data transmission, the parallelism through data redistribution may improve the performance of spatial joins in spite of additional transmission costs. Hence, we propose a parallel spatial join processing for distributed spatial databases. We apply the task distribution method minimizing the data transmission and the solution for task distribution using a graph partitioning method. In experiments, we showed that the proposed method provides useful reductions in the cost of evaluating a join.},
  address   = {Berlin, Heidelberg},
  file      = {:A Parallel Spatial Join Processing for Distributed Spatial Databases.pdf:PDF},
}

@Article{Li:2013:PMS:2487259.2487261,
  author     = {Li, Guoliang and Deng, Dong and Feng, Jianhua},
  title      = {A Partition-based Method for String Similarity Joins with Edit-distance Constraints},
  journal    = {ACM Trans. Database Syst.},
  year       = {2013},
  volume     = {38},
  number     = {2},
  month      = jul,
  pages      = {9:1--9:33},
  issn       = {0362-5915},
  doi        = {10.1145/2487259.2487261},
  url        = {http://doi.acm.org/10.1145/2487259.2487261},
  acmid      = {2487261},
  address    = {New York, NY, USA},
  articleno  = {9},
  file       = {:A Partition-Based Method for String Similarity Joins with Edit-Distance Constraints.pdf:PDF},
  issue_date = {June 2013},
  keywords   = {String similarity join, edit distance, segment filter},
  numpages   = {33},
  publisher  = {ACM},
}

@InProceedings{6063018,
  author    = {M. Hofmann and G. Runger},
  title     = {A Partitioning Algorithm for Parallel Sorting on Distributed Memory Systems},
  booktitle = {2011 IEEE International Conference on High Performance Computing and Communications},
  year      = {2011},
  month     = sep,
  pages     = {402--411},
  doi       = {10.1109/HPCC.2011.59},
  abstract  = {Parallel sorting methods for distributed memory systems often use partitioning algorithms to prepare the redistribution of data items. This article proposes a partitioning algorithm that calculates a redistribution specified by the number of data items to be finally located on each process. This partitioning algorithm can also be used for data items with weights, which might express a computational load to be expected, and to produce a redistribution with an individual accumulated weight of data items specified for each process. Another important feature is that data sets with duplicated data keys can be handled. Parallel sorting with those properties is often needed for parallel scientific application codes, such as particle simulations, in which the dynamics of the simulated system may destroy locality and load balance required for an efficient computation. It is applied to random sample data and to a particle simulation code requiring a sorting. Performance results have been obtained on an IBM Blue Gene/P platform with up to 32768 cores. The results show that the proposed parallel sorting method performs well in comparison to other existing algorithms.},
  file      = {:A Partitioning Algorithm for Parallel Sorting on Distributed Memory Systems.pdf:PDF},
  issn      = {null},
  keywords  = {data analysis;distributed memory systems;parallel algorithms;resource allocation;set theory;sorting;partitioning algorithm;parallel sorting method;IBM Blue Gene-P platform;particle simulation code;random sample data;load balance;parallel scientific application code;duplicated data key;data sets;individual accumulated weight;computational load;data item redistribution;distributed memory system;Sorting;Partitioning algorithms;Upper bound;Distributed databases;Load modeling;Process control;Load management;parallel sorting;data redistribution;particle simulations;load balancing;performance optimization},
}

@InProceedings{Jung:2013:SLM:2463676.2465271,
  author    = {Jung, Hyungsoo and Han, Hyuck and Fekete, Alan D. and Heiser, Gernot and Yeom, Heon Y.},
  title     = {A Scalable Lock Manager for Multicores},
  booktitle = {Proceedings of the 2013 ACM SIGMOD International Conference on Management of Data},
  year      = {2013},
  series    = {SIGMOD '13},
  publisher = {ACM},
  location  = {New York, New York, USA},
  isbn      = {978-1-4503-2037-5},
  pages     = {73--84},
  doi       = {10.1145/2463676.2465271},
  url       = {http://doi.acm.org/10.1145/2463676.2465271},
  acmid     = {2465271},
  address   = {New York, NY, USA},
  file      = {:A Scalable Lock Manager for Multicores.pdf:PDF},
  keywords  = {concurrent programming, multicores, scalable lock manager},
  numpages  = {12},
}

@Article{Singh:2017:STM:3137586.3137590,
  author     = {Singh, Hari and Bawa, Seema},
  title      = {A Survey of Traditional and MapReduceBased Spatial Query Processing Approaches},
  journal    = {SIGMOD Rec.},
  year       = {2017},
  volume     = {46},
  number     = {2},
  month      = sep,
  pages      = {18--29},
  issn       = {0163-5808},
  doi        = {10.1145/3137586.3137590},
  url        = {http://doi.acm.org/10.1145/3137586.3137590},
  acmid      = {3137590},
  address    = {New York, NY, USA},
  file       = {:A Survey of Traditional and MapReduce-Based Spatial Query Processing Approaches.pdf:PDF},
  issue_date = {June 2017},
  keywords   = {Index, MapReduce, R-Tree, Spatial},
  numpages   = {12},
  publisher  = {ACM},
}

@Article{Surakhi2018,
  author  = {Surakhi, Ola and Khanafseh, Mohammad and Sarhan, Sami},
  title   = {A Survey on Parallel Multicore Computing : Performance \& Improvement},
  journal = {Advances in Science, Technology and Engineering Systems Journal},
  year    = {2018},
  volume  = {3},
  number  = {3},
  pages   = {152--160},
  doi     = {10.25046/aj030321},
  file    = {:A Survey on Parallel Multicore Computing Performance & Improvement.pdf:PDF},
}

@InProceedings{Chatzopoulos:2017:AMT:3064176.3064194,
  author    = {Chatzopoulos, Georgios and Guerraoui, Rachid and Harris, Tim and Trigonakis, Vasileios},
  title     = {Abstracting Multi-Core Topologies with MCTOP},
  booktitle = {Proceedings of the Twelfth European Conference on Computer Systems},
  year      = {2017},
  series    = {EuroSys '17},
  publisher = {ACM},
  location  = {Belgrade, Serbia},
  isbn      = {978-1-4503-4938-3},
  pages     = {544--559},
  doi       = {10.1145/3064176.3064194},
  url       = {http://doi.acm.org/10.1145/3064176.3064194},
  acmid     = {3064194},
  address   = {New York, NY, USA},
  file      = {:Abstracting Multi-Core Topologies with MCTOP.pdf:PDF},
  numpages  = {16},
}

@Article{Shin:2003:AIP:951848.951914,
  author     = {Shin, Hyoseop and Moon, Bongki and Lee, Sukho},
  title      = {Adaptive and Incremental Processing for Distance Join Queries},
  journal    = {IEEE Trans. on Knowl. and Data Eng.},
  year       = {2003},
  volume     = {15},
  number     = {6},
  month      = nov,
  pages      = {1561--1578},
  issn       = {1041-4347},
  doi        = {10.1109/TKDE.2003.1245293},
  url        = {https://doi.org/10.1109/TKDE.2003.1245293},
  acmid      = {951914},
  address    = {Piscataway, NJ, USA},
  file       = {:Adaptive and Incremental Processing for Distance Join Queries.pdf:PDF},
  issue_date = {November 2003},
  keywords   = {Spatial databases, adaptive query processing, estimating cutoff distance., incremental distance join, k-distance join, multistage query processing, plane sweeping, sweeping index},
  numpages   = {18},
  publisher  = {IEEE Educational Activities Department},
}

@Article{Shahabi2004,
  author   = {Shahabi, Cyrus and Kolahdouzan, Mohammad R. and Safar, Maytham},
  title    = {Alternative strategies for Performing Spatial Joins on Web Sources},
  journal  = {Knowledge and Information Systems},
  year     = {2004},
  volume   = {6},
  number   = {3},
  month    = may,
  pages    = {290--314},
  issn     = {0219-3116},
  doi      = {10.1007/s10115-003-0104-y},
  url      = {https://doi.org/10.1007/s10115-003-0104-y},
  abstract = {With the current information explosion on the Web, numerous applications require access to a collection of different but related pieces of distributed geospatial data. In this paper, we focus on one set of such applications that requires efficient support of spatial operations (specifically, spatial join) on distributed non-database sources. The main challenge with this environment is that remote sources are usually read-only and/or do not support spatial queries. Moreover, several of these Web-based applications can tolerate either some level of inaccuracy or progressively filtered (or polished) results. Therefore, conventional distributed spatial join strategies are not applicable or efficient in this environment. To address these challenges, we first break down the process of distributed spatial join operation into three steps: (1) local to remote transfer, (2) remote spatial selection, and (3) local refinement. Then, for each step, we propose and study alternative techniques and by varying their combinations, we generate several query plans. Each plan strives to strike a compromise between efficiency and accuracy. Since the techniques proposed for the first step have significant impact on the overall performance of the query, we specially focus our attention on this step. We propose two heuristics for the first step to reduce either the number of selection queries or the area covered by each selection query. Within a realistic experimental set-up, we show that one heuristic is more appropriate with fast networks and a powerful local server, while the other one is superior in the opposite situation. Our experiments also show that both heuristics outperform approaches based on transmitting either the actual spatial objects or their bounding boxes. Note that the intention of this paper is not to propose a query optimizer to choose one plan over the others. Instead, it serves as a first step towards the design of such an optimizer by concentrating on the design and evaluation of several alternative plans within a realistic experimental set-up.},
  day      = {01},
  file     = {:Alternative Strategies for Performing Spatial Joins on Web Sources.pdf:PDF},
}

@InProceedings{Schuh:2016:ECT:2882903.2882917,
  author    = {Schuh, Stefan and Chen, Xiao and Dittrich, Jens},
  title     = {An Experimental Comparison of Thirteen Relational Equi-Joins in Main Memory},
  booktitle = {Proceedings of the 2016 International Conference on Management of Data},
  year      = {2016},
  series    = {SIGMOD '16},
  publisher = {ACM},
  location  = {San Francisco, California, USA},
  isbn      = {978-1-4503-3531-7},
  pages     = {1961--1976},
  doi       = {10.1145/2882903.2882917},
  url       = {http://doi.acm.org/10.1145/2882903.2882917},
  acmid     = {2882917},
  address   = {New York, NY, USA},
  file      = {:An Experimental Comparison of Thirteen Relational Equi-Joins in Main Memory.pdf:PDF},
  keywords  = {Main Memory},
  numpages  = {16},
}

@InProceedings{Patel:2000:CJS:355274.355282,
  author    = {Patel, Jignesh M. and DeWitt, David J.},
  title     = {Clone Join and Shadow Join: Two Parallel Spatial Join Algorithms},
  booktitle = {Proceedings of the 8th ACM International Symposium on Advances in Geographic Information Systems},
  year      = {2000},
  series    = {GIS '00},
  publisher = {ACM},
  location  = {Washington, D.C., USA},
  isbn      = {1-58113-319-7},
  pages     = {54--61},
  doi       = {10.1145/355274.355282},
  url       = {http://doi.acm.org/10.1145/355274.355282},
  acmid     = {355282},
  address   = {New York, NY, USA},
  file      = {:Clone Join and Shadow Join.pdf:PDF},
  keywords  = {GIS, spatial declustering, spatial join},
  numpages  = {8},
}

@Misc{Moir01concurrentdata,
  author = {Mark Moir and Nir Shavit},
  title  = {Concurrent Data Structures},
  year   = {2001},
  file   = {:Concurrent Data Structures.pdf:PDF},
}

@InProceedings{inproceedings,
  author = {Wang, Xiaotong and Fang, Junhua and Li, Yuming and Zhang, Rong and Zhou, Aoying},
  title  = {Cost-Effective Data Partition for Distributed Stream Processing System},
  year   = {2017},
  month  = mar,
  pages  = {623--635},
  doi    = {10.1007/978-3-319-55699-4_39},
  file   = {:Cost-Eﬀective Data Partition for Distributed Stream Processing System.pdf:PDF},
}

@Article{Zhou1998,
  author   = {Zhou, Xiaofang and Abel, David J. and Truffet, David},
  title    = {Data Partitioning for Parallel Spatial Join Processing},
  journal  = {GeoInformatica},
  year     = {1998},
  volume   = {2},
  number   = {2},
  month    = jun,
  pages    = {175--204},
  issn     = {1573-7624},
  doi      = {10.1023/A:1009755931056},
  url      = {https://doi.org/10.1023/A:1009755931056},
  abstract = {The cost of spatial join processing can be very high because of the large sizes of spatial objects and the computation-intensive spatial operations. While parallel processing seems a natural solution to this problem, it is not clear how spatial data can be partitioned for this purpose. Various spatial data partitioning methods are examined in this paper. A framework combining the data-partitioning techniques used by most parallel join algorithms in relational databases and the filter-and-refine strategy for spatial operation processing is proposed for parallel spatial join processing. Object duplication caused by multi-assignment in spatial data partitioning can result in extra CPU cost as well as extra communication cost. We find that the key to overcome this problem is to preserve spatial locality in task decomposition. In this paper we show that a near-optimal speedup can be achieved for parallel spatial join processing using our new algorithms.},
  day      = {01},
  file     = {:Data Partitioning for Parallel Spatial Join Processing.pdf:PDF},
}

@InProceedings{Salomie:2011:DEM:1966445.1966448,
  author    = {Salomie, Tudor-Ioan and Subasu, Ionut Emanuel and Giceva, Jana and Alonso, Gustavo},
  title     = {Database Engines on Multicores, Why Parallelize when You Can Distribute?},
  booktitle = {Proceedings of the Sixth Conference on Computer Systems},
  year      = {2011},
  series    = {EuroSys '11},
  publisher = {ACM},
  location  = {Salzburg, Austria},
  isbn      = {978-1-4503-0634-8},
  pages     = {17--30},
  doi       = {10.1145/1966445.1966448},
  url       = {http://doi.acm.org/10.1145/1966445.1966448},
  acmid     = {1966448},
  address   = {New York, NY, USA},
  file      = {:Database Engines on Multicores, Why Parallelize When You Can Distribute.pdf:PDF},
  keywords  = {multicores, replication, snapshot isolation},
  numpages  = {14},
}

@InProceedings{Garcia2006,
  author = {Garcia, Philip and Korth, Henry},
  title  = {Database hash-join algorithms on multithreaded computer architectures},
  year   = {2006},
  month  = jan,
  pages  = {241--252},
  doi    = {10.1145/1128022.1128055},
  file   = {:Database Hash-Join Algorithms on Multithreaded Computer Architectures.pdf:PDF},
}

@Thesis{,
  author      = {Liknes, Stian},
  title       = {Database Operations on Multi-Core Processors},
  type        = {Master thesis},
  institution = {Institutt for datateknikk og informasjonsvitenskap},
  year        = {2013},
  abstract    = {The focus of this thesis is on investigating efficient database algorithmsand methods for modern multi-core processors in main memory environments.We describe central features of modern processors in a historic perspectivebefore presenting a number of general design goals that should beconsidered when optimizing relational operators for multi-corearchitectures. Then, we introduce the skyline operator and relatedalgorithms, including two recent algorithms optimized for multi-coreprocessors. Furthermore, we develop a novel skyline algorithm using anangle-based partitioning scheme originally developed for parallel anddistributed database management systems. Finally, we perform a number ofexperiments in order to evaluate and compare current shared-memory skylinealgorithms.Our experiments reveals some interesting results. Despite of having anexpensive pre-processing step, the angle-based algorithm is able tooutperform current best-performers for multi-core skyline computation.In fact, we are able to outperform competing algorithms by a factor of5 or more for anti-correlated datasets with moderate to largecardinalities. Included algorithms exhibit similar performancecharacteristics for independent datasets, while the more basicalgorithms excel at processing correlated datasets. We observe similarperformance for two small real-life datasets. Whereas, the angle-basedalgorithm is more efficient for a work-intensive real-life datasetcontaining more than 2M 5-dimensional tuples.Based on our results we propose that database research targeted atshared-memory systems is focused not only on basic algorithms but alsomore sophisticated techniques proven effective for parallel anddistributed database management systems. Additionally, we emphasizethat modern processors have very fast inter-thread communicationmechanisms that can be exploited to achieve parallel speedup also forsynchronization-heavy algorithms.},
  file        = {:Database Operations on Multi-Core Processors.pdf:PDF},
}

@Article{Hillis:1986:DPA:7902.7903,
  author     = {Hillis, W. Daniel and Steele,Jr., Guy L.},
  title      = {Data Parallel Algorithms},
  journal    = {Commun. ACM},
  year       = {1986},
  volume     = {29},
  number     = {12},
  month      = dec,
  pages      = {1170--1183},
  issn       = {0001-0782},
  doi        = {10.1145/7902.7903},
  url        = {http://doi.acm.org/10.1145/7902.7903},
  acmid      = {7903},
  address    = {New York, NY, USA},
  file       = {:DataParallelAlgorithms.pdf:PDF},
  issue_date = {Dec. 1986},
  numpages   = {14},
  publisher  = {ACM},
}

@InProceedings{aaa0415090f148b8af60ca120d44f9a0,
  author    = {Shuai Mu and Sebastian Angel and Dennis Shasha},
  title     = {Deferred runtime pipelining for contentious multicore software transactions},
  booktitle = {Proceedings of the 14th EuroSys Conference 2019},
  year      = {2019},
  language  = {English (US)},
  series    = {Proceedings of the 14th EuroSys Conference 2019},
  publisher = {Association for Computing Machinery, Inc},
  month     = mar,
  doi       = {10.1145/3302424.3303966},
  abstract  = {DRP is a new concurrency control protocol for software transactional memory that achieves high throughput, even for skewed workloads that exhibit high contention. DRP builds on prior works that chop transactions into pieces to expose more concurrency opportunities, but unlike these works, DRP performs no static analyses and supports arbitrary workloads. DRP achieves a high degree of concurrency across most workloads and guarantees deadlock freedom, strict serializability, and opacity. We incorporate DRP into the software transactional objects library STO [18] and find that DRP improves STO’s throughput on several STAMP benchmarks by up to 3.6×. Additionally, an in-memory multicore database implemented with our modified variant of STO outperforms databases that use OCC or transaction chopping for concurrency control. Specifically, DRP achieves 6.6× higher throughput than OCC when contention is high. Compared to transaction chopping, DRP achieves 3.3× higher throughput when contention is medium or low. Furthermore, our implementation achieves comparable performance to OCC and transaction chopping at other contention levels.},
  day       = {25},
  file      = {:Deferred Runtime Pipelining for contentious multicore software transactions.pdf:PDF},
}

@Conference{,
  author = {Cole, Murray},
  title  = {Design and Analysis of Parallel Algorithms},
  year   = {2013},
  file   = {:Design and Analysis of Parallel Algorithms.pdf:PDF},
}

@InProceedings{Blanas2011,
  author = {Blanas, Spyros and Li, Yinan and Patel, Jignesh},
  title  = {Design and evaluation of main memory hash join algorithms for multi-core CPUs},
  year   = {2011},
  month  = jan,
  pages  = {37--48},
  doi    = {10.1145/1989323.1989328},
  file   = {:Design and Evaluation of Main Memory Hash Join Algorithms for Multi-core CPUs.pdf:PDF},
}

@Article{BURGER201915,
  author   = {Adrian Bürger and Clemens Zeile and Angelika Altmann-Dieses and Sebastian Sager and Moritz Diehl},
  title    = {Design, implementation and simulation of an MPC algorithm for switched nonlinear systems under combinatorial constraints},
  journal  = {Journal of Process Control},
  year     = {2019},
  volume   = {81},
  pages    = {15--30},
  issn     = {0959-1524},
  doi      = {https://doi.org/10.1016/j.jprocont.2019.05.016},
  url      = {http://www.sciencedirect.com/science/article/pii/S0959152419303592},
  abstract = {Within this work, we present a warm-started algorithm for Model Predictive Control (MPC) of switched nonlinear systems under combinatorial constraints based on Combinatorial Integral Approximation (CIA). To facilitate high-speed solutions, we introduce a preprocessing step for complexity reduction of CIA problems, and include this approach within a new toolbox for solution of CIA problems with special focus on MPC. The proposed algorithm is implemented and utilized within an MPC simulation study for a solar thermal climate system with nonlinear system behavior and uncertain operation conditions. The results are analyzed in terms of solution quality, constraint satisfaction and runtime of the solution steps, showing the applicability of the proposed algorithm and implementations.},
  file     = {:Design and Implementation of a Parallel Constraint Satisfaction Algorithm.pdf:PDF},
  keywords = {Model predictive control, Switched dynamic systems, Mixed-integer nonlinear programming, Optimal control, Approximation methods and heuristics},
}

@Book{Foster:1995:DBP:527029,
  author    = {Foster, Ian},
  title     = {Designing and Building Parallel Programs: Concepts and Tools for Parallel Software Engineering},
  year      = {1995},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  isbn      = {0201575949},
  address   = {Boston, MA, USA},
  file      = {:Designing and Building Parallel Programs.pdf:PDF},
}

@Article{,
  author    = {C. Barthels and Gustavo Alonso and Torsten Hoefler},
  title     = {Designing Databases for Future High-Performance Networks},
  journal   = {IEEE Technical Committee on Data Engineering},
  year      = {2017},
  volume    = {40},
  number    = {1},
  month     = mar,
  file      = {:Designing Databases for Future High-Performance Networks.pdf:PDF},
  publisher = {IEEE},
}

@Article{Barthels:2017:DJA:3055540.3055545,
  author     = {Barthels, Claude and Müller, Ingo and Schneider, Timo and Alonso, Gustavo and Hoefler, Torsten},
  title      = {Distributed Join Algorithms on Thousands of Cores},
  journal    = {Proc. VLDB Endow.},
  year       = {2017},
  volume     = {10},
  number     = {5},
  month      = jan,
  pages      = {517--528},
  issn       = {2150-8097},
  doi        = {10.14778/3055540.3055545},
  url        = {https://doi.org/10.14778/3055540.3055545},
  acmid      = {3055545},
  file       = {:Distributed Join Algorithms on Thousands of Cores.pdf:PDF},
  issue_date = {January 2017},
  numpages   = {12},
  publisher  = {VLDB Endowment},
}

@Article{Negri:1991:DJN:115302.115299,
  author     = {Negri, M. and Pelagatti, G.},
  title      = {Distributive Join: A New Algorithm for Joining Relations},
  journal    = {ACM Trans. Database Syst.},
  year       = {1991},
  volume     = {16},
  number     = {4},
  month      = dec,
  pages      = {655--669},
  issn       = {0362-5915},
  doi        = {10.1145/115302.115299},
  url        = {http://doi.acm.org/10.1145/115302.115299},
  acmid      = {115299},
  address    = {New York, NY, USA},
  file       = {:Distributive Join A New Algorithm for Joining Relations.pdf:PDF},
  issue_date = {Dec. 1991},
  keywords   = {buffer, hashing, join, merging scan, nested scan, sort},
  numpages   = {15},
  publisher  = {ACM},
}

@Article{Puri2013EfficientPA,
  author  = {Satish Puri and Sushil K. Prasad},
  title   = {Efficient Parallel and Distributed Algorithms for GIS Polygonal Overlay Processing},
  journal = {2013 IEEE International Symposium on Parallel \& Distributed Processing, Workshops and Phd Forum},
  year    = {2013},
  pages   = {2238--2241},
  file    = {:EFFICIENT PARALLEL AND DISTRIBUTED ALGORITHMS FOR GIS POLYGON OVERLAY PROCESSING.pdf:PDF},
}

@InBook{Laurent2012,
  author    = {Laurent, Anne and Négrevergne, Benjamin and Sicard, Nicolas and Termier, Alexandre},
  title     = {Efficient Parallel Mining of Gradual Patterns on Multicore Processors},
  booktitle = {Advances in Knowledge Discovery and Management: Volume 2},
  year      = {2012},
  editor    = {Guillet, Fabrice and Ritschard, Gilbert and Zighed, Djamel Abdelkader},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-642-25838-1},
  pages     = {137--151},
  doi       = {10.1007/978-3-642-25838-1_8},
  url       = {https://doi.org/10.1007/978-3-642-25838-1_8},
  abstract  = {Mining gradual patterns plays a crucial role in many real world applications where huge volumes of complex numerical data must be handled, e.g., biological databases, survey databases, data streams or sensor readings. Gradual patterns highlight complex order correlations of the form ``The more/less X, the more/less Y''. Only recently algorithms have appeared to mine efficiently gradual rules. However, due to the complexity of mining gradual rules, these algorithms cannot yet scale on huge real world datasets. In this paper, we thus propose to exploit parallelism in order to enhance the performances of the fastest existing one (GRITE) on multicore processors. Through a detailed experimental study, we show that our parallel algorithm scales very well with the number of cores available.},
  address   = {Berlin, Heidelberg},
  file      = {:Efﬁcient parallel mining of gradual patterns on multicore processors.pdf:PDF},
}

@InProceedings{10.1007/978-3-540-24571-1_16,
  author    = {Zimbrão, Geraldo and de Souza, Jano Moreira and de Almeida, Victor Teixeira},
  title     = {Efficient Processing of Spatiotemporal Joins},
  booktitle = {Database Systems for Advanced Applications},
  year      = {2004},
  editor    = {Lee, YoonJoon and Li, Jianzhong and Whang, Kyu-Young and Lee, Doheon},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-24571-1},
  pages     = {190--195},
  abstract  = {Among other operations, a spatiotemporal DBMS should efficiently answer the spatiotemporal join. This paper presents an evaluation of spatiotemporal join algorithms using these new structures, particularly a partially persistent R-Tree called Temporal R-Tree and the 2+3D R-Tree. Starting from spatial join algorithms, we present algorithms for processing spatiotemporal joins over time instants and intervals on both spatiotemporal data structures. Finally, we implement and test these new algorithms with a couple of generated spatiotemporal data sets. Our experiments show that our algorithms' performance is good even in extreme cases, showing its good scalability -- especially for the TR-Tree.},
  address   = {Berlin, Heidelberg},
  file      = {:Efficient Processing of Spatiotemporal Joins.pdf:PDF},
}

@Article{895802,
  author   = {Kian-Lee Tan and Beng Chin Ooi and D. J. Abel},
  title    = {Exploiting spatial indexes for semijoin-based join processing in distributed spatial databases},
  journal  = {IEEE Transactions on Knowledge and Data Engineering},
  year     = {2000},
  volume   = {12},
  number   = {6},
  month    = nov,
  pages    = {920--937},
  issn     = {2326-3865},
  doi      = {10.1109/69.895802},
  abstract = {In a distributed spatial database system, a user may issue a query that relates two spatial relations not stored at the same site. Because of the sheer volume and complexity of spatial data, spatial joins between two spatial relations at different sites are expensive in terms of computational and transmission costs. In this paper, we address the problems of processing spatial joins in a distributed environment. We propose a semijoin-like operator, called the spatial semijoin, to prune away objects that do not contribute to the join result. This operator also reduces both the transmission and local processing costs for a later join operation. However, the cost of the elimination process must be taken into account, and we consider approaches to minimize these overheads. We also study and compare two families of distributed join algorithms that are based on the spatial semijoin operator. The first is based on multi-dimensional approximations obtained from an index such as the R-tree, and the second is based on single-dimensional approximations obtained from object mapping. We have conducted experiments on real data sets and report the results in this paper.},
  file     = {:Exploiting Spatial Indexes for Semijoin-Based Join Processing in Distributed Spatial Databases.pdf:PDF},
  keywords = {distributed databases;visual databases;database indexing;query processing;database theory;spatial indexes;semijoin-based join processing;distributed spatial databases;spatial relations;spatial joins;computational cost;transmission cost;distributed environment;spatial semijoin operator;object pruning;local processing cost;elimination process cost;overhead minimization;distributed join algorithms;multi-dimensional approximations;R-tree index;single-dimensional approximations;object mapping;locational keys;query processing;Spatial indexes;Distributed databases;Spatial databases;Costs;Database systems;Relational databases;Algorithm design and analysis;Computational efficiency;Multidimensional systems;Query processing},
}

@Article{Khayyat:2017:FSI:3051662.3056814,
  author     = {Khayyat, Zuhair and Lucia, William and Singh, Meghna and Ouzzani, Mourad and Papotti, Paolo and Quiané-Ruiz, Jorge-Arnulfo and Tang, Nan and Kalnis, Panos},
  title      = {Fast and Scalable Inequality Joins},
  journal    = {The VLDB Journal},
  year       = {2017},
  volume     = {26},
  number     = {1},
  month      = feb,
  pages      = {125--150},
  issn       = {1066-8888},
  doi        = {10.1007/s00778-016-0441-6},
  url        = {https://doi.org/10.1007/s00778-016-0441-6},
  acmid      = {3056814},
  address    = {Secaucus, NJ, USA},
  file       = {:Fast and Scalable Inequality Joins.pdf:PDF},
  issue_date = {February 2017},
  keywords   = {Incremental, Inequality join, PostgreSQL, Selectivity estimation, Spark SQL},
  numpages   = {26},
  publisher  = {Springer-Verlag New York, Inc.},
}

@InProceedings{Tsukerman1986FASTSORTAE,
  author = {Alex Tsukerman and Jim Gray and Michael Stewart and Susan Uren and Bonnie Vaughan},
  title  = {FASTSORT: AN EXTERNAL SORT USING PARALLEL PROCESSING},
  year   = {1986},
  file   = {:FastSort An External Sort Using Parallel Processing3.pdf:PDF},
}

@InProceedings{Chu:2015:TPE:2723372.2750545,
  author    = {Chu, Shumo and Balazinska, Magdalena and Suciu, Dan},
  title     = {From Theory to Practice: Efficient Join Query Evaluation in a Parallel Database System},
  booktitle = {Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data},
  year      = {2015},
  series    = {SIGMOD '15},
  publisher = {ACM},
  location  = {Melbourne, Victoria, Australia},
  isbn      = {978-1-4503-2758-9},
  pages     = {63--78},
  doi       = {10.1145/2723372.2750545},
  url       = {http://doi.acm.org/10.1145/2723372.2750545},
  acmid     = {2750545},
  address   = {New York, NY, USA},
  file      = {:From Theory to Practice Efﬁcient Join Query Evaluation in a Parallel Database System.pdf:PDF},
  keywords  = {join query evaluation, parallel database system},
  numpages  = {16},
}

@Article{Lo2001,
  author   = {Lo, Yu-Lung and Hua, Kien A. and Young, Honesty C.},
  title    = {GeMDA: A Multidimensional Data Partitioning Technique for Multiprocessor Database Systems},
  journal  = {Distributed and Parallel Databases},
  year     = {2001},
  volume   = {9},
  number   = {3},
  month    = may,
  pages    = {211--236},
  issn     = {1573-7578},
  doi      = {10.1023/A:1019265612794},
  url      = {https://doi.org/10.1023/A:1019265612794},
  abstract = {Several studies have repeatedly demonstrated that both the performance and scalability of a shared-nothing parallel database system depend on the physical layout of data across the processing nodes of the system. Today, data is allocated in these systems using horizontal partitioning strategies. This approach has a number of drawbacks. If a query involves the partitioning attribute, then typically only a small number of the processing nodes can be used to speedup the execution of this query. On the other hand, if the predicate of a selection query includes an attribute other than the partitioning attribute, then the entire data space must be searched. Again, this results in waste of computing resources. In recent years, several multidimensional data declustering techniques have been proposed to address these problems. However, these schemes are too restrictive (e.g., FX, ECC, etc.), or optimized for a certain type of queries (e.g., DM, HCAM, etc.). In this paper, we introduce a new technique which is flexible, and performs well for general queries. We prove its optimality properties, and present experimental results showing that our scheme outperforms DM and HCAM by a significant margin.},
  day      = {01},
  file     = {:GeMDA A Multidimensional Data Partitioning Technique for Multiprocessor Database Systems.pdf:PDF},
}

@InProceedings{10.1007/978-3-642-00887-0_26,
  author    = {Yadan, Deng and Ning, Jing and Wei, Xiong and Luo, Chen and Hongsheng, Chen},
  title     = {Hash Join Optimization Based on Shared Cache Chip Multi-processor},
  booktitle = {Database Systems for Advanced Applications},
  year      = {2009},
  editor    = {Zhou, Xiaofang and Yokota, Haruo and Deng, Ke and Liu, Qing},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-642-00887-0},
  pages     = {293--307},
  abstract  = {Chip Multi-Processor(CMP) allows multiple threads to execute simultaneously. Because threads share various resources of CMP, such as L2-Cache, CMP system is inherently different from multiprocessors system and, CMP is also different from simultaneous multithreading (SMT). It could support more than two threads to execute simultaneously, and some executing units are owned by each core. We present hash join optimization based on shared cache CMP. Firstly, we propose multithreaded hash join execution framework based on Radix-Join algorithm, then we analyze the factors which affect performance of multithreaded Radix-Join algorithm in CMP. Basing on this analysis, we optimize the performance of various threads and their shared-cache access performance in the framework, and then theoretic analysis of speedup in multithreaded cluster partition phase is presents which could give some advices to cluster partition thread optimization. All of our algorithms are implemented in EaseDB. In the experiments, we evaluate performance of the multithreaded hash join execution framework, and the results show that our algorithm could effectively resolve cache access conflict and load imbalance in multithreaded environment. Hash join performance is improved.},
  address   = {Berlin, Heidelberg},
  file      = {:Hash Join Optimization Based on Shared Cache Chip Multi-processor.pdf:PDF},
}

@Article{Wang:2015:HPS:2766196.2766199,
  author     = {Wang, Fusheng and Aji, Ablimit and Vo, Hoang},
  title      = {High Performance Spatial Queries for Spatial Big Data: From Medical Imaging to GIS},
  journal    = {SIGSPATIAL Special},
  year       = {2015},
  volume     = {6},
  number     = {3},
  month      = apr,
  pages      = {11--18},
  issn       = {1946-7729},
  doi        = {10.1145/2766196.2766199},
  url        = {http://doi.acm.org/10.1145/2766196.2766199},
  acmid      = {2766199},
  address    = {New York, NY, USA},
  file       = {:High Performance Spatial Queries and Analytics for Spatial Big Data.pdf:PDF},
  issue_date = {November 2014},
  numpages   = {8},
  publisher  = {ACM},
}

@PhdThesis{,
  author      = {Blanas, Spyridon},
  title       = {High-performance main memory database management systems},
  institution = {UNIVERSITY OF WISCONSIN–MADISON},
  year        = {2013},
  file        = {:High-performance main memory database management systems.pdf:PDF},
}

@InProceedings{Selke2010,
  author = {Selke, Joachim and Lofi, Christoph and Balke, Wolf-Tilo},
  title  = {Highly Scalable Multiprocessing Algorithms for Preference-Based Database Retrieval},
  year   = {2010},
  month  = apr,
  doi    = {10.1007/978-3-642-12098-5_19},
  file   = {:Highly Scalable Multiprocessing Algorithms for Preference-Based Database Retrieval.pdf:PDF},
}

@InProceedings{Ailamaki:2014:SUL:2588555.2588892,
  author    = {Ailamaki, Anastasia and Liarou, Erietta and Tözün, Pinar and Porobic, Danica and Psaroudakis, Iraklis},
  title     = {How to Stop Under-utilization and Love Multicores},
  booktitle = {Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data},
  year      = {2014},
  series    = {SIGMOD '14},
  publisher = {ACM},
  location  = {Snowbird, Utah, USA},
  isbn      = {978-1-4503-2376-5},
  pages     = {189--192},
  doi       = {10.1145/2588555.2588892},
  url       = {http://doi.acm.org/10.1145/2588555.2588892},
  acmid     = {2588892},
  address   = {New York, NY, USA},
  file      = {:How to stop underutilization and love multicores.pdf:PDF},
  keywords  = {micro-architectural utilization, multicores, numa, olap, oltp},
  numpages  = {4},
}

@Article{Graefe:2006:ISD:1132960.1132964,
  author     = {Graefe, Goetz},
  title      = {Implementing Sorting in Database Systems},
  journal    = {ACM Comput. Surv.},
  year       = {2006},
  volume     = {38},
  number     = {3},
  month      = sep,
  issn       = {0360-0300},
  doi        = {10.1145/1132960.1132964},
  url        = {http://doi.acm.org/10.1145/1132960.1132964},
  acmid      = {1132964},
  address    = {New York, NY, USA},
  articleno  = {10},
  file       = {:Implementing Sorting in Database Systems.pdf:PDF},
  issue_date = {2006},
  keywords   = {Key normalization, asynchronous read-ahead, compression, dynamic memory resource allocation, forecasting, graceful degradation, index operations, key conditioning, nested iteration},
  publisher  = {ACM},
}

@InProceedings{Zhou:2005:IDP:1083592.1083602,
  author    = {Zhou, Jingren and Cieslewicz, John and Ross, Kenneth A. and Shah, Mihir},
  title     = {Improving Database Performance on Simultaneous Multithreading Processors},
  booktitle = {Proceedings of the 31st International Conference on Very Large Data Bases},
  year      = {2005},
  series    = {VLDB '05},
  publisher = {VLDB Endowment},
  location  = {Trondheim, Norway},
  isbn      = {1-59593-154-6},
  pages     = {49--60},
  url       = {http://dl.acm.org/citation.cfm?id=1083592.1083602},
  acmid     = {1083602},
  file      = {:Improving Database Performance on Simultaneous Multithreading Processors.pdf:PDF},
  numpages  = {12},
}

@Article{article,
  author  = {Mamoulis, Nikos and Papadias, Dimitris},
  title   = {Integration of Spatial Join Algorithms for Processing Multiple Inputs},
  journal = {SIGMOD Record (ACM Special Interest Group on Management of Data)},
  year    = {2000},
  volume  = {28},
  month   = oct,
  doi     = {10.1145/304182.304183},
  file    = {:Integration of Spatial Join Algorithms for Processing Multiple Inputs.pdf:PDF},
}

@Book{Cormen:2001:IA:580470,
  author    = {Cormen, Thomas H. and Stein, Clifford and Rivest, Ronald L. and Leiserson, Charles E.},
  title     = {Introduction to Algorithms},
  year      = {2001},
  edition   = {2nd},
  publisher = {McGraw-Hill Higher Education},
  isbn      = {0070131511},
  file      = {:Introduction to Algorithms 2.pdf:PDF},
}

@Book{Cormen:2009:IAT:1614191,
  author    = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford},
  title     = {Introduction to Algorithms, Third Edition},
  year      = {2009},
  edition   = {3rd},
  publisher = {The MIT Press},
  isbn      = {0262033844, 9780262033848},
  file      = {:introduction to algorithms 3rd.pdf:PDF},
}

@Electronic{,
  title       = {Lecture12 – Introduction to Parallel Algorithms},
  file        = {:lecture-5-patterns.pdf:PDF;:lecture-6-collective.pdf:PDF;:lecture-8-stencil.pdf:PDF;:lecture-9-fork-join.pdf:PDF;:lecture-10-pipeline.pdf:PDF;:lecture-11-mpi.pdf:PDF;:lecture-12-algorithms.pdf:PDF;:lecture-13-tools.pdf:PDF;:lecture-14-tools.pdf:PDF;:lecture-15-mpc.pdf:PDF;:lecture-16-spp.pdf:PDF},
  institution = {University of Oregon},
}

@Article{Jacox:2003:ISJ:937598.937600,
  author     = {Jacox, Edwin H. and Samet, Hanan},
  title      = {Iterative Spatial Join},
  journal    = {ACM Trans. Database Syst.},
  year       = {2003},
  volume     = {28},
  number     = {3},
  month      = sep,
  pages      = {230--256},
  issn       = {0362-5915},
  doi        = {10.1145/937598.937600},
  url        = {http://doi.acm.org/10.1145/937598.937600},
  acmid      = {937600},
  address    = {New York, NY, USA},
  file       = {:Iterative Spatial Join.pdf:PDF},
  issue_date = {September 2003},
  keywords   = {Spatial join, external memory algorithms, plane-sweep, spatial databases},
  numpages   = {27},
  publisher  = {ACM},
}

@Article{Mishra:1992:JPR:128762.128764,
  author     = {Mishra, Priti and Eich, Margaret H.},
  title      = {Join Processing in Relational Databases},
  journal    = {ACM Comput. Surv.},
  year       = {1992},
  volume     = {24},
  number     = {1},
  month      = mar,
  pages      = {63--113},
  issn       = {0360-0300},
  doi        = {10.1145/128762.128764},
  url        = {http://doi.acm.org/10.1145/128762.128764},
  acmid      = {128764},
  address    = {New York, NY, USA},
  file       = {:Join Processing in Relational Databases.pdf:PDF},
  issue_date = {March 1992},
  keywords   = {database machines, distributed processing, join, parallel processing, relational algebra},
  numpages   = {51},
  publisher  = {ACM},
}

@InProceedings{10.1007/3-540-54132-2_47,
  author    = {Bal, Henri E.},
  title     = {Languages for parallel programming},
  booktitle = {Parallel Database Systems},
  year      = {1991},
  editor    = {America, Pierre},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-47432-6},
  pages     = {1--23},
  abstract  = {Many different paradigms for parallel programming exist, nearly each of which is employed in dozens of languages. Several researchers have tried to compare these languages and paradigms by examining the expressivity and flexibility of their constructs. Few attempts have been made, however, at practical studies based on actual programming experience with multiple languages. Such a study is the topic of this paper.},
  address   = {Berlin, Heidelberg},
  file      = {:Languages for Parallel Programming.pdf:PDF},
}

@InProceedings{7129541,
  author    = {S. You and J. Zhang and L. Gruenwald},
  title     = {Large-scale spatial join query processing in Cloud},
  booktitle = {2015 31st IEEE International Conference on Data Engineering Workshops},
  year      = {2015},
  month     = apr,
  pages     = {34--41},
  doi       = {10.1109/ICDEW.2015.7129541},
  abstract  = {The rapidly increasing amount of location data available in many applications has made it desirable to process their large-scale spatial queries in Cloud for performance and scalability. We report our designs and implementations of two prototype systems that are ready for Cloud deployments: SpatialSpark based on Apache Spark and ISP-MC based on Cloudera Impala. Both systems support indexed spatial joins based on point-in-polygon test and point-to-polyline distance computation. Experiments on the pickup locations of 170 million taxi trips in New York City and 10 million global species occurrences records have demonstrated both efficiency and scalability using Amazon EC2 clusters.},
  file      = {:Large-Scale Spatial Join Query Processing in Cloud.pdf:PDF},
  issn      = {null},
  keywords  = {cloud computing;geographic information systems;query processing;large-scale spatial join query processing;cloud computing;location data;large-scale spatial query;cloud deployment;SpatialSpark;Apache Spark;ISP-MC;Cloudera Impala;indexed spatial join;point-in-polygon test;point-to-polyline distance computation;taxi trip;Amazon EC2 cluster;Sparks;Spatial databases;Query processing;Hardware;Scalability;Data processing;Filtering;Spatial Join;Spark;Impala;Cloud Computing},
}

@Book{Greenlaw:1995:LPC:203244,
  author    = {Greenlaw, Raymond and Hoover, H. James and Ruzzo, Walter L.},
  title     = {Limits to Parallel Computation: P-completeness Theory},
  year      = {1995},
  publisher = {Oxford University Press, Inc.},
  isbn      = {0-19-508591-4},
  address   = {New York, NY, USA},
  file      = {:Limits to Parallel Computation.pdf:PDF},
}

@Article{Kumar2017,
  author  = {Kumar, Shashank and Madria, Sanjay and Linderman, Mark},
  title   = {M-Grid: a distributed framework for multidimensional indexing and querying of location based data},
  journal = {Distributed and Parallel Databases},
  year    = {2017},
  volume  = {35},
  month   = mar,
  doi     = {10.1007/s10619-017-7194-0},
  file    = {:M-Grid a distributed framework for multidimensional indexing and querying of location based data.pdf:PDF},
}

@Article{Balkesen2015MainMemoryHJ,
  author  = {Cagri Balkesen and Jens Teubner and Gustavo Alonso and M. Tamer Özsu},
  title   = {Main-Memory Hash Joins on Modern Processor Architectures},
  journal = {IEEE Transactions on Knowledge and Data Engineering},
  year    = {2015},
  volume  = {27},
  pages   = {1754--1766},
  file    = {:Main-Memory Hash Joins on Modern Processor Architectures.pdf:PDF},
}

@Misc{,
  author = {Albutiu, Martina Kemper, Alfons Neumann, Thomas},
  title  = {Massively Parallel Sort-Merge Joins (MPSM) in Main Memory Multi-Core Database Systems},
  file   = {:Massively Parallel Sort-Merge Joins (MPSM) in Main Memory Multi-Core Database Systems.pptx:PowerPoint 2007+},
}

@Article{Albutiu:2012:MPS:2336664.2336678,
  author     = {Albutiu, Martina-Cezara and Kemper, Alfons and Neumann, Thomas},
  title      = {Massively Parallel Sort-merge Joins in Main Memory Multi-core Database Systems},
  journal    = {Proc. VLDB Endow.},
  year       = {2012},
  volume     = {5},
  number     = {10},
  month      = jun,
  pages      = {1064--1075},
  issn       = {2150-8097},
  doi        = {10.14778/2336664.2336678},
  url        = {http://dx.doi.org/10.14778/2336664.2336678},
  acmid      = {2336678},
  file       = {:Massively Parallel Sort-Merge Joins in Main Memory Multi-Core Database Systems.pdf:PDF},
  issue_date = {June 2012},
  numpages   = {12},
  publisher  = {VLDB Endowment},
}

@Book{book,
  author = {Bengel, Günther and Baun, Christian and Kunze, Marcel and Stucky, Karl-Uwe},
  title  = {Masterkurs Parallele und Verteilte Systeme: Grundlagen und Programmierung von Multicoreprozessoren, Multiprozessoren, Cluster und Grid},
  year   = {2008},
  isbn   = {978-3-8348-0394-8},
  doi    = {10.1007/978-3-8348-9516-5},
  file   = {:Masterkurs Parallele Und Verteilte Systeme  (2008).pdf:PDF},
  month  = jan,
}

@Article{Berzal:2013:SPP:2439976.2439995,
  author     = {Berzal, Fernando},
  title      = {Structured Parallel Programming by Michael McCool, James Reinders \& Arch Robison},
  journal    = {SIGSOFT Softw. Eng. Notes},
  year       = {2013},
  volume     = {38},
  number     = {2},
  month      = mar,
  pages      = {35--39},
  issn       = {0163-5948},
  doi        = {10.1145/2439976.2439995},
  url        = {http://doi.acm.org/10.1145/2439976.2439995},
  acmid      = {2439995},
  address    = {New York, NY, USA},
  file       = {:Merge Sort - Structured Parallel Programming,.pdf:PDF},
  issue_date = {March 2013},
  numpages   = {5},
  publisher  = {ACM},
}

@Article{REUTER19992177,
  author   = {Andreas Reuter},
  title    = {Methods for parallel execution of complex database queries},
  journal  = {Parallel Computing},
  year     = {1999},
  volume   = {25},
  number   = {13},
  pages    = {2177--2188},
  issn     = {0167-8191},
  doi      = {https://doi.org/10.1016/S0167-8191(99)00066-6},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167819199000666},
  abstract = {During the last decade, all commercial database systems have included features for parallel processing into their products. This development has been driven by the fact that databases grow in size at considerable rates. According to the results of the 1998 `very large database contest' the world’s largest databases, which have reached a size of over 10TB, double in size every year. At that speed, they outgrow the increase in processor speed and memory size, so additional measures are required to accommodate the effects of rapidly growing volumes of data. Parallelism is one of those options. It helps to keep processing times constant, even if the size of the database increases. That effect, which is often referred to as `scaleup' is important for loading, index creation, all kinds of administrative operations on the database, and of course for long batch-type applications. Parallelism is also employed to speed-up queries that otherwise would take days or weeks to process and thus would be useless for the application. This type of requirement: fast results of complex queries on large data sets is characteristic of decision support applications. In this overview we will explain how parallelism in databases can help to solve such problems.},
  file     = {:Methods for parallel execution of complex database queries.pdf:PDF},
}

@Misc{,
  author = {Barbic, Jernej},
  title  = {Multi-core architectures},
  year   = {2006},
  file   = {:Multi-core architectures.pdf:PDF},
}

@Article{Balkesen:2013:MMJ:2732219.2732227,
  author     = {Balkesen, Cagri and Alonso, Gustavo and Teubner, Jens and Özsu, M. Tamer},
  title      = {Multi-core, Main-memory Joins: Sort vs. Hash Revisited},
  journal    = {Proc. VLDB Endow.},
  year       = {2013},
  volume     = {7},
  number     = {1},
  month      = sep,
  pages      = {85--96},
  issn       = {2150-8097},
  doi        = {10.14778/2732219.2732227},
  url        = {http://dx.doi.org/10.14778/2732219.2732227},
  acmid      = {2732227},
  file       = {:Multi-Core, Main-Memory Joins Sort vs. Hash Revisited.pdf:PDF},
  issue_date = {September 2013},
  numpages   = {12},
  publisher  = {VLDB Endowment},
}

@Unknown{unknown,
  author = {Rattanatranurak, Apisit and Kittitornkun, Surin},
  title  = {Multi-Stack Parallel Partition Algorithm for Sorting Applications},
  year   = {2019},
  month  = jan,
  doi    = {10.13140/RG.2.2.28911.69280},
  file   = {:Multi-Stack Parallel Partition Algorithm for Sorting Applications.pdf:PDF},
}

@Misc{,
  author = {Silvasti, Panu},
  title  = {Multicore support in databases},
  file   = {:Multicore support in databaes.pdf:PDF},
}

@Article{Mamoulis:2001:MSJ:503099.503101,
  author     = {Mamoulis, Nikos and Papadias, Dimitris},
  title      = {Multiway Spatial Joins},
  journal    = {ACM Trans. Database Syst.},
  year       = {2001},
  volume     = {26},
  number     = {4},
  month      = dec,
  pages      = {424--475},
  issn       = {0362-5915},
  doi        = {10.1145/503099.503101},
  url        = {http://doi.acm.org/10.1145/503099.503101},
  acmid      = {503101},
  address    = {New York, NY, USA},
  file       = {:Multiway Spatial Joins.pdf:PDF},
  issue_date = {December 2001},
  keywords   = {Multiway joins, query processing, spatial joins},
  numpages   = {52},
  publisher  = {ACM},
}

@Article{Segev:1986:OJO:5236.5241,
  author     = {Segev, Arie},
  title      = {Optimization of Join Operations in Horizontally Partitioned Database Systems},
  journal    = {ACM Trans. Database Syst.},
  year       = {1986},
  volume     = {11},
  number     = {1},
  month      = mar,
  pages      = {48--80},
  issn       = {0362-5915},
  doi        = {10.1145/5236.5241},
  url        = {http://doi.acm.org/10.1145/5236.5241},
  acmid      = {5241},
  address    = {New York, NY, USA},
  file       = {:Optimization of Join Operations in Horizontally Partitioned Database Systems.pdf:PDF},
  issue_date = {March 1986},
  numpages   = {33},
  publisher  = {ACM},
}

@InProceedings{Ke:2011:ODP:1991596.1991614,
  author    = {Ke, Qifa and Prabhakaran, Vijayan and Xie, Yinglian and Yu, Yuan and Wu, Jingyue and Yang, Junfeng},
  title     = {Optimizing Data Partitioning for Data-parallel Computing},
  booktitle = {Proceedings of the 13th USENIX Conference on Hot Topics in Operating Systems},
  year      = {2011},
  series    = {HotOS'13},
  publisher = {USENIX Association},
  location  = {Napa, California},
  pages     = {13--13},
  url       = {http://dl.acm.org/citation.cfm?id=1991596.1991614},
  acmid     = {1991614},
  address   = {Berkeley, CA, USA},
  file      = {:Optimizing Data Partitioning for Data-Parallel Computing.pdf:PDF},
  numpages  = {1},
}

@Article{Sokolinsky2001,
  author   = {Sokolinsky, L. B.},
  title    = {Organization of Parallel Query Processing in Multiprocessor Database Machines with Hierarchical Architecture},
  journal  = {Programming and Computer Software},
  year     = {2001},
  volume   = {27},
  number   = {6},
  month    = nov,
  pages    = {297--308},
  issn     = {1608-3261},
  doi      = {10.1023/A:1012706401123},
  url      = {https://doi.org/10.1023/A:1012706401123},
  abstract = {The development of database systems with hierarchical hardware architecture is currently a perspective trend in the field of parallel database machines. Hierarchical architectures have been suggested with the aim to combine advantages of shared-nothing architectures and architectures with shared memory and disks. A commonly accepted way of construction of hierarchical systems is to combine shared-memory (shared-everything) clusters in a unique system without shared resources. However, such architectures cannot ensure data accessibility under hardware failures on the processor cluster level, which limits their use in systems with high fault-tolerance requirements. In this paper, an alternative approach to construction of hierarchical systems is suggested. In accordance with this approach, the systems is constructed as an assembly of processor clusters with shared disks, with each cluster being a two-level multiprocessor structure with a standard strongly connected topology of interprocessor connections. A stream model for organization of parallel query processing in systems with the hierarchical architecture suggested is described. This model has been implemented in a prototype parallel database management system Omega designed for Russian multiprocessor computational systems MBC-100/1000. Our experiments show that the total performance of the processor clusters in the Omega system is comparable with that of the processor clusters with shared resources even in the case of great data skew. At the same time, the clusters of the Omega system are capable of ensuring a higher degree of data availability compared to the clusters with shared-memory architectures.},
  day      = {01},
  file     = {:Organization of Parallel Query Processing in Multiprocessor Database Machines with Hierarchical Architecture.pdf:PDF},
}

@Misc{,
  title = {Parallel Algorithm Analysis and Design Parallel Algorithm Analysis and Design},
  year  = {2018},
  file  = {:Parallel Algorithm Analysis and Design.pdf:PDF},
}

@Misc{,
  author = {Wang, Wei},
  title  = {Parallel Algorithm Design: Decomposition and Concurrency},
  year   = {2019},
  file   = {:Parallel Algorithm Design Decomposition and Concurrency.pdf:PDF},
}

@Misc{,
  title = {Parallel algorithm design},
  file  = {:Parallel algorithm design.pdf:PDF},
}

@InBook{,
  author = {Ghaffari, Mohsen},
  title  = {Parallel Alogrithms},
  year   = {2019},
  file   = {:Parallel Algorithms Chapter 6.pdf:PDF},
}

@InCollection{Blelloch:2010:PA:1882723.1882748,
  author    = {Blelloch, Guy E. and Maggs, Bruce M.},
  title     = {Algorithms and Theory of Computation Handbook},
  year      = {2010},
  editor    = {Atallah, Mikhail J. and Blanton, Marina},
  publisher = {Chapman \& Hall/CRC},
  isbn      = {978-1-58488-820-8},
  chapter   = {Parallel Algorithms},
  pages     = {25--25},
  url       = {http://dl.acm.org/citation.cfm?id=1882723.1882748},
  acmid     = {1882748},
  file      = {:Parallel Algorithms.pdf:PDF},
  numpages  = {1},
}

@Misc{,
  author = {Zhang, Jun},
  title  = {Parallel Computing, Chapter 7 Performance and Scalability},
  file   = {:Parallel Computing Chapter 7 Performance and Scalability.pdf:PDF},
}

@Article{Lee:2012:PDP:2094114.2094118,
  author     = {Lee, Kyong-Ha and Lee, Yoon-Joon and Choi, Hyunsik and Chung, Yon Dohn and Moon, Bongki},
  title      = {Parallel Data Processing with MapReduce: A Survey},
  journal    = {SIGMOD Rec.},
  year       = {2012},
  volume     = {40},
  number     = {4},
  month      = jan,
  pages      = {11--20},
  issn       = {0163-5808},
  doi        = {10.1145/2094114.2094118},
  url        = {http://doi.acm.org/10.1145/2094114.2094118},
  acmid      = {2094118},
  address    = {New York, NY, USA},
  file       = {:Parallel Data Processing with MapReduce A Survey.pdf:PDF},
  issue_date = {December 2011},
  numpages   = {10},
  publisher  = {ACM},
}

@InProceedings{10.1007/978-3-540-75444-2_25,
  author    = {Mach, Werner and Schikuta, Erich},
  title     = {Parallel Database Sort and Join Operations Revisited on Grids},
  booktitle = {High Performance Computing and Communications},
  year      = {2007},
  editor    = {Perrott, Ronald and Chapman, Barbara M. and Subhlok, Jaspal and de Mello, Rodrigo Fernandes and Yang, Laurence T.},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-75444-2},
  pages     = {216--227},
  abstract  = {Based on the renowned method of Bitton et al. (see [1]) we develop a concise but comprehensive analytical model for the well-known Binary Merge Sort, Bitonic Sort, Nested-Loop Join and Sort Merge Join algorithm in a Grid Environment.},
  address   = {Berlin, Heidelberg},
  file      = {:Parallel Database Sort and Join Operations Revisited on Grids.pdf:PDF},
}

@Article{Taniar2000SortingIP,
  author  = {David Taniar and J. Wenny Rahayu},
  title   = {Sorting in parallel database systems},
  journal = {Proceedings Fourth International Conference/Exhibition on High Performance Computing in the Asia-Pacific Region},
  year    = {2000},
  volume  = {2},
  pages   = {830-835 vol.2},
  file    = {:Parallel database sorting.pdf:PDF},
}

@Online{,
  author   = {Roch, Jean-Louis},
  title    = {Parallel efficient algorithms and their programming},
  year     = {1997},
  subtitle = {Fundation of A THAPASCAN -1},
  file     = {:Parallel efﬁcient algorithms and their programming.pdf:PDF},
}

@InProceedings{7544757,
  author    = {W. Song and D. Koch and M. Luján and J. Garside},
  title     = {Parallel Hardware Merge Sorter},
  booktitle = {2016 IEEE 24th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM)},
  year      = {2016},
  month     = may,
  pages     = {95--102},
  doi       = {10.1109/FCCM.2016.34},
  abstract  = {Sorting has tremendous usage in the applications that handle massive amount of data. Existing techniques accelerate sorting using multiprocessors or GPGPUs where a data set is partitioned into disjunctive subsets to allow multiple sorting threads working in parallel. Hardware sorters implemented in FPGAs have the potential of providing high-speed and low-energy solutions but the partition algorithms used in software systems are so data dependent that they cannot be easily adopted. The speed of most current sequential sorters still hangs around 1 number/cycle. Recently a new hardware merge sorter broke this speed limit by merging a large number of sorted sequences at a speed proportional to the number of sequences. This paper significantly improves its area and speed scalability by allowing stalls and variable sorting rate. A 32-port parallel merge-tree that merges 32 sequences is implemented in a Virtex-7 FPGA. It merges sequences at an average rate of 31.05 number/cycle and reduces the total sorting time by 160 times compared with traditional sequential sorters.},
  file      = {:Parallel Hardware Merge Sorter.pdf:PDF},
  issn      = {null},
  keywords  = {field programmable gate arrays;merging;parallel processing;sorting;tree data structures;parallel hardware merge sorter;data handling;high-speed solutions;low-energy solutions;partition algorithms;software systems;sequential sorters;speed scalability;area scalability;variable sorting rate;32-port parallel merge-tree;Virtex-7 FPGA;total sorting time reduction;multiple sorting threads;parallel sorting;Sorting;Hardware;Corporate acquisitions;Field programmable gate arrays;Servers;Software;Bandwidth;Merge sort;sorting network;parallel sorting;FPGA},
}

@InProceedings{,
  author    = {Dimitrios Tsitsigkos and Panagiotis Bouros and Nikos Mamoulis and Manolis Terrovitis},
  title     = {Parallel In-Memory Evaluation of Spatial Joins},
  booktitle = {27th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems},
  year      = {2019},
  file      = {:Parallel In-Memory Evaluation of Spatial Joins.pdf:PDF},
}

@Online{,
  title = {10. Parallel Methods for Data Sorting},
  file  = {:Parallel Methods for Data Sorting.pdf:PDF},
}

@InProceedings{Frias:2008:PPR:1788888.1788899,
  author    = {Frias, Leonor and Petit, Jordi},
  title     = {Parallel Partition Revisited},
  booktitle = {Proceedings of the 7th International Conference on Experimental Algorithms},
  year      = {2008},
  series    = {WEA'08},
  publisher = {Springer-Verlag},
  location  = {Provincetown, MA, USA},
  isbn      = {3-540-68548-0, 978-3-540-68548-7},
  pages     = {142--153},
  url       = {http://dl.acm.org/citation.cfm?id=1788888.1788899},
  acmid     = {1788899},
  address   = {Berlin, Heidelberg},
  file      = {:Parallel Partition Revisited.pdf:PDF},
  numpages  = {12},
}

@Online{,
  author   = {Mehdi Zargham,},
  title    = {COMPUTER ARCHITECTURE},
  year     = {1996},
  subtitle = {7 Parallel Programming an d Parallel Algorithms },
  file     = {:Parallel Programming and Parallel Algorithms  ch7.pdf:PDF},
}

@Book{Rauber:2013:PPM:2517730,
  author    = {Rauber, Thomas and Rnger, Gudula},
  title     = {Parallel Programming: For Multicore and Cluster Systems},
  year      = {2013},
  edition   = {2nd},
  publisher = {Springer Publishing Company, Incorporated},
  isbn      = {3642378005, 9783642378003},
  file      = {:Parallel Programming for Multicore and Cluster Systems.pdf:PDF},
}

@Misc{,
  author = {Orlando , Salvatore},
  title  = {Parallel Programming Patterns},
  file   = {:Parallel Programming Patterns.pdf:PDF},
}

@InProceedings{Taniar:1999:PSJ:647296.723143,
  author    = {Taniar, David and Rahayu, J. Wenny},
  title     = {Parallel Sub-collection Join Query Algorithms for a High Performance Object-Oriented Database Architecture},
  booktitle = {Proceedings of the 4th International ACPC Conference Including Special Tracks on Parallel Numerics and Parallel Computing in Image Processing, Video Processing, and Multimedia: Parallel Computation},
  year      = {1999},
  series    = {ParNum '99},
  publisher = {Springer-Verlag},
  isbn      = {3-540-65641-3},
  pages     = {559--569},
  url       = {http://dl.acm.org/citation.cfm?id=647296.723143},
  acmid     = {723143},
  address   = {London, UK, UK},
  file      = {:Parallel Sub-collection Join Query Algorithms for a High Performance Object-Oriented Database Architecture.pdf:PDF},
  numpages  = {11},
}

@InBook{,
  author     = {Karen Devine and Erik G. Boman and George Karypis},
  title      = {Partitioning and Load Balancing For Emerging Parallel Applications and Architectures},
  booktitle  = {Parallel Processing for Scientific Computing},
  year       = {2006},
  bookauthor = {M. Heroux and P. Raghavan and H. D. Simon},
  publisher  = {SIAM},
  file       = {:Partitioning and Load Balancing for Emerging Parallel Applications and Architectures.pdf:PDF},
}

@InProceedings{10.1007/3-540-54132-2_54,
  author    = {Patel, Suresh},
  title     = {Performance estimates of a join},
  booktitle = {Parallel Database Systems},
  year      = {1991},
  editor    = {America, Pierre},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-47432-6},
  pages     = {124--148},
  abstract  = {The European Declarative System (EDS) project (ESPRIT II EP2025), supported by the Commission of the Europen Communities (CEC DG XIII/A/4) is developing a system supporting a parallel relational database, along with parallel LISP and PROLOG languages implementations. This paper describes a performance model for a JOIN under the relational database on the multi-processor distributed store EDS prototype machine. For the performance model we are interested in the data rates across the processing elements, as the data rates will form part of the requirement for the design of the EDS prototype machine architecture. We describe a number of algorithms and how they are executed. We are particularly interested in the algorithms that give the fastest JOIN timings.},
  address   = {Berlin, Heidelberg},
  file      = {:Performance Estimates of a Join.pdf:PDF},
}

@InProceedings{Garcia2007,
  author = {Garcia, Philip and Korth, Henry},
  title  = {Pipelined hash-join on multithreaded architectures},
  year   = {2007},
  month  = jan,
  pages  = {1},
  doi    = {10.1145/1363189.1363191},
  file   = {:Pipelined Hash-Join on Multithreaded Architectures.pdf:PDF},
}

@InProceedings{10.1007/11733836_24,
  author    = {Zhou, Yongluan and Yan, Ying and Yu, Feng and Zhou, Aoying},
  title     = {PMJoin: Optimizing Distributed Multi-way Stream Joins by Stream Partitioning},
  booktitle = {Database Systems for Advanced Applications},
  year      = {2006},
  editor    = {Li Lee, Mong and Tan, Kian-Lee and Wuwongse, Vilas},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-33338-8},
  pages     = {325--341},
  abstract  = {In emerging data stream applications, data sources are typically distributed. Evaluating multi-join queries over streams from different sources may incur large communication cost. As queries run continuously, the precious bandwidths would be aggressively consumed without careful optimization of operator ordering and placement. In this paper, we focus on the optimization of continuous multi-join queries over distributed streams. We observe that by partitioning streams into substreams we can significantly reduce the communication cost and hence propose a novel partition-based join scheme -- PMJoin. A few partitioning techniques are studied. To generate the query plan for each substream, a heuristic algorithm is proposed based on a rate-based model. Results from an extensive experimental study show that our techniques can sufficiently reduce the communication cost.},
  address   = {Berlin, Heidelberg},
  file      = {:PMJoin Optimizing Distributed Multi-way Stream Joins by Stream Partitioning.pdf:PDF},
}

@InProceedings{10.1007/978-3-540-45072-6_9,
  author    = {Ni, Jinfeng and Ravishankar, Chinya V. and Bhanu, Bir},
  title     = {Probabilistic Spatial Database Operations},
  booktitle = {Advances in Spatial and Temporal Databases},
  year      = {2003},
  editor    = {Hadzilacos, Thanasis and Manolopoulos, Yannis and Roddick, John and Theodoridis, Yannis},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-45072-6},
  pages     = {140--158},
  abstract  = {Spatial databases typically assume that the positional attributes of spatial objects are precisely known. In practice, however, they are known only approximately, with the error depending on the nature of the measurement and the source of data. In this paper, we address the problem how to perform spatial database operations in the presence of uncertainty. We first discuss a probabilistic spatial data model to represent the positional uncertainty. We then present a method for performing the probabilistic spatial join operations, which, given two uncertain data sets, find all pairs of polygons whose probability of overlap is larger than a given threshold. This method uses an R-tree based probabilistic index structure (PrR-tree) to support probabilistic filtering, and an efficient algorithm to compute the intersection probability between two uncertain polygons for the refinement step. Our experiments show that our method achieves higher accuracy than methods based on traditional spatial joins, while reducing overall cost by a factor of more than two.},
  address   = {Berlin, Heidelberg},
  file      = {:Probabilistic Spatial Database Operations.pdf:PDF},
}

@Article{Blelloch:1996:PPA:227234.227246,
  author     = {Blelloch, Guy E.},
  title      = {Programming Parallel Algorithms},
  journal    = {Commun. ACM},
  year       = {1996},
  volume     = {39},
  number     = {3},
  month      = mar,
  pages      = {85--97},
  issn       = {0001-0782},
  doi        = {10.1145/227234.227246},
  url        = {http://doi.acm.org/10.1145/227234.227246},
  acmid      = {227246},
  address    = {New York, NY, USA},
  file       = {:Programming Parallel Algorithms.pdf:PDF},
  issue_date = {March 1996},
  numpages   = {13},
  publisher  = {ACM},
}

@InCollection{DITTRICH2002299,
  author    = {Jens-Peter Dittrich and Bernhard Seeger and David Scot Taylor and Peter Widmayer},
  title     = {Chapter 27 - Progressive Merge Join: A Generic and Non-Blocking Sort-Based Join Algorithm**This work has been supported by grant no. SE 553/2-2 from DFG.},
  booktitle = {VLDB '02: Proceedings of the 28th International Conference on Very Large Databases},
  year      = {2002},
  editor    = {Philip A. Bernstein and Yannis E. Ioannidis and Raghu Ramakrishnan and Dimitris Papadias},
  publisher = {Morgan Kaufmann},
  isbn      = {978-1-55860-869-6},
  pages     = {299--310},
  doi       = {https://doi.org/10.1016/B978-155860869-6/50034-2},
  url       = {http://www.sciencedirect.com/science/article/pii/B9781558608696500342},
  abstract  = {Publisher Summary This chapter presents a generic technique called progressive merge join (PMJ) that eliminates the blocking behavior of sort-based join algorithms. The basic idea behind PMJ is to have the join produce results, as early as the external mergesort generates initial runs. Many state-of-the-art join techniques require the input relations to be almost fully sorted before the actual join processing starts. Thus, these techniques start producing first results only after a considerable time has passed. This blocking behavior is a serious problem when consequent operators have to stop processing in order to wait for first results of the join. Furthermore, this behavior is not acceptable if the result of the join is visualized or/and requires user interaction. These are typical scenarios for data mining applications. The off-time of existing techniques even increases with growing problem sizes.},
  address   = {San Francisco},
  file      = {:Progressive Merge Join A Generic and Non-Blocking Sort-Based Join Algorithm.pdf:PDF},
}

@InProceedings{Huber2009,
  author = {Huber, Frank and Freytag, Johann},
  title  = {Query Processing on Multi-Core Architectures.},
  year   = {2009},
  month  = jan,
  pages  = {27--31},
  file   = {:Query Processing on Multi-Core Architectures.pdf:PDF},
}

@InProceedings{Cieslewicz:2006:RPD:1140402.1140408,
  author    = {Cieslewicz, John and Berry, Jonathan and Hendrickson, Bruce and Ross, Kenneth A.},
  title     = {Realizing Parallelism in Database Operations: Insights from a Massively Multithreaded Architecture},
  booktitle = {Proceedings of the 2Nd International Workshop on Data Management on New Hardware},
  year      = {2006},
  series    = {DaMoN '06},
  publisher = {ACM},
  location  = {Chicago, Illinois},
  isbn      = {1-59593-466-9},
  doi       = {10.1145/1140402.1140408},
  url       = {http://doi.acm.org/10.1145/1140402.1140408},
  acmid     = {1140408},
  address   = {New York, NY, USA},
  articleno = {4},
  file      = {:Realizing Parallelism in Database Operations - Insights from a Massively Multithreaded Architecture.pdf:PDF},
}

@InProceedings{10.1007/3-540-54132-2_48,
  author    = {Bratbergsengen, Kjell},
  title     = {Relational algebra operations},
  booktitle = {Parallel Database Systems},
  year      = {1991},
  editor    = {America, Pierre},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-47432-6},
  pages     = {24--43},
  address   = {Berlin, Heidelberg},
  file      = {:Relational Algebra Operations.pdf:PDF},
}

@Article{,
  author  = {Venkatesh Kakalwar and Dipanjan De and Arup Kumar Biswas and Sivanesan S},
  title   = {Relational Database with Multicore-Framework},
  journal = {International Journal of Advanced Research in Computer and Communication Engineering},
  year    = {2018},
  volume  = {7},
  issue   = {3},
  pages   = {93--96},
  file    = {:Relational Database with Multicore-Framework.pdf:PDF},
}

@Article{Jung:2017:SDL:3167892.3167894,
  author     = {Jung, Hyungsoo and Han, Hyuck and Kang, Sooyong},
  title      = {Scalable Database Logging for Multicores},
  journal    = {Proc. VLDB Endow.},
  year       = {2017},
  volume     = {11},
  number     = {2},
  month      = oct,
  pages      = {135--148},
  issn       = {2150-8097},
  doi        = {10.14778/3149193.3149195},
  url        = {https://doi.org/10.14778/3149193.3149195},
  acmid      = {3167894},
  file       = {:Scalable Database Logging for Multicores.pdf:PDF},
  issue_date = {October 2017},
  numpages   = {14},
  publisher  = {VLDB Endowment},
}

@InProceedings{Bilidas2019ScalablePO,
  author    = {Dimitris Bilidas and Manolis Koubarakis},
  title     = {Scalable Parallelization of RDF Joins on Multicore Architectures},
  booktitle = {EDBT},
  year      = {2019},
  file      = {:Scalable Parallelization of RDF Joins on Multicore Processors.pdf:PDF},
}

@InProceedings{Arge:1998:SSS:645924.671340,
  author    = {Arge, Lars and Procopiuc, Octavian and Ramaswamy, Sridhar and Suel, Torsten and Vitter, Jeffrey Scott},
  title     = {Scalable Sweeping-Based Spatial Join},
  booktitle = {Proceedings of the 24rd International Conference on Very Large Data Bases},
  year      = {1998},
  series    = {VLDB '98},
  publisher = {Morgan Kaufmann Publishers Inc.},
  isbn      = {1-55860-566-5},
  pages     = {570--581},
  url       = {http://dl.acm.org/citation.cfm?id=645924.671340},
  acmid     = {671340},
  address   = {San Francisco, CA, USA},
  file      = {:Scalable Sweeping-Based Spatial Join.pdf:PDF},
  numpages  = {12},
}

@InProceedings{Wang:2016:SMD:2882903.2882934,
  author    = {Wang, Zhaoguo and Mu, Shuai and Cui, Yang and Yi, Han and Chen, Haibo and Li, Jinyang},
  title     = {Scaling Multicore Databases via Constrained Parallel Execution},
  booktitle = {Proceedings of the 2016 International Conference on Management of Data},
  year      = {2016},
  series    = {SIGMOD '16},
  publisher = {ACM},
  location  = {San Francisco, California, USA},
  isbn      = {978-1-4503-3531-7},
  pages     = {1643--1658},
  doi       = {10.1145/2882903.2882934},
  url       = {http://doi.acm.org/10.1145/2882903.2882934},
  acmid     = {2882934},
  address   = {New York, NY, USA},
  file      = {:Scaling Multicore Databases via Constrained Parallel Execution.pdf:PDF},
  keywords  = {concurrency control, in-memory database, multicore, transaction processing},
  numpages  = {16},
}

@Article{Zhou2012,
  author   = {Zhou, Jingren and Bruno, Nicolas and Wu, Ming-Chuan and Larson, Per-Ake and Chaiken, Ronnie and Shakib, Darren},
  title    = {SCOPE: parallel databases meet MapReduce},
  journal  = {The VLDB Journal},
  year     = {2012},
  volume   = {21},
  number   = {5},
  month    = oct,
  pages    = {611--636},
  issn     = {0949-877X},
  doi      = {10.1007/s00778-012-0280-z},
  url      = {https://doi.org/10.1007/s00778-012-0280-z},
  abstract = {Companies providing cloud-scale data services have increasing needs to store and analyze massive data sets, such as search logs, click streams, and web graph data. For cost and performance reasons, processing is typically done on large clusters of tens of thousands of commodity machines. Such massive data analysis on large clusters presents new opportunities and challenges for developing a highly scalable and efficient distributed computation system that is easy to program and supports complex system optimization to maximize performance and reliability. In this paper, we describe a distributed computation system, Structured Computations Optimized for Parallel Execution (Scope), targeted for this type of massive data analysis. Scope combines benefits from both traditional parallel databases and MapReduce execution engines to allow easy programmability and deliver massive scalability and high performance through advanced optimization. Similar to parallel databases, the system has a SQL-like declarative scripting language with no explicit parallelism, while being amenable to efficient parallel execution on large clusters. An optimizer is responsible for converting scripts into efficient execution plans for the distributed computation engine. A physical execution plan consists of a directed acyclic graph of vertices. Execution of the plan is orchestrated by a job manager that schedules execution on available machines and provides fault tolerance and recovery, much like MapReduce systems. Scope is being used daily for a variety of data analysis and data mining applications over tens of thousands of machines at Microsoft, powering Bing, and other online services.},
  day      = {01},
  file     = {:SCOPE parallel databases meet MapReduce.pdf:PDF},
}

@InProceedings{843555,
  author    = {D. Taniar and J. W. Rahayu},
  title     = {Sorting in parallel database systems},
  booktitle = {Proceedings Fourth International Conference/Exhibition on High Performance Computing in the Asia-Pacific Region},
  year      = {2000},
  volume    = {2},
  month     = may,
  pages     = {830-835 vol.2},
  doi       = {10.1109/HPC.2000.843555},
  abstract  = {Sorting in database processing is frequently required through the use of Order By and Distinct clauses in SQL. Sorting is also widely known in the computer science community at large. Sorting in general covers internal and external sorting. Past published work has extensively focused on external sorting on uni-processors (serial external sorting), and internal sorting on multiprocessors (parallel internal sorting). External sorting on multiprocessors (parallel external sorting) has received surprisingly little attention; furthermore, the way current parallel database systems do sorting is far from optimal in many scenarios. The authors present a taxonomy for parallel sorting in parallel database systems, which covers five sorting methods: namely parallel merge-all sort, parallel binary-merge sort, parallel redistribution binary-merge sort, parallel redistribution merge-all sort, and parallel partitioned sort. The first two methods are previously proposed approaches to parallel external sorting which have been adopted as status quo of parallel database sorting, whereas the latter three methods which are based on redistribution and repartitioning are new, in that the have not been discussed in the literature of parallel external sorting.},
  file      = {:Sorting in Parallel Database Systems.pdf:PDF},
  issn      = {null},
  keywords  = {parallel databases;sorting;merging;parallel database system sorting;database processing;SQL;external sorting;internal sorting;multiprocessors;parallel external sorting;sorting methods;parallel merge-all sort;parallel binary-merge sort;parallel redistribution binary-merge sort;parallel redistribution merge-all sort;parallel partitioned sort;redistribution;repartitioning;Sorting;Database systems;Computer science;Taxonomy;Merging;Australia;Data structures;Pipelines;Parallel processing},
}

@Misc{,
  author = {Güting, Ralf},
  title  = {Spatial Database Systems},
  file   = {:Spatial Database Systems.pdf:PDF},
}

@Article{Mamoulis2000,
  author  = {Mamoulis, Nikos and Papadias, Dimitris},
  title   = {Integration of Spatial Join Algorithms for Processing Multiple Inputs},
  journal = {SIGMOD Record (ACM Special Interest Group on Management of Data)},
  year    = {2000},
  volume  = {28},
  month   = oct,
  doi     = {10.1145/304182.304183},
  file    = {:Spatial Join Algorithms for Processing Multiple Inputs.pdf:PDF},
}

@Article{Jacox_spatialjoin,
  author  = {Edwin H. Jacox and Hanan Samet},
  title   = {Spatial Join Techniques},
  journal = {Transactions on Database Systems},
  year    = {2006},
  volume  = {V},
  number  = {N},
  pages   = {1--45},
  file    = {:Spatial Join Techniques.pdf:PDF},
}

@Article{Bouros:2019:SJW:3355491.3355494,
  author     = {Bouros, Panagiotis and Mamoulis, Nikos},
  title      = {Spatial Joins: What's Next?},
  journal    = {SIGSPATIAL Special},
  year       = {2019},
  volume     = {11},
  number     = {1},
  month      = aug,
  pages      = {13--21},
  issn       = {1946-7729},
  doi        = {10.1145/3355491.3355494},
  url        = {http://doi.acm.org/10.1145/3355491.3355494},
  acmid      = {3355494},
  address    = {New York, NY, USA},
  file       = {:Spatial Joins What’s next.pdf:PDF},
  issue_date = {March 2019},
  numpages   = {9},
  publisher  = {ACM},
}

@InProceedings{Tu:2013:STM:2517349.2522713,
  author    = {Tu, Stephen and Zheng, Wenting and Kohler, Eddie and Liskov, Barbara and Madden, Samuel},
  title     = {Speedy Transactions in Multicore In-memory Databases},
  booktitle = {Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles},
  year      = {2013},
  series    = {SOSP '13},
  publisher = {ACM},
  location  = {Farminton, Pennsylvania},
  isbn      = {978-1-4503-2388-8},
  pages     = {18--32},
  doi       = {10.1145/2517349.2522713},
  url       = {http://doi.acm.org/10.1145/2517349.2522713},
  acmid     = {2522713},
  address   = {New York, NY, USA},
  file      = {:Speedy Transactions in Multicore In-Memory Databases.pdf:PDF},
  numpages  = {15},
}

@Article{Sokolinsky2004,
  author   = {Sokolinsky, L. B.},
  title    = {Survey of Architectures of Parallel Database Systems},
  journal  = {Programming and Computer Software},
  year     = {2004},
  volume   = {30},
  number   = {6},
  month    = nov,
  pages    = {337--346},
  issn     = {1608-3261},
  doi      = {10.1023/B:PACS.0000049511.71586.e0},
  url      = {https://doi.org/10.1023/B:PACS.0000049511.71586.e0},
  abstract = {The paper is devoted to the classification, design, and analysis of architectures of parallel database systems. A formalization of the notion ``parallel database system'' is suggested, which relies on a concept of a virtual machine. Based on this formalization, a new approach to the classification of architectures of parallel database systems is suggested. Requirements to parallel database systems are formulated, which serve as criteria for comparing various architectures. Various classes of architectures of parallel database systems are considered and compared.},
  day      = {01},
  file     = {:Sokolinsky2004E.pdf:PDF},
}

@Article{Chang1998,
  author  = {Chang, Chialin and Acharya, Anurag and Sussman, Alan and Saltz, Joel},
  title   = {T2: A Customizable Parallel Database for Multi-Dimensional Data.},
  journal = {SIGMOD Record},
  year    = {1998},
  volume  = {27},
  month   = mar,
  pages   = {58--66},
  doi     = {10.1145/273244.273264},
  file    = {:T2 A C ustomizable P arallel Database F or Multi-dimensional Data.pdf:PDF},
}

@Article{Balakrishnan:2005:IPA:1080695.1070012,
  author     = {Balakrishnan, Saisanthosh and Rajwar, Ravi and Upton, Mike and Lai, Konrad},
  title      = {The Impact of Performance Asymmetry in Emerging Multicore Architectures},
  journal    = {SIGARCH Comput. Archit. News},
  year       = {2005},
  volume     = {33},
  number     = {2},
  month      = may,
  pages      = {506--517},
  issn       = {0163-5964},
  doi        = {10.1145/1080695.1070012},
  url        = {http://doi.acm.org/10.1145/1080695.1070012},
  acmid      = {1070012},
  address    = {New York, NY, USA},
  file       = {:The Impact of Performance Asymmetry in Emerging Multicore Architectures.PDF:PDF},
  issue_date = {May 2005},
  numpages   = {12},
  publisher  = {ACM},
}

@InProceedings{Chunyua2005THEKT,
  author = {ZHAO Chun-yua and ZHAO Yuan-chunb and MENG Ling-kuia and DENG Shi-juna},
  title  = {THE KEY TECHNOLOGIC ISSUES OF PARALLEL SPATIAL DATABASE MAMAGEMENT SYSTEM FOR PARALLEL GIS},
  year   = {2005},
  file   = {:THE KEY TECHNOLOGIC ISSUES OF PARALLEL SPATIAL DATABASE.pdf:PDF},
}

@Article{Ross:2014:MPD:2664631.2618403,
  author     = {Ross, Kenneth A.},
  title      = {Multicore Processors and Database Systems: The Multicore Transformation (Ubiquity Symposium)},
  journal    = {Ubiquity},
  year       = {2014},
  volume     = {2014},
  number     = {August},
  month      = aug,
  pages      = {4:1--4:7},
  issn       = {1530-2180},
  doi        = {10.1145/2618403},
  url        = {http://doi.acm.org/10.1145/2618403},
  acmid      = {2618403},
  address    = {New York, NY, USA},
  articleno  = {4},
  file       = {:The Multicore Transformation - Multicore Processors and Database Systems .pdf:PDF},
  issue_date = {August 2014},
  numpages   = {7},
  publisher  = {ACM},
}

@Misc{,
  author = {Arnaud Legrand},
  title  = {Theoretical Parallel Computing},
  year   = {2009},
  file   = {:Theoretical Parallel Computing.pdf:PDF},
}

@Article{Vishkin2002,
  author = {Vishkin, Uzi},
  title  = {Thinking in Parallel: Some Basic Data-Parallel Algorithms and Techniques},
  year   = {2002},
  month  = mar,
  file   = {:Thinking in Parallel - Some Basic Data-Parallel Algorithms and Techniques.pdf:PDF},
}

@InProceedings{10.1007/978-3-319-18123-3_15,
  author    = {Xue, Zhong-Bin and Zhou, Xuan and Wang, Shan},
  title     = {TOF: A Throughput Oriented Framework for Spatial Queries Processing in Multi-core Environment},
  booktitle = {Database Systems for Advanced Applications},
  year      = {2015},
  editor    = {Renz, Matthias and Shahabi, Cyrus and Zhou, Xiaofang and Cheema, Muhammad Aamir},
  publisher = {Springer International Publishing},
  isbn      = {978-3-319-18123-3},
  pages     = {241--256},
  abstract  = {In this paper, we develop a Throughput Oriented Framework (TOF) for efficient processing of spatiotemporal queries in multi-core environment. Traditional approaches to spatial query processing were focused on reduction of query latency. In real world, most LBS applications emphasize throughput rather than query latency. TOF is designed to achieve maximum throughput. Instead of resorting to complex indexes, TOF chooses to execute a batch queries at each run, so it can maximize data locality and parallelism on multi-core platforms. Using TOF, we designed algorithms for processing range queries and kNN queries respectively. Experimental study shows that these algorithms outperform the existing approaches significantly in terms of throughput.},
  address   = {Cham},
  file      = {:TOF A Throughput Oriented Framework for Spatial Queries Processing in Multi-core Environment.pdf:PDF},
}

@InProceedings{6270567,
  author    = {Y. Zhong and J. Han and T. Zhang and Z. Li and J. Fang and G. Chen},
  title     = {Towards Parallel Spatial Query Processing for Big Spatial Data},
  booktitle = {2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops PhD Forum},
  year      = {2012},
  month     = may,
  pages     = {2085--2094},
  doi       = {10.1109/IPDPSW.2012.245},
  abstract  = {In recent years, spatial applications have become more and more important in both scientific research and industry. Spatial query processing is the fundamental functioning component to support spatial applications. However, the state-of-the-art techniques of spatial query processing are facing significant challenges as the data expand and user accesses increase. In this paper we propose and implement a novel scheme (named VegaGiStore) to provide efficient spatial query processing over big spatial data and numerous concurrent user queries. Firstly, a geography-aware approach is proposed to organize spatial data in terms of geographic proximity, and this approach can achieve high aggregate I/O throughput. Secondly, in order to improve data retrieval efficiency, we design a two-tier distributed spatial index for efficient pruning of the search space. Thirdly, we propose an "indexing + MapReduce'' data processing architecture to improve the computation capability of spatial query. Performance evaluations of the real-deployed VegaGiStore system confirm its effectiveness.},
  file      = {:Towards Parallel Spatial Query Processing for Big Spatial Data.pdf:PDF},
  issn      = {null},
  keywords  = {geography;parallel processing;query processing;parallel spatial query processing;big spatial data;concurrent user queries;geography-aware approach;geographic proximity;I-O throughput aggregation;data retrieval;two-tier distributed spatial index;search space pruning;indexing-MapReduce data processing architecture;VegaGiStore system;Spatial databases;Query processing;Distributed databases;Spatial indexes;Parallel processing;Computer architecture;spatial data management;distributed storage;spatial index;spatial query;spatial applications},
}

@InBook{,
  title     = {Parallel Algorithms},
  booktitle = {Parallel Algorithms \& Parallel Programming},
  file      = {:Unit 1 parallel-algorithms.pdf:PDF},
}

@InProceedings{6649713,
  author    = {J. Park and Q. Wang and D. Jayasinghe and J. Li and Y. Kanemasa and M. Matsubara and D. Yokoyama and M. Kitsuregawa and C. Pu},
  title     = {Variations in Performance Measurements of Multi-core Processors: A Study of n-Tier Applications},
  booktitle = {2013 IEEE International Conference on Services Computing},
  year      = {2013},
  month     = jun,
  pages     = {336--343},
  doi       = {10.1109/SCC.2013.116},
  abstract  = {The prevalence of multi-core processors has raised the question of whether applications can use the increasing number of cores efficiently in order to provide predictable quality of service (QoS). In this paper, we study the horizontal scalability of n-tier application performance within a multicore processor (MCP). Through extensive measurements of the RUBBoS benchmark, we found one major source of performance variations within MCP: the mapping of cores to virtual CPUs can significantly lower on-chip cache hit ratio, causing performance drops of up to 22% without obvious changes in resource utilization. After we eliminated these variations by fixing the MCP core mapping, we measured the impact of three mainstream hypervisors (the dominant Commercial Hypervisor, Xen, and KVM) on intra-MCP horizontal scalability. On a quad-core dual-processor (total 8 cores), we found some interesting similarities and dissimilarities among the hypervisors. An example of similarities is a non-monotonic scalability trend (throughput increasing up to 4 cores and then decreasing for more than 4 cores) when running a browse-only CPU-intensive workload. This problem can be traced to the management of last level cache of CPU packages. An example of dissimilarities among hypervisors is their handling of write operations in mixed read/write, I/O-intensive workloads. Specifically, the Commercial Hypervisor is able to provide more than twice the throughput compared to KVM. Our measurements show that both MCP cache architecture and the choice of hypervisors indeed have an impact on the efficiency and horizontal scalability achievable by applications. However, despite their differences, all three mainstream hypervisors have difficulties with the intra-MCP horizontal scalability beyond 4 cores for n-tier applications.},
  file      = {:Variations in Performance Measurements of Multi-Core Processors.pdf:PDF},
  issn      = {null},
  keywords  = {cache storage;input-output programs;microprocessor chips;multiprocessing systems;performance evaluation;quality of service;virtual machines;MCP cache architecture;I/O-intensive workload;mixed read-write workload;write operation handling;browse-only CPU-intensive workload;nonmonotonic scalability trend;quad-core dual-processor;intra MCP horizontal scalability;KVM;Xen;commercial hypervisor;mainstream hypervisors;MCP core mapping;performance drops;on-chip cache hit ratio;virtual CPU;QoS;quality-of-service predictability;n-tier application performance;multicore processors;performance measurements;Virtual machine monitors;Scalability;Multicore processing;Servers;Market research;Throughput;Hardware;virtualization; QoS; multi-core; scalability; cloud; hypervisor; performance comparison; RUBBoS; n-tier},
}

@Book{McCool:2012:SPP:2385466,
  author    = {McCool, Michael and Reinders, James and Robison, Arch},
  title     = {Structured Parallel Programming: Patterns for Efficient Computation},
  year      = {2012},
  edition   = {1st},
  publisher = {Morgan Kaufmann Publishers Inc.},
  isbn      = {9780123914439, 9780124159938},
  address   = {San Francisco, CA, USA},
  file      = {:Structured Parallel Programming.pdf:PDF},
}

@Article{Ranok2016,
  author  = {Ranok, Udom and Kittitornkun, Surin},
  title   = {Parallel Partition and Merge QuickSort (PPMQSort) on Multicore CPUs},
  journal = {The Journal of Supercomputing},
  year    = {2016},
  volume  = {72},
  month   = feb,
  doi     = {10.1007/s11227-016-1641-y},
  file    = {:Parallel Partition and Merge QuickSort (PPMQSort) on Multicore CPUs.pdf:PDF},
}

@InProceedings{Rattanatranurak2019,
  author = {Rattanatranurak, Apisit},
  title  = {Dual Parallel Partition Sorting Algorithm},
  year   = {2019},
  month  = jan,
  file   = {:Dual Parallel Partition Sorting Algorithm.pdf:PDF},
}

@Report{,
  author      = {Ralf Hartmut Güting and Thomas Behr},
  title       = {Tutorial: Distributed Query Processing in S ECONDO},
  institution = {Fernuniversität Hagen, Faculty for Mathematics and Computer Sience Database Systems for New Applications},
  year        = {2019},
  date        = {2019-10-29},
  subtitle    = {Using the Distributed Algebra 2},
  number      = {Version 4},
  file        = {:DistributedQueryProcessinginSecondo.pdf:PDF},
}

@Comment{jabref-meta: databaseType:biblatex;}

@Comment{jabref-meta: fileDirectory:/home/ingo/Dokumente/master;}

@Comment{jabref-meta: saveActions:enabled;
date[normalize_date]
pages[normalize_page_numbers]
month[normalize_month]
all-text-fields[identity,latex_to_unicode]
title[html_to_unicode]
;}
