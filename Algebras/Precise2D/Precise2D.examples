Database : suffixtreetest 
Restore  : YES

Operator : crossings
Number   : 1
Signature: line2 x line2 -> points2
Example  : query crossings([const line2 value(((1 1 ('0' '0'))(2 1 ('0' '0'))))],[const line2 value (((1 1 ('0' '0'))(1 2 ('0' '0'))))])
Result   : (points2 ((1 1 ('0' '0'))))

Operator : union
Number   : 1
Signature: line2 x line2 -> line2
Example  : query [const line2 value (((1 1 ('1/4' '1/4'))(2 1 ('1/4' '1/4'))))] union [const line2 value(((1 1 ('1/4' '1/4'))(1 2 ('1/4' '1/4'))))];
Result   : (line2 (((1 1 ('1/4' '1/4'))(2 1 ('1/4' '1/4')))((1 1 ('1/4' '1/4'))(1 2 ('1/4' '1/4')))))

Operator : intersection
Number   : 1
Signature: line2 x line2 -> line2
Example  : query intersection ([const line2 value(((1 1 ('1/4' '1/4'))(3 1 ('1/4' '1/4'))))],[const line2 value(((2 1 ('1/4' '1/4'))(4 1 ('1/4' '1/4'))))])
Result   : (line2 ((2 1 ('1/4' '1/4')(3 1 ('1/4' '1/4')))))

Operator : intersects
Number   : 1
Signature: line2 x line2 -> bool
Example  : query [const line2 value(((1 1 ('1/4' '1/4'))(3 1 ('1/4' '1/4'))))] intersects [const line2 value(((2 1 ('1/4' '1/4'))(4 1 ('1/4' '1/4'))))]
Result   : TRUE

Operator : minus
Number   : 1
Signature: line2 x line2 -> line2
Example  : query [const line2 value(((1 1 ('1/4' '1/4'))(3 1 ('1/4' '1/4'))))] minus [const line2 value(((2 1 ('1/4' '1/4'))(4 1 ('1/4' '1/4'))))]
Result   : (line2 ((1 1 ('1/4' '1/4')(2 1 ('1/4' '1/4'))))))

Operator : lineToLine2
Number   : 1
Signature: line -> line2
Example  : query lineToLine2 ([const line value((1.0 1.5 2.0 2.5))])
Result   : (line2 ((1 1 ('0' '1/2')(2 2 ('0' '1/2'))))))
