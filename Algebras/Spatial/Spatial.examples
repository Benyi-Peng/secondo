Database : berlintest
Restore  : NO

Operator : #
Number   : 1
Signature: (point point) -> bool, (points points) -> bool, (line line) -> bool, (region region) -> bool
Example  : query mehringdamm # alexanderplatz
Result   : TRUE


Operator : +
Number   : 1
Signature: point x point -> point
Example  : query [const point value (0.0 -1.2)] + [const point value (-5.0 1.2)] 
Result   : (point (-5.0 0.0))


Operator : =
Number   : 1
Signature: (point point) -> bool, (points points) -> bool, (line line) -> bool, (region region) -> bool
Example  : query tiergarten = zoogarten
Result   : FALSE


Operator : adjacent
Number   : 1
Signature: (points||line||region x points||line||region) -> bool
Example  : query WFlaechen feed filter[.geoData adjacent grunewald] consume
Result   : file


Operator : area
Number   : 1
Signature: region -> real
Example  : query area([const rect value (-1000.0 -900.0 100000.0 100010.0)] rect2region)
Result   : 1000.0


Operator : atpoint
Number   : 1
Signature: line x point x bool -> real
Example  : query atpoint(trajectory(train7), mehringdamm, TRUE)
Result   : 18380.673536405186


Operator : atposition
Number   : 1
Signature: line x real x bool -> point
Example  : query atposition(trajectory(train7), 18380.673536405186, TRUE) = mehringdamm
Result   : TRUE


Operator : atposition
Number   : 2
Signature: line x real x bool -> point
Example  : query WFlaechen feed filter[.Name = "Spree"] UBahn feed {u} symmjoin[.geoData intersects_new ..geoData_u] extend[Schnitt: intersection_new(.geoData, .geoData_u)] project[Schnitt] extend[Start: atposition(.Schnitt, 0.0, TRUE)] consume
Result   : file 

Operator : bbox
Number   : 1
Signature: (point||points||line||region) -> rect
Example  : query bbox(tiergarten)
Result   : (rect (5659.99999999 8571.00000001 11434.99999999 12795.00000001))

Operator : boundary
Number   : 1
Signature: line -> points
Example  : query boundary(train7sections)
Result   : file

Operator : boundary
Number   : 2
Signature: region -> line
Example  : query no_components(boundary(koepenick))
Result   : (int 7)

Operator : commonborder
Number   : 1
Signature: (region x region) -> line
Example  : query WFlaechen feed filter[.geoData adjacent grunewald] extend[Common: commonborder(.geoData, grunewald)] project[Common] consume
Result   : file

Operator : commonborder
Number   : 2
Signature: (region x region) -> line
Example  : query commonborder(tiergarten, tiergarten)
Result   : file


Operator : components
Number   : 1
Signature: points -> stream(point), region -> stream(region)
Example  : query components(koepenick) count
Result   : crashes

Operator : components
Number   : 2
Signature: points -> stream(point), region -> stream(region)
Example  : query components(tiergarten) count
Result   : 1

Operator : components
Number   : 3
Signature: line -> stream(line)
Example  : query components(BGrenzenLine) count
Result   : 1

Operator : crossings
Number   : 1
Signature: (line x line) -> points
Example  : query strassen feed {s1} strassen feed {s2} spatialjoin[geoData_s1, geoData_s2] filter[.Name_s1 < .Name_s2] filter[.geoData_s1 intersects .geoData_s2] projectextendstream[Name_s1, Name_s2; Cross: components(crossings(.geoData_s1, .geoData_s2))] project[Cross] consume
Result   : bug 
Remark   : some points are in the result which are not crossings of streets


Operator : direction
Number   : 1
Signature: (point x point) -> real
Example  : query direction(mehringdamm, alexanderplatz)
Result   : 61.061353020685345


Operator : distance
Number   : 1
Signature: (point||points||line x point||points||line) -> real
Example  : query distance(mehringdamm, alexanderplatz)
Result   : 3455.4536605198455


Operator : get
Number   : 1
Signature: points x int -> point
Example  : query get([const points value ((0.0 -1.2)(1.0 2.0))],1)
Result   : (point (1.0 2.0))


Operator : getx
Number   : 1
Signature: point -> real
Example  : query getx([const point value (0.0 -1.2)])
Result   : (real 0.0)


Operator : gety
Number   : 1
Signature: point -> real
Example  : query gety([const point value (0.0 -1.2)])
Result   : (real -1.2)


Operator : ininterior
Number   : 1
Signature: (point x region) -> bool
Example  : query mehringdamm ininterior thecenter 
Result   : TRUE


Operator : inside
Number   : 1
Signature: (point||points||line||region x points||line||region) -> bool
Example  : query mehringdamm inside thecenter
Result   : TRUE


Operator : intersection
Number   : 1
Signature:  (point||points||line||region x point||points||line||region)-> points||line||region
Example  : query intersection(vertices(trajectory(train7)), thecenter)
Result   : file


Operator : intersects
Number   : 1
Signature: (points||line||region x points||line||region) -> bool 
Example  : query trajectory(train7) intersects thecenter
Result   : TRUE


Operator : isempty
Number   : 1
Signature: point -> bool, points -> bool, line -> bool,region -> bool
Example  : query isempty(mehringdamm)
Result   : FALSE


Operator : line2region
Number   : 1
Signature: line -> region
Example  : query commonborder(tiergarten, tiergarten) line2region = tiergarten 
Result   : TRUE


Operator : minus
Number   : 1
Signature: (point||points||line||region x point||points||line||region) -> point||points||line||region
Example  : query no_components(vertices(trajectory(train7)) minus mehringdamm)
Result   : 146


Operator : no_components
Number   : 1
Signature: (points||line||region) -> int
Example  : query no_components(vertices(trajectory(train7)))
Result   : 147


Operator : no_segments
Number   : 1
Signature: (region) -> int
Example  : query no_segments(tiergarten)
Result   : 70


Operator : onborder
Number   : 1
Signature: (point x line||region) -> bool
Example  : query WFlaechen feed UBahn feed {u} symmjoin[.geoData intersects ..geoData_u] extend[Stretch: intersection_new(.geoData, .geoData_u)] project[geoData, Stretch] extend[Start: atposition(.Stretch, 0.0, TRUE), Middle: atposition(.Stretch, size(.Stretch)/2, TRUE)] extend[Onborder: .Start onborder .geoData, NotOnBorder: .Middle onborder .geoData] consume
Result   : file


Operator : overlaps
Number   : 1
Signature: (region x region) -> bool
Example  : query koepenick overlaps thecenter
Result   : FALSE


Operator : rect2region
Number   : 1
Signature: rect -> region
Example  : query [const rect value (-100.0 200.0 -50.0 500.0)] rect2region
Result   : (region ( ( ( (200.0 -50.0) (-100.0 -50.0) (-100.0 500.0) (200.0 500.0)))))


Operator : scale
Number   : 1
Signature: for T in {point, points, line, region}: T x real -> T
Example  : query tiergarten scale[10.0]
Result   : file


Operator : single
Number   : 1
Signature: (points) -> point
Example  : query single(vertices(thecenter))
Result   : (point undef)


Operator : size
Number   : 1
Signature: (line) -> real
Example  : query size(trajectory(train7))
Result   : 31662.126023561887


Operator : subline
Number   : 1
Signature: line x real x real x bool -> line
Example  : query trajectory(train7) within [fun(traj:ANY) subline(traj, 0.5 * size(traj), 0.6 * size(traj), TRUE)]
Result   : file


Operator : touchpoints
Number   : 1
Signature: (line||region x region) -> points
Example  : query touchpoints(tiergarten, tiergarten)
Result   : file


Operator : touchpoints
Number   : 2
Signature: (line||region x region) -> points
Example  : query WFlaechen feed {w} Flaechen feed {f} symmjoin[.geoData_w adjacent ..geoData_f] extend[Touch: touchpoints(.geoData_w, .geoData_f)] consume
Result   : file


Operator : translate
Number   : 1
Signature: (point||points||line||region x real x real) -> point||points||line||region
Example  : query trajectory(train7) translate[100.0, 0.0]
Result   : file


Operator : union
Number   : 1
Signature: (point x points) -> points, (points x point) -> points, (points x points) -> points
Example  : query Kinos feed extend[Pos: [const points value ()] union .geoData] remove[geoData] aggregateB[Pos; fun(p1:points, p2:points) p1 union p2; [const points value ()]]
Result   : file


Operator : vertices
Number   : 1
Signature: (region -> points) or (line -> points)
Example  : query vertices(thecenter)
Result   : file


Operator : windowclippingin
Number   : 1
Signature: (line x rect) -> line, (region x rect) --> region
Example  : query Flaechen feed extend[InWindow: windowclippingin(.geoData, bbox(thecenter))] project[InWindow] filter[not(isempty(.InWindow))] consume
Result   : crashes


Operator : windowclippingin
Number   : 2
Signature: (line x rect) -> line, (region x rect) --> region
Example  : query windowclippingin(trajectory(train7), bbox(thecenter))
Result   : crashes


Operator : windowclippingout
Number   : 1
Signature: (line x rect) -> line, (region x rect) --> region
Example  : query windowclippingout(trajectory(train7), bbox(thecenter))
Result   : file

Operator : polylines 
Number   : 1
Signature: line  -> stream (line)
Example  : query BGrenzenLine polylines [FALSE]  count
Result   : (int 2)

Operator : simplify 
Number   : 1
Signature: line x real  -> line
Example  : query no_segments(simplify(BGrenzenLine,2000.0))  
Result   : (int 24)

Operator : simplify
Number   : 2
Signature: line x real x points -> line
Example  : query no_segments(simplify(BGrenzenLine,2000.0, vertices(BGrenzenLine) )) = no_segments(BGrenzenLine) 
Result   : (bool TRUE)
 
Operator : segments 
Number   : 1
Signature: line  -> stream (line)
Example  : query (segments(BGrenzenLine) count) = no_segments(BGrenzenLine)
Result   : (bool TRUE)


