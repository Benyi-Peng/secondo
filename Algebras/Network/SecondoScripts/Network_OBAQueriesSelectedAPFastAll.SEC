open database berlinmod;

query now();

let Q10gOBA =
  dataSNcar feed projectextend [Licence, Trip; Traj: gline2line(trajectory(.Trip))] {a}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; TripA: mgpoint2mpoint(.Trip), Traj: gline2line(trajectory(.Trip))]{b}
  symmjoin[(distance(.Traj_a, ..Traj_b) < 3.0) and (.Licence_a # ..Licence_b)]
  projectextend[Licence_b, Trip_b, Licence_a; Times: deftime((distance(.TripA_b, mgpoint2mpoint(.Trip_a)) < 3.0) at TRUE)]
  filter [not(isempty(.Times))]
  projectextend [Licence_b, Licence_a; Pos: .Trip_b atperiods .Times]
  filter [not(isempty(.Pos))]
  project[Licence_b, Licence_a, Pos]
  sortby [Licence_b asc, Licence_a asc]
 consume;

# Query 1: What are the models of the vehicles with license plate numbers from QueryLicence?
query now();
let Q1OBA =
  QueryLicences feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  project [Licence, Model]
consume;

query now();
# Query 2: How many vehicles exist that are passenger cars?
query now();
let Q2OBA =
   dataSNcar feed filter [.Type = "passenger"]
count;

query now();
# Query 3: Where have the vehicles with licenses from QueryLicence1 been at each instant from QueryInstant1?
query now();

let Q3OBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  project [Licence, Trip]
  QueryInstant1 feed {i}
  product
  projectextend[Licence, Instant_i; Pos: val(.Trip atinstant .Instant_i)]
  sortby[Licence asc, Instant_i asc]
 consume;


query now();
# Query 4: Which license plate numbers belong to vehicles that have passed the points from QueryPoints?
query now();
let Q4OBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopjoin[dataSNcar_TrajBoxNet windowintersectsS[.Prect]
  sort rdup dataSNcar gettuples]
  project [Id, Licence]
  sortby [Id asc, Licence asc]
  krdup [Id, Licence]
consume;

query now();

let Q10hOBA =
  dataSNcar feed projectextend [Licence, Trip; Traj: gline2line(trajectory(.Trip))] {a}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; TripA: mgpoint2mpoint(.Trip), Traj: gline2line(trajectory(.Trip))] {b}
  symmjoin[(.Licence_a # ..Licence_b) and (distance(.Traj_a, ..Traj_b) < 3.0)]
  projectextend[Licence_b, Licence_a; Pos: .Trip_b atperiods (deftime((distance(.TripA_b, mgpoint2mpoint(.Trip_a)) < 3.0) at TRUE))]
  filter [not(isempty(.Pos))]
 consume;

# Query 5: What is the minimum distance between places, where a vehicle with a license from QueryLicences1 and a vehicle with licenses
# from QueryLicence2 have been?1
query now();
let Q5h1OBA =
  QueryLicences1 feed {l1}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l1]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]
consume;

query now();
let Q5h2OBA  =
  QueryLicences2 feed {l2}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l2]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]
consume;

query now();
let Q5OBA =
  Q5h1OBA feed {c1}
  Q5h2OBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
  sortby [Licence_c1 asc, Licence_c2 asc]
consume;


# Query 6: What are the pairs of license plate numbers of "trucks", that have have been as close as 10m or less to each other?
query now();
let Q6h1OBA =
  dataSNcar feed
  filter [.Type = "truck"]
  projectextend [Licence; ptrip: mgpoint2mpoint(.Trip)]
consume;

query now();

let Q6OBA =
  Q6h1OBA feed {c1}
  Q6h1OBA feed {c2}
  symmjoin [.Licence_c1 < ..Licence_c2]
  filter [everNearerThan(.ptrip_c1, .ptrip_c2 , 10.0)]
  project [Licence_c1, Licence_c2]
  sortby [Licence_c1 asc, Licence_c2 asc]
  krdup [Licence_c1, Licence_c2]
consume;

query now();

let Q10iOBA =
  dataSNcar feed
  projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
  projectextend[Licence, Trip; Box: rectangle2(minD(.BBox,1), maxD(.BBox,1),minD(.BBox,2), maxD(.BBox,2))] {a}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend [Licence, TripA; Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0))] {b}
  symmjoin[(.Box_a intersects ..Box_b) and (.Licence_a # ..Licence_b)]
  projectextend [Licence_a, Licence_b; Pos: .Trip_a atperiods (deftime((distance(mgpoint2mpoint(.Trip_a), .TripA_b) < 3.0) at TRUE))]
  filter[not(isempty(.Pos))]
  project [Licence_b, Licence_a, Pos]
  sortby [Licence_b asc, Licence_a asc]
  krdup[Licence_b, Licence_a]
consume;


# Query 7: What are the license plate numbers of the "passenger" cars that  have reached points from QueryPoints first of all "passenger"
# cars  during the complete observation period?
query now();

let Q7OBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]]{a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]]
  sortby [Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]]{b}
  symmjoin [(.Id_a = ..Id_b) and (.FirstTime_a = ..FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

# Query 8: What are the overall traveled distances of the vehicles with license plate numbers from QueryLicences1 during the periods from
# QueryPeriods1?

query now();
let Q8OBA =
  QueryLicences1 feed {l}
  loopsel [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  QueryPeriods1 feed filter[not(isempty(.Period))] {p}
  product
  projectextend [Licence, Period_p; Distance: length(.Trip atperiods .Period_p)]
  sortby [Licence asc, Period_p asc]
consume;

query now();

let Q10jOBA =
  dataSNcar feed
  projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
  projectextend[Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2(minD(.BBox,1), maxD(.BBox,1),minD(.BBox,2), maxD(.BBox,2))] {a}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend [Licence, TripA;  Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0))]{b}
  symmjoin[(.Box_a intersects ..Box_b) and (.Licence_a # ..Licence_b)]
  projectextend [Licence_a, Licence_b; Pos: .Trip_a atperiods (deftime((distance(.TripA_a, .TripA_b) < 3.0) at TRUE))]
  filter[not(isempty(.Pos))]
  sortby [Licence_a asc, Licence_b asc]
  krdup[Licence_a, Licence_b]
consume;

# Query 9: What is the longest distance that was traveled by a vehicle during  each of the periods from QueryPeriods?

query now();

let Q9OBA =
  dataSNcar feed {c}
  QueryPeriods feed filter[not(isempty(.Period))]{p}
  product
  projectextend [Id_p, Period_p, Licence_c; Dist: length(.Trip_c atperiods .Period_p)]
  sortby [Id_p asc, Period_p asc, Dist desc]
  groupby [Id_p, Period_p; Distance: group feed max[Dist]]
  project[Id_p, Period_p, Distance]
  sortby [Id_p asc]
  project [Period_p, Distance]
consume;


# Query 10: When and where did the vehicles with license plate numbers from QueryLicences1 meet other vehicles (distance < 3m) and
# what are the latter licenses?
query now();

let Q10OBA =
  dataSNcar feed
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend[Licence, TripA;Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))]{c1}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
 projectextend[Licence, Trip;  BBox: mgpbbox(.Trip)]
  projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))] {c2}
  symmjoin[.Box_c1 intersects ..Box_c2]
  filter [.Licence_c1 # .Licence_c2]
  filter [everNearerThan(.TripA_c1, .TripA_c2, 3.0)]
  projectextend [Licence_c1, Licence_c2; Pos: .Trip_c2 atperiods deftime((distance(.TripA_c1, .TripA_c2) < 3.0) at TRUE)]
  filter [not(isempty(.Pos))]
  project [Licence_c2, Licence_c1, Pos]
  sortby [Licence_c2 asc, Licence_c1 asc]
consume;


#let Q10mOBA =
#  QueryLicences1 feed
#  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
#  projectextendstream[Licence; Unit: units(.Trip)]
#  projectextend[Licence, Unit; BBox: unitboundingbox(.Unit)]
#  projectextend[Licence; Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0)), Ts: startunitinst(.Unit), Te: endunitinst(.Unit)]
#  loopsel[fun(t:TUPLE) B_NETWORK dataSNcar_MONTree dataSNcar windowtimeintersectsS[attr(t,Box), attr(t,Ts), attr(t,Te)] sort dataSNcar gettuplesdbl[Trip]
#  filter[.Licence # attr(t,Licence)]
#  projectextend[Licence, Trip; Licence_A: attr(t,Licence)]]{c1}
#  loopjoin
#  , Pos: attr(t,Trip) atperiods (deftime((distance(attr(t,TripA), mgpoint2mpoint(.Trip)) < 3.0) at TRUE))]
#  filter[not(isempty(.Pos))]]
#  sortby[Licence asc, Licence_A asc]
#  groupby[Licence, Licence_A; TripC: group feed aggregateB[Trip; fun(M1:mgpoint, M2: mgpoint) M1 union M2; [const mgpoint value()]]]
#  projectextend[Licence_A; Licence_B: .Licence, TripB: mgpoint2mpoint(.TripC)]]
#  loopjoin[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence_B]]
#  projectextend[Licence_A, Licence_B; Pos: .Trip atperiods (deftime((distance(.TripB, mgpoint2mpoint(.Trip)) < 3.0) at TRUE))]
#  filter[not(isempty(.Pos))]
#consume;

# Query 11: Which vehicles passed a point from QueryPoints1 at one of the instants from QueryInstant1?

query now();
let Q11OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id_p: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id_p asc, Instant_i asc, Licence asc]
consume;

# Query 12: Which vehicles met at a point from QueryPoints1 at an instant from QueryInstant1?
query now();
let Q12h1OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id_p: attr(t,Id_p), Pos_p: attr(t,Pos_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id_p asc, Instant_i asc, Licence asc]
consume;

query now();

let Q12OBA =
  Q12h1OBA feed {c1}
  Q12h1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (.Id_p_c1 = ..Id_p_c2) and (.Instant_i_c1 = ..Instant_i_c2)]
  project [Id_p_c1, Pos_p_c1, Instant_i_c1, Licence_c1, Licence_c2]
  sortby [Id_p_c1 asc, Instant_i_c1 asc, Licence_c2 asc]
consume;

query now();

delete Q12h1OBA;

query now();

let Q10kOBA =
  dataSNcar feed projectextend [Licence, Trip; Traj: gline2line(trajectory(.Trip))] {a}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; TripA: mgpoint2mpoint(.Trip), Traj: gline2line(trajectory(.Trip))] {b}
  symmjoin[(.Licence_a # ..Licence_b) and (distance(.Traj_a, ..Traj_b) < 3.0)]
  projectextend[Licence_b, Licence_a; Pos: .Trip_b atperiods (deftime((distance(.TripA_b, mgpoint2mpoint(.Trip_a)) < 3.0) at TRUE))]
  filter [not(isempty(.Pos))]
 consume;


# Query 13: Which vehicles traveled within one of the regions from QueryRegions1 during the periods from QueryPeriods1?

query now();
let Q13OBA =
  QueryRegions1Net feed filter [not(isempty(.Region))] projectextendstream[Id, Region; Rrect: routeintervals(.Region)] {r}
  QueryPeriods1 feed filter[not(isempty(.Period))] {t}
  product
  projectextend [Id_r, Region_r, Period_t; Qrect: box3d(.Rrect_r, .Period_t)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Qrect)]
  sort rdup dataSNcar gettuples
    filter[not(isempty((.Trip atperiods (attr(t,Period_t))) at (attr(t,Region_r))))]
  projectextend [Licence; Id: attr(t,Id_r), Period: attr(t,Period_t)]]
  project[Id, Period, Licence]
  sortby [Id asc, Period asc, Licence asc]
  krdup [Id, Period, Licence]
consume;

# Query 14: Which vehicles traveled within one of the regions from QueryRegions1 at one of the instants from QueryInstant1?
query now();
let Q14OBA =
  QueryRegions1Net feed filter[not(isempty(.Region))]
  projectextendstream[Id, Region; Rrect:  routeintervals(.Region)] {r}
  QueryInstant1 feed {i}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Rrect_r), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
    filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Licence;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;

#  Query 15: Which vehicles passed a point from QueryPoints1 during a period from QueryPeriods1?
query now();
let Q15OBA =
  dataSNcar feed
  QueryPoints1Net feed
  symmjoin [.Trip passes ..Pos]
  projectextend [Id, Licence; Trip: .Trip at .Pos]
  QueryPeriods1 feed {t}
  symmjoin [.Trip present ..Period_t]
  project [Id, Period_t, Licence]
  sortby [Id asc, Period_t asc, Licence asc]
  krdup [Id, Period_t, Licence]
consume;

query now();

let Q10lOBA =
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
  projectextend[Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0)), Ts: inst(initial(.Trip)), Te: inst(final(.Trip))]
  loopsel[fun(t:TUPLE) B_NETWORK dataSNcar_MONTree dataSNcar windowtimeintersectsS[attr(t,Box), attr(t,Ts), attr(t,Te)] sort dataSNcar gettuplesdbl[Trip]
  filter[.Licence # attr(t,Licence)]
  projectextend[Licence; Licence_A: attr(t,Licence), Pos: attr(t,Trip) atperiods (deftime((distance(attr(t,TripA), mgpoint2mpoint(.Trip)) < 3.0) at TRUE))]
  filter[not(isempty(.Pos))]]
consume;  

# Query 16: List the pairs of licenses for vehicles the first from QueryLicences1, the second from QueryLicences2, where the  corresponding
#  vehicles are both present within a Region from QueryRegions1 during a period from QueryPeriod1, but do not meet  each other
#  there and then.

query now();

let Q16h1OBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16h2OBA =
  QueryLicences2 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16OBA =
  Q16h1OBA feed {a}
  Q16h2OBA feed {b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
consume;

#Query 17: Which points from QueryPoints have been visited by a maximum number  of different vehicles?

query now();

let Q17h1OBA =
  dataSNcar feed {c}
  QueryPointsNet feed {p}
  symmjoin [.Trip_c passes ..Pos_p]
  project [Id_p, Licence_c]
  sortby [Id_p, Licence_c]
  krdup [Id_p, Licence_c]
  groupby[Id_p; Hits: group feed count]
consume;

query now();
let Q17OBA =
  Q17h1OBA feed
  filter [.Hits = (Q17h1OBA feed max[Hits])]
  project [Id_p, Hits]
consume;

query now();
delete Q17h1OBA;

#alternative Query
query now();

let Q3aOBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  project [Licence, Trip]
  QueryInstant1 feed {i}
  product
  projectextend[Licence, Instant_i; Pos: val(.Trip atinstant .Instant_i)]
 consume;

query now();

let Q5aOBA =
  Q5h1OBA feed {c1}
  Q5h2OBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
consume;

query now();
delete Q5h1OBA;
delete Q5h2OBA;

query now();

let Q6aOBA =
 Q6h1OBA feed {c1}
  Q6h1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (everNearerThan(.ptrip_c1, ..ptrip_c2 , 10.0))]
  project [Licence_c1, Licence_c2]
  sortby [Licence_c1 asc, Licence_c2 asc]
  krdup [Licence_c1, Licence_c2]
consume;

query now();

delete Q6h1OBA;

query now();

let Q7aOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopjoin [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  project [Licence, Trip]]
  projectextend[Id;Instant: inst(initial(.Trip at .Pos))]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
  sortby[Id_a asc]
 consume;

query now();

let Q8aOBA =
  QueryLicences1 feed {l}
  loopsel [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  QueryPeriods1 feed filter[not(isempty(.Period))] {p}
  product
  projectextend [Licence, Period_p; Distance: length(.Trip atperiods .Period_p)]
consume;

query now();

let Q9aOBA =
  dataSNcar feed {c}
  QueryPeriods feed filter[not(isempty(.Period))]{p}
  product
  projectextend [Id_p, Period_p; Dist: length(.Trip_c atperiods .Period_p)]
  sortby [Id_p asc, Period_p asc, Dist desc]
  groupby [Id_p, Period_p; Distance: group feed max[Dist]]
consume;

query now();

let Q10aOBA =
 dataSNcar feed
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend[Licence, TripA;Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))]{c1}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
 projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
  projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))] {c2}
  symmjoin[(.Box_c1 intersects ..Box_c2) and (.Licence_c1 # ..Licence_c2) and (everNearerThan(.TripA_c1, ..TripA_c2, 3.0))]
  projectextend [Licence_c2, Licence_c1; Pos: .Trip_c2 atperiods deftime((distance(.TripA_c1, .TripA_c2) < 3.0) at TRUE)]
  filter [not(isempty(.Pos))]
consume;

#alternative Query
query now();

let Q11aOBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id asc, Instant_i asc, Licence asc]
consume;

#alternative Query
query now();

let Q12ah1OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]
  sortby [Id asc, Instant asc, Licence asc]
consume;

query now();

let Q12aOBA =
  Q12ah1OBA feed {c1}
  Q12ah1OBA feed {c2}
  symmjoin [(.Id_c1 = ..Id_c2) and (.Instant_c1 = ..Instant_c2) and (.Licence_c1 < ..Licence_c2)]
  project [Id_c1, Instant_c1, Licence_c1, Licence_c2]
  sortby [Id_c1 asc, Instant_c1 asc, Licence_c2 asc]
consume;

query now();

delete Q12ah1OBA;

query now();

let Q13aOBA =
  dataSNcar feed {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
  project[Id_r, Period_p, Licence]
  sortby[Id_r asc, Period_p asc, Licence asc]
consume;

query now();

let Q14aOBA =
QueryRegions1Net feed filter[not(isempty(.Region))]
projectextendstream[Id, Region; Rrect:  routeintervals(.Region)] {r}
  QueryInstant1 feed {i}
  product
  projectextend[Id_r, Region_r,Instant_i; Box: box3d(.Rrect_r, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t, Box)]
  sort rdup dataSNcar gettuples
    filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Licence;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;

query now();

let Q15aOBA =
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {p}
  QueryPeriods1 feed filter[not(isempty(.Period))] {t}
  product
  projectextend[Id_p, Pos_p, Period_t; Box: box3d(.Prect_p, .Period_t)]
  loopsel [fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t, Box)]
  sort rdup dataSNcar gettuples
  filter[(.Trip atperiods (attr(t,Period_t))) passes (attr(t,Pos_p))]
  projectextend[; Id: attr(t,Id_p), Period: attr(t,Period_t), Licence: .Licence]]
  sortby [Id asc, Period asc, Licence asc]
  krdup [Id, Period, Licence]
 consume;

query now();

let Q16aOBA =
  Q16h1OBA feed {a}
  Q16h2OBA feed {b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Period_p_a, Licence_a, Licence_b]
consume;

delete Q16h1OBA;
delete Q16h2OBA;

query now();

let Q5bOBA =
  QueryLicences1 feed {l1}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l1]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]{c1}
  QueryLicences2 feed {l2}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l2]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]{c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
consume;

query now();

let Q17ah1OBA =
  QueryPointsNet feed projectextend [Id, Pos; Prect: gpoint2rect(.Pos)] {p}
  loopsel[fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect_p)]
  sort rdup dataSNcar gettuples
  projectextend[Licence; Id: attr(t, Id_p)]]
  sortby [Id asc, Licence asc]
  krdup [Id, Licence]
  groupby[Id; Hits: group feed count]
 consume;

query now();

let Q17aOBA =
  Q17ah1OBA feed
  filter [.Hits = (Q17ah1OBA feed max[Hits])]
  project [Id, Hits]
consume;

query now();

delete Q17ah1OBA;

query now();

let Q6bh1OBA =
  dataSNcar feed
  filter [.Type = "truck"]
  projectextend [Licence; ptrip: mgpoint2mpoint(.Trip), Traj: gline2line(trajectory(.Trip))]
 consume;

query now();

let Q6bOBA =
  Q6bh1OBA feed {c1}
  Q6bh1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (distance(.Traj_c1, ..Traj_c2) <= 10)]
  filter [everNearerThan(.ptrip_c1, .ptrip_c2 , 10.0)]
  project [Licence_c1, Licence_c2]
  sortby [Licence_c1 asc, Licence_c2 asc]
  krdup [Licence_c1, Licence_c2]
consume;

query now();

let Q7bOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
  sortby[Id_a asc]
 consume;

query now();

let Q10bOBA =
   dataSNcar feed
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend[Licence, TripA; Box: rectangle2(minD(.BBox,1), maxD(.BBox,1),minD(.BBox,2), maxD(.BBox,2))]{c1}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
 projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0))] {c2}
  symmjoin[.Box_c1 intersects ..Box_c2]
  filter [.Licence_c1 # .Licence_c2]
  projectextend [Licence_c1, Licence_c2; Pos: .Trip_c2 atperiods (deftime((distance(.TripA_c1, .TripA_c2) < 3.0) at TRUE))]
  filter [not(isempty(.Pos))]
  project [Licence_c2, Licence_c1, Pos]
  sortby [Licence_c2 asc, Licence_c1 asc]
consume;

query now();

let Q11bOBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
consume;

query now();

let Q12bh1OBA =
QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]
consume;

query now();

let Q12bOBA =
  Q12bh1OBA feed {c1}
  Q12bh1OBA feed {c2}
  symmjoin [(.Id_c1 = ..Id_c2) and (.Instant_c1 = ..Instant_c2) and (.Licence_c1 < ..Licence_c2)]
  project [Id_c1, Instant_c1, Licence_c1, Licence_c2]
consume;

query now();
delete Q12bh1OBA;

query now();

let Q13bOBA =
  QueryRegions1Net feed filter[not(isempty(.Region))]
  projectextendstream[Id, Region; Rrect: routeintervals(.Region)] {r}
  loopsel[fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Rrect_r)]
  sort rdup dataSNcar gettuples
  projectextend[Licence; TripR: .Trip at attr(t,Region_r), Id_r: attr(t,Id_r)]]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.TripR present ..Period_p]
  projectextend[Id_r, Period_p, Licence; Trip: .TripR atperiods .Period_p]
  filter [no_components(.Trip) > 0]
  project[Id_r, Period_p, Licence]
  sortby[Id_r asc, Period_p asc, Licence asc]
  krdup[Id_r, Period_p, Licence]
consume;

query now();

let Q16bOBA =
 QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{a}
  QueryLicences2 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Period_p_a, Licence_a, Licence_b]
consume;

query now();

let Q6cOBA =
  Q6bh1OBA feed {c1}
  Q6bh1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (distance(.Traj_c1, ..Traj_c2) <= 10) and (everNearerThan(.ptrip_c1, ..ptrip_c2 , 10.0))]
  project [Licence_c1, Licence_c2]
  sortby [Licence_c1 asc, Licence_c2 asc]
  krdup [Licence_c1, Licence_c2]
consume;

query now();

let Q7cOBA =
QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
 loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
 consume;

query now();

delete Q6bh1OBA;

query now();

let Q10cOBA =
 dataSNcar feed
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend[Licence, TripA; Box: rectangle2(minD(.BBox,1), maxD(.BBox,1),minD(.BBox,2), maxD(.BBox,2))]{c1}
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip; BBox: mgpbbox(.Trip)]
 projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle2((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0))] {c2}
 symmjoin[(.Box_c1 intersects ..Box_c2) and (.Licence_c1 # ..Licence_c2)]
  projectextend [Licence_c1, Licence_c2; Pos: .Trip_c2 atperiods (deftime((distance(.TripA_c1, .TripA_c2) < 3.0) at TRUE))]
  filter [not(isempty(.Pos))]
consume;

query now();

let Q13cOBA =
  QueryRegions1Net feed filter [not(isempty(.Region))] projectextendstream[Id, Region; Rrect: routeintervals(.Region)] {r}
  QueryPeriods1 feed filter[not(isempty(.Period))] {t}
  product
  projectextend [Id_r, Region_r, Period_t; Qrect: box3d(.Rrect_r, .Period_t)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Qrect)]
  sort rdup dataSNcar gettuples
  filter[not(isempty((.Trip atperiods (attr(t,Period_t))) at (attr(t,Region_r))))]
  projectextend [; Id: attr(t,Id_r), Period: attr(t,Period_t), Licence: .Licence]]
  sortby [Id asc, Period asc, Licence asc]
  krdup [Id, Period, Licence]
consume;

query now();

let Q6dh1OBA =
  dataSNcar feed
  filter [.Type = "truck"]
  projectextend [Licence; ptrip: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend [Licence, ptrip; Box: rectangle3(minD(.BBox,1) - 5.0, maxD(.BBox,1) + 5.0, minD(.BBox,2) - 5.0, maxD(.BBox,2) + 5.0, minD(.BBox,3), maxD(.BBox,3))]
 consume;

query now();

let Q6dOBA =
  Q6dh1OBA feed {a}
  Q6dh1OBA feed {b}
  symmjoin [(.Box_a intersects ..Box_b) and (.Licence_a < ..Licence_b)]
  filter[everNearerThan(.ptrip_a, .ptrip_b, 10.0)]
  project [Licence_a, Licence_b]
  sortby [Licence_a asc, Licence_b asc]
  krdup [Licence_a, Licence_b]
consume;

query now();

let Q7dOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]] {b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [(not(isempty(.Instant))) and (.Instant <= .FirstTime_b)]
  project[Id_a, Licence]
 consume;

query now();

let Q10dOBA =
 QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip;  BBox: mgpbbox(.Trip)]
  projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle3((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0), minD(.BBox,3), maxD(.BBox,3))]{a}
  loopjoin[dataSNcar_SpatioTemp windowintersectsS[.Box_a]
  sort rdup dataSNcar gettuples]
  filter[.Licence_a # .Licence]
  projectextend[Licence_a, Trip_a, TripA_a, Licence; TripB: mgpoint2mpoint(.Trip)]
  projectextend[Licence_a, Trip_a, Licence; Times: deftime((distance(.TripA_a, .TripB) < 3.0) at TRUE)]
  filter [not(isempty(.Times))]
  projectextend [Licence_a, Licence; Pos: .Trip_a atperiods .Times]
  filter [not(isempty(.Pos))]
  project[Licence_a, Licence, Pos]
  sortby [Licence_a asc, Licence asc]
 consume;

query now();

let Q6eOBA =
  Q6dh1OBA feed {a}
  Q6dh1OBA feed {b}
  symmjoin [(.Box_a intersects ..Box_b) and (.Licence_a < ..Licence_b) and (everNearerThan(.ptrip_a, ..ptrip_b, 10.0))]
  project [Licence_a, Licence_b]
  sortby [Licence_a asc, Licence_b asc]
  krdup [Licence_a, Licence_b]
consume;


query now();
delete Q6dh1OBA;

query now();
let Q7eOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]]
  sortby [Id asc, FirstTime asc] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]]
  sortby [Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]]{b}
  symmjoin [(.Id_a = ..Id_b) and (.FirstTime_a <= ..FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

query now();

let Q10eOBA =
  QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip;  BBox: mgpbbox(.Trip)]
  projectextend [Licence, Trip; TripA: mgpoint2mpoint(.Trip), Box: rectangle3((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0), minD(.BBox,3), maxD(.BBox,3))]{a}
  loopjoin[dataSNcar_SpatioTemp windowintersectsS[.Box_a]
  sort rdup dataSNcar gettuples]
  filter[.Licence_a # .Licence]
  projectextend[Licence_a, Trip_a, TripA_a, Licence; TripB: mgpoint2mpoint(.Trip)]
  projectextend[Licence_a, Licence; Pos: .Trip_a atperiods (deftime((distance(.TripA_a, .TripB) < 3.0) at TRUE))]
  filter[not(isempty(.Pos))]
consume;

query now();

let Q7fOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter[.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]
  filter[not(isempty(.FirstTime))]]
  sortby[Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]] {b}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter[.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]
  filter[not(isempty(.FirstTime))]]
  sortby[Id asc, FirstTime asc] {a}
  symmjoin[(.Id_b = ..Id_a) and (..FirstTime_a <= .FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

query now();

let Q10fOBA =
QueryLicences1 feed
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch[.Licence]]
  projectextend[Licence, Trip;  BBox: mgpbbox(.Trip)]
  projectextend [Licence, Trip;TripA: mgpoint2mpoint(.Trip), Box: rectangle3((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0), minD(.BBox,3), maxD(.BBox,3))]{a}
  loopjoin[dataSNcar_SpatioTemp windowintersectsS[.Box_a]
  sort rdup dataSNcar gettuples]
  filter[.Licence_a # .Licence]
  projectextend[Licence_a, Licence; Pos: .Trip_a atperiods (deftime((distance(.TripA_a, mgpoint2mpoint(.Trip)) < 3.0) at TRUE))]
  filter[not(isempty(.Pos))]
consume;

query now();

let EVAL_SEC2COMMANDS_NETOBA = SEC2COMMANDS feed consume;

save EVAL_SEC2COMMANDS_NETOBA to 'NetworkOBARunTimes.DAT';

delete EVAL_SEC2COMMANDS_NETOBA;

close database;
