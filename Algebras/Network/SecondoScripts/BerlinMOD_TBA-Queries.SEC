######################################################################
## File: TBA-CR-Queries         ######################################
######################################################################
##  This file is part of SECONDO.
##
##  Copyright (C) 2007, University in Hagen, Faculty of Mathematics and
##  Computer Science, Database Systems for New Applications.
##
##  SECONDO is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  SECONDO is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with SECONDO; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
######################################################################

## This file performs the TBA-Queries of the BerlinMOD benchmark
## in the Secondo DBMS.

open database berlinmod;
#############################################################
#############################################################
# All TBA/CR - queries

query now();
#############################################################
# A - 1
let TBACRres001 = QueryLicences feed {O}
  loopjoin[ dataMCcar_Licence_btree dataMCcar exactmatch[.Licence_O] ]
  project[Licence, Model] consume;

query now();
#############################################################
# B - 2
let TBACRres002 =
  dataMCcar feed filter [.Type = "passenger"] count;

query now();
#############################################################
# C - 3
let TBACRres003 =
  QueryLicences feed head[10] {LL}
  loopsel[dataMCcar_Licence_btree dataMCcar exactmatch[.Licence_LL]
          project[Licence, Moid] {LL}]
  loopjoin[dataMCtrip_Moid_btree dataMCtrip
           exactmatch[.Moid_LL]]
  QueryInstants feed head[10] {II}
  symmjoin[.Trip present ..Instant_II]
  projectextend[; Licence: .Licence_LL, Instant: .Instant_II,
                  Pos: val(.Trip atinstant .Instant_II)]
  sortby[Instant asc, Licence asc]
  consume;

query now();
#############################################################
# D - 4
let TBACRres004 = QueryPoints feed
  loopjoin[ dataMCtrip_Trip_sptuni
            windowintersectsS[bbox(.Pos)] sort rdup
            dataMCtrip gettuples]
  filter[.Trip passes .Pos] project[Id, Moid]
  loopsel[fun(t1: TUPLE)
          dataMCcar_Moid_btree dataMCcar exactmatch[attr(t1,Moid)]
          projectextend[Moid; Id: attr(t1,Id), Licence: .Licence]]
  sortby[Id asc, Licence asc] krdup[Id, Licence] project[Id, Licence] consume;

query now();
#############################################################
# E - 5
let TBACRres005Traj1 =
  QueryLicences feed head[10] project[Licence] {LL1}
  loopsel[ fun(t:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(t,Licence_LL1)] {CAR}
    loopsel[dataMCtrip_Moid_btree dataMCtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj:
      simplify(trajectory(.Trip),0.000001)]
    aggregateB[Traj; fun(L1: line, L2: line)
      union_new(L1,L2); [const line value ()]]
    feed namedtransformstream[Traj]
    extend[Licence: attr(t,Licence_LL1)]
  ]
  consume;

let TBACRres005Traj2 =
  QueryLicences feed head[20] filter[.Id >10] {LL1}
  loopsel[ fun(t:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(t,Licence_LL1)] {CAR}
    loopsel[dataMCtrip_Moid_btree dataMCtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj:
      simplify(trajectory(.Trip),0.000001)]
    aggregateB[Traj; fun(L1: line, L2: line)
      union_new(L1,L2); [const line value ()]]
    feed namedtransformstream[Traj]
    extend[Licence: attr(t,Licence_LL1)]
  ]
  consume;

let TBACRres005 = TBACRres005Traj1 feed {LL1}
  TBACRres005Traj2 feed {LL2}
  product
  projectextend[ ; Licence1: .Licence_LL1,
    Licence2: .Licence_LL2, Dist:
    distance(.Traj_LL1, .Traj_LL2)
  ]
  consume;

delete TBACRres005Traj1;
delete TBACRres005Traj2;

query now();

#############################################################
# F - 6
let TBACRres006BBoxMtrip =
  dataMCcar feed filter[.Type = "truck"]
  project[Licence, Moid]
  loopsel[fun(t: TUPLE)
    dataMCtrip_Moid_btree dataMCtrip exactmatch[attr(t,Moid)]
    projectextend[Trip, Moid; BBox: bbox(.Trip), Licence: attr(t,Licence)]
    projectextend[Moid, Licence, Trip, BBox; Box:
    rectangle2((minD(.BBox,1) - 5.0),
      (maxD(.BBox,1) + 5.0),
      (minD(.BBox,2) - 5.0),
      (maxD(.BBox,2) + 5.0))
    ]
  ]
  consume;

query now();
let TBACRres006 =
  TBACRres006BBoxMtrip feed {C1}
  TBACRres006BBoxMtrip feed {C2}
  spatialjoin[Box_C1, Box_C2]
  filter[ .Moid_C1 < .Moid_C2 ]
  filter[ everNearerThan(.Trip_C1, .Trip_C2, 10.0) ]
  projectextend[ ; Licence1: .Licence_C1,
                   Licence2: .Licence_C2 ]
  sort rdup consume;

query now();

delete TBACRres006BBoxMtrip;

query now();
#############################################################
# G - 7
let TBACRres007PointMinInst2 =
  QueryPoints feed project[Pos]
  loopjoin[ fun(t:TUPLE)
    dataMCtrip_Trip_sptuni
    windowintersectsS[bbox(attr(t,Pos))]
    sort rdup dataMCtrip gettuples
    filter[.Trip passes attr(t,Pos)]
    loopjoin[ dataMCcar_Moid_btree dataMCcar exactmatch[.Moid]
      filter[.Type = "passenger"] project[Licence] {X} ]
    projectextend[ ; TimeAtPos: inst(initial(
      .Trip at attr(t,Pos)))]
    min[TimeAtPos] feed namedtransformstream[FirstTime]
    filter[not(isempty(.FirstTime))]
  ]
  consume;

query now();

let TBACRres007 =
  TBACRres007PointMinInst2 feed
  loopjoin[ fun(t:TUPLE)
    dataMCtrip_Trip_sptmpuni windowintersectsS[box3d(bbox(attr(t,Pos)), attr(t,FirstTime))]
    sort rdup dataMCtrip gettuples
    filter[val(.Trip atinstant attr(t,FirstTime)) = attr(t,Pos)]
    loopsel[fun(t2: TUPLE)
      dataMCcar_Moid_btree dataMCcar exactmatch[attr(t2,Moid)]
      filter[.Type = "passenger"] project[Licence, Moid]]
  ]
  project[ Pos, Licence, Moid ] sort rdup project[Pos, Licence] consume;

query now();

delete TBACRres007PointMinInst2;

query now();
#############################################################
# H - 8
let TBACRres008 =
  QueryPeriods  feed head[10]
  QueryLicences feed head[10] project[Licence]
  product
  loopsel[ fun(t:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(t,Licence)] {CAR}
    extend[Dist: round(
      dataMCtrip_Moid_btree dataMCtrip exactmatch[.Moid_CAR]
      filter[.Trip present attr(t,Period)]
      projectextend[;L: length(.Trip atperiods attr(t,Period))]
      sum[L], 3)]
    projectextend[; Licence: attr(t,Licence), Period: attr(t,Period), Dist: .Dist]
  ]
  consume;


query now();
#############################################################
# I - 9
let TBACRres009 =
  QueryPeriods feed extend[ PeriodBox: queryrect2d(
    minimum(.Period)) union queryrect2d(maximum(.Period))]
  loopjoin[ fun(t:TUPLE)
    dataMCtrip_Trip_tmpuni windowintersectsS[ attr(t,PeriodBox) ] sort rdup
    dataMCtrip gettuples
    projectextend[Moid; TripOdo:
      length(.Trip atperiods attr(t,Period))]
    filter[.TripOdo > 0]
    sortby[Moid asc]
    groupby[Moid; Length: round(group feed sum[TripOdo],3)]
  ]
  groupby[Id, Period; Dist: group feed max[Length]]
  project[Period, Dist] consume;

query now();
#############################################################
# J - 10


let TBACRres010 =
  QueryLicences feed head[10] project[Licence] {V1}
  loopsel[ fun(t:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(t,Licence_V1)]
    project[Moid]
    loopjoin[dataMCtrip_Moid_btree dataMCtrip exactmatch[.Moid] remove[Moid]] {V3}
    extend[t3bbx: bbox(.Trip_V3)]
    loopjoin[ fun(u:TUPLE)
      dataMCtrip_Trip_sptmpuni
      windowintersectsS[rectangle3(
        minD(attr(u,t3bbx),1) - 3.0,
        maxD(attr(u,t3bbx),1) + 3.0,
        minD(attr(u,t3bbx),2) - 3.0,
        maxD(attr(u,t3bbx),2) + 3.0,
        minD(attr(u,t3bbx),3),
        maxD(attr(u,t3bbx),3))
      ] sort rdup
      dataMCtrip gettuples
      filter[.Moid # attr(u, Moid_V3)]
      filter[everNearerThan(attr(u, Trip_V3), .Trip, 3.0)]
      projectextend[Moid; Times: deftime((distance(attr(u, Trip_V3), .Trip) < 3.0) at TRUE)]
      filter[not(isempty(.Times))]
      sortby[Moid]
      groupby[Moid; Times1: group feed
        aggregateB[Times; fun(P1:periods, P2:periods)
          P1 union P2; [const periods value ()]
        ]
      ]
      loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
    ]
    projectextend[Moid_V3, Moid, Times1, Trip_V3; QueryLicence:
      attr(t, Licence_V1), OtherLicence: .Licence]
    sortby[Moid_V3, Moid, QueryLicence, OtherLicence]
    groupby[Moid_V3, Moid, QueryLicence, OtherLicence; AllTimes: group feed
        aggregateB[Times1;fun(P3:periods,P4:periods)
          P3 union P4; [const periods value ()]
        ],
      AllTrips: group feed
        projectextend[Trip_V3;Start: inst(initial(.Trip_V3))]
        sortby[Start]
        projecttransformstream[Trip_V3]
        concatS
    ]
    projectextend[QueryLicence,OtherLicence; Pos:
      .AllTrips atperiods .AllTimes]
  ]
  consume;

query now();
#############################################################
# K - 11
let TBACRres011 =
  QueryPoints feed head[10] project[Pos] {PP}
  QueryInstants feed head[10] project[Instant] {II}
  product
  loopjoin[ fun(t:TUPLE)
    dataMCtrip_Trip_sptmpuni
    windowintersectsS[box3d(bbox(attr(t,Pos_PP)),
                            attr(t,Instant_II))]
    sort rdup dataMCtrip gettuples
    filter[.Trip present attr(t,Instant_II)]
    projectextend[Moid; XPos:
      val(.Trip atinstant attr(t,Instant_II))]
    filter[not(isempty(.XPos))]
    filter[distance(.XPos,attr(t,Pos_PP)) < 0.5]
    project[Moid] sort rdup
  ]
  loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
  projectextend[Licence; Pos: .Pos_PP, Instant: .Instant_II]
  consume;

query now();
#############################################################
# L - 12
let TBACRres012 =
  QueryPoints feed head[10] project[Pos]
  QueryInstants feed head[10] project[Instant]
  product
  loopsel[ fun(t: TUPLE)
    dataMCtrip_Trip_sptmpuni windowintersectsS[box3d( bbox(attr(t,Pos)), attr(t,Instant))]
    sort rdup {A}
    dataMCtrip_Trip_sptmpuni windowintersectsS[box3d( bbox(attr(t,Pos)), attr(t,Instant))]
    sort rdup {B}
    symmjoin[.id_A # ..id_B]
    dataMCtrip gettuples2[id_A] {C}
    dataMCtrip gettuples2[id_B_C]
    filter[.Moid < .Moid_C]
    filter[no_components(intersection(.Trip, .Trip_C)) > 0]
    project[Moid, Moid_C]
    sort rdup
    loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
    loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid_C] project[Licence] {C}]
    projectextend[ ; Pos_V2: attr(t,Pos),
      Instant: attr(t,Instant),
      Licence1: .Licence, Licence2: .Licence_C]
  ]
  consume;

query now();
#############################################################
# M - 13
let TBACRres013 =
  QueryRegions feed head[10] filter[not(isempty(.Region))]{RR}
  QueryPeriods feed head[10] filter[not(isempty(.Period))]{PP}
  product
  loopsel [ fun(t:TUPLE)
    dataMCtrip_Trip_sptmpuni windowintersectsS[box3d(
      bbox(attr(t,Region_RR)),attr(t,Period_PP))]
    sort rdup dataMCtrip gettuples
    filter[(.Trip atperiods attr(t,Period_PP))
      passes attr(t,Region_RR)
    ]
    project[Moid] sort rdup
    loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
    projectextend[;Region: attr(t,Region_RR), Period: attr(t,Period_PP), Licence: .Licence]
  ]
  consume;

query now();
#############################################################
# M1 - 14
let TBACRres014 =
  QueryRegions  feed head[10] {RR}
  QueryInstants feed head[10] {II} product
  loopsel [ fun(t:TUPLE)
    dataMCtrip_Trip_sptmpuni windowintersectsS[box3d(
      bbox(attr(t,Region_RR)),attr(t,Instant_II))]
    sort rdup dataMCtrip gettuples
    filter[.Trip present attr(t,Instant_II)]
    filter[val(.Trip atinstant attr(t,Instant_II))
      inside attr(t,Region_RR)
    ]
    project[Moid] sort rdup
    loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
    projectextend[;Region: attr(t,Region_RR), Instant: attr(t,Instant_II), Licence: .Licence]
  ]
  consume;

query now();
#############################################################
# M2 - 15
let TBACRres015 =
  QueryPoints  feed head[10] {PO}
  QueryPeriods feed head[10] {PR} product
  loopsel [ fun(t:TUPLE)
    dataMCtrip_Trip_sptmpuni windowintersectsS[
      box3d(bbox(attr(t,Pos_PO)),attr(t,Period_PR))
    ]
    sort rdup dataMCtrip gettuples
    filter[.Trip present attr(t,Period_PR)]
    filter[(.Trip atperiods
      attr(t,Period_PR)) passes attr(t,Pos_PO)
    ]
    project[Moid] sort rdup
    loopjoin[dataMCcar_Moid_btree dataMCcar exactmatch[.Moid] project[Licence]]
    projectextend[; Point: attr(t,Pos_PO),
      Period: attr(t,Period_PR),Licence: .Licence]
  ]
  consume;

query now();
#############################################################
# N - 16
let TBACRres016CandidateTrips1 =
  QueryRegions feed head[10] {RR}
  QueryPeriods feed head[10] {PP}
  product
  extend[QBox: box3d(bbox(.Region_RR), .Period_PP)]
  QueryLicences feed head[10] {LL}
  product
  loopjoin[ fun(tt1:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(tt1,Licence_LL)] project[Moid]
    loopsel[dataMCtrip_Moid_btree exactmatchS[.Moid]]
    sort {L}
    dataMCtrip_Trip_sptmpuni
    windowintersectsS[attr(tt1,QBox)]
    sort rdup {W}
    mergejoin[id_L, id_W]
    dataMCtrip gettuples2[id_L]
    filter[ .Trip present attr(tt1,Period_PP) ]
    filter[ .Trip passes  attr(tt1,Region_RR) ]
    projectextend[Moid; Trip: (.Trip atperiods
      attr(tt1,Period_PP)) at attr(tt1,Region_RR)]
    filter[no_components(.Trip) > 0]
  ]
  projectextend[Id_RR, Id_PP, Region_RR, Period_PP,
    Trip, Moid; Licence: .Licence_LL]
  consume;

query now();

let TBACRres016CandidateTrips2 =
  QueryRegions feed head[10] {RR}
  QueryPeriods feed head[10] {PP}
  product
  extend[QBox: box3d(bbox(.Region_RR), .Period_PP)]
  QueryLicences feed head[20] filter[.Id > 10] {LL}
  product
  loopjoin[ fun(tt1:TUPLE)
    dataMCcar_Licence_btree dataMCcar exactmatch[attr(tt1,Licence_LL)] project[Moid]
    loopsel[dataMCtrip_Moid_btree exactmatchS[.Moid]]
    sort {L}
    dataMCtrip_Trip_sptmpuni
    windowintersectsS[attr(tt1,QBox)]
    sort rdup {W}
    mergejoin[id_L, id_W]
    dataMCtrip gettuples2[id_L]
    filter[ .Trip present attr(tt1,Period_PP) ]
    filter[ .Trip passes  attr(tt1,Region_RR) ]
    projectextend[Moid; Trip: (.Trip atperiods
      attr(tt1,Period_PP)) at attr(tt1,Region_RR)]
    filter[no_components(.Trip) > 0]
  ]
  projectextend[Id_RR, Id_PP, Region_RR, Period_PP,
    Trip, Moid; Licence: .Licence_LL]
  consume;

query now();

### Increased Tolerance to 0.1m
let TBACRres016 =
  TBACRres016CandidateTrips1 feed {C1}
  TBACRres016CandidateTrips2 feed {C2}
  symmjoin[ (.Moid_C1 # ..Moid_C2)
    and (.Id_RR_C1 = ..Id_RR_C2)
    and (.Id_PP_C1 = ..Id_PP_C2)
  ]
  filter[ not(everNearerThan(.Trip_C1, .Trip_C2, 0.1)) ]
  projectextend[Moid_C1, Moid_C2 ; Licence1: .Licence_C1,
    Licence2: .Licence_C2, Region: .Region_RR_C1, Period:
    .Period_PP_C1, Id_RR: .Id_RR_C1, Id_PP: .Id_PP_C1 ]
  sortby[Id_RR, Id_PP, Moid_C1, Moid_C2]
  krdup[Id_RR, Id_PP, Moid_C1, Moid_C2]
  project[Region, Period, Licence1, Licence2] consume;

delete TBACRres016CandidateTrips1;
delete TBACRres016CandidateTrips2;

query now();
#############################################################
# O - 17
let TBACRres017PosCount2 =
  QueryPoints feed project[Pos]
  loopjoin[ fun(t:TUPLE)
    dataMCtrip_Trip_sptuni
    windowintersectsS[bbox(attr(t,Pos))]
    sort rdup dataMCtrip gettuples
    filter[.Trip passes attr(t,Pos)]
    project[Moid]
    sort rdup
    count feed namedtransformstream[Hits]
  ]
  sortby[Hits desc, Pos asc] consume;
query now();

let TBACRres017 =
  (TBACRres017PosCount2 feed head[1] extract[Hits]) within
  [ fun(MaxHits: int)
    TBACRres017PosCount2 feed filter[.Hits = MaxHits ] tconsume
  ] feed consume;

delete TBACRres017PosCount2

query now();
#############################################################
#############################################################
let EVAL_SEC2COMMANDS_BACKUP04 = SEC2COMMANDS feed consume;
save EVAL_SEC2COMMANDS_BACKUP04 to 'BerlinMOD020TBARunTimesRun1.DAT';
close database;

