open database berlinmod;

query now();

# Query 3: Where have the vehicles with licenses from QueryLicence1 been at each instant from QueryInstant1?
query now();

let Q3OBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  project [Licence, Trip]
  QueryInstant1 feed {i}
  product
  projectextend[Licence, Instant_i; Pos: val(.Trip atinstant .Instant_i)]
  sortby[Licence asc, Instant_i asc]
 consume;


# from QueryLicence2 have been?1
query now();
let Q5h1OBA =
  QueryLicences1 feed {l1}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l1]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]
consume;

query now();
let Q5h2OBA  =
  QueryLicences2 feed {l2}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l2]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]
consume;

query now();
let Q5OBA =
  Q5h1OBA feed {c1}
  Q5h2OBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
  sortby [Licence_c1 asc, Licence_c2 asc]
consume;


# cars  during the complete observation period?
query now();

let Q7OBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]]{a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]]
  sortby [Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]]{b}
  symmjoin [(.Id_a = ..Id_b) and (.FirstTime_a = ..FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;


# Query 11: Which vehicles passed a point from QueryPoints1 at one of the instants from QueryInstant1?

query now();
let Q11OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id_p: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id_p asc, Instant_i asc, Licence asc]
consume;

# Query 12: Which vehicles met at a point from QueryPoints1 at an instant from QueryInstant1?
query now();
let Q12h1OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id_p: attr(t,Id_p), Pos_p: attr(t,Pos_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id_p asc, Instant_i asc, Licence asc]
consume;

query now();

let Q12OBA =
  Q12h1OBA feed {c1}
  Q12h1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (.Id_p_c1 = ..Id_p_c2) and (.Instant_i_c1 = ..Instant_i_c2)]
  project [Id_p_c1, Pos_p_c1, Instant_i_c1, Licence_c1, Licence_c2]
  sortby [Id_p_c1 asc, Instant_i_c1 asc, Licence_c2 asc]
consume;

query now();

delete Q12h1OBA;

query now();

# Query 14: Which vehicles traveled within one of the regions from QueryRegions1 at one of the instants from QueryInstant1?
query now();
let Q14OBA =
  QueryRegions1Net feed filter[not(isempty(.Region))]
  projectextendstream[Id, Region; Rrect:  routeintervals(.Region)] {r}
  QueryInstant1 feed {i}
  product
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[box3d(attr(t,Rrect_r), attr(t,Instant_i))]
  sort rdup dataSNcar gettuples
    filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Licence;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;

#  vehicles are both present within a Region from QueryRegions1 during a period from QueryPeriod1, but do not meet  each other
#  there and then.

query now();

let Q16h1OBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16h2OBA =
  QueryLicences2 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16OBA =
  Q16h1OBA feed {a}
  Q16h2OBA feed {b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
consume;

#alternative Query
query now();

let Q3aOBA =
  QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]]
  project [Licence, Trip]
  QueryInstant1 feed {i}
  product
  projectextend[Licence, Instant_i; Pos: val(.Trip atinstant .Instant_i)]
 consume;

query now();

let Q5aOBA =
  Q5h1OBA feed {c1}
  Q5h2OBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
consume;

query now();
delete Q5h1OBA;
delete Q5h2OBA;

query now();

let Q7aOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopjoin [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  project [Licence, Trip]]
  projectextend[Id;Instant: inst(initial(.Trip at .Pos))]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
  sortby[Id_a asc]
 consume;

query now();


let Q11aOBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
  sortby [Id asc, Instant_i asc, Licence asc]
consume;

#alternative Query
query now();

let Q12ah1OBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]
  sortby [Id asc, Instant asc, Licence asc]
consume;

query now();

let Q12aOBA =
  Q12ah1OBA feed {c1}
  Q12ah1OBA feed {c2}
  symmjoin [(.Id_c1 = ..Id_c2) and (.Instant_c1 = ..Instant_c2) and (.Licence_c1 < ..Licence_c2)]
  project [Id_c1, Instant_c1, Licence_c1, Licence_c2]
  sortby [Id_c1 asc, Instant_c1 asc, Licence_c2 asc]
consume;

query now();

delete Q12ah1OBA;

query now();


let Q14aOBA =
QueryRegions1Net feed filter[not(isempty(.Region))]
projectextendstream[Id, Region; Rrect:  routeintervals(.Region)] {r}
  QueryInstant1 feed {i}
  product
  projectextend[Id_r, Region_r,Instant_i; Box: box3d(.Rrect_r, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t, Box)]
  sort rdup dataSNcar gettuples
    filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Licence;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;

query now();

let Q16aOBA =
  Q16h1OBA feed {a}
  Q16h2OBA feed {b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Period_p_a, Licence_a, Licence_b]
consume;

delete Q16h1OBA;
delete Q16h2OBA;

query now();

let Q5bOBA =
  QueryLicences1 feed {l1}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l1]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]{c1}
  QueryLicences2 feed {l2}
  loopsel[dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l2]
  projectextend[Licence; TrajLine: gline2line(trajectory(.Trip))]]{c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
consume;

query now();


let Q7bOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
  sortby[Id_a asc]
 consume;

query now();


let Q11bOBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant_i: attr(t,Instant_i)]]
consume;

query now();

let Q12bh1OBA =
QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend[Id_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataSNcar_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataSNcar gettuples
  projectextend [Licence; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]
consume;

query now();

let Q12bOBA =
  Q12bh1OBA feed {c1}
  Q12bh1OBA feed {c2}
  symmjoin [(.Id_c1 = ..Id_c2) and (.Instant_c1 = ..Instant_c2) and (.Licence_c1 < ..Licence_c2)]
  project [Id_c1, Instant_c1, Licence_c1, Licence_c2]
consume;

query now();
delete Q12bh1OBA;

query now();


let Q16bOBA =
 QueryLicences1 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{a}
  QueryLicences2 feed {l}
  loopjoin [dataSNcar_Licence_btree dataSNcar exactmatch [.Licence_l]] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))] {r}
  symmjoin[.Trip_c passes ..Region_r]
  projectextend[Licence_c, Id_r, Region_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Region_r, Id_p, Period_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Period_p_a, Licence_a, Licence_b]
consume;

query now();


let Q7cOBA =
QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]]{b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
 loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [not(isempty(.Instant))]
  filter[.Instant <= .FirstTime_b]
  project[Id_a, Licence]
 consume;

query now();


let Q7dOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[; Id: attr(t,Id) , Instant: inst(initial(.Trip at attr(t,Pos)))]]
  filter[not(isempty(.Instant))]
  sortby[Id asc, Instant asc]
  groupby[Id; FirstTime: group feed min[Instant]] {b}
  symmjoin [.Id_a = ..Id_b]
  projectextend [Id_a, FirstTime_b, Pos_a; MBR: box3d(.Prect_a, .FirstTime_b)]
  loopjoin[dataSNcar_BoxNet_timespace windowintersectsS[.MBR]
  sort rdup dataSNcar gettuples]
  filter[.Type = "passenger"]
  projectextend[Licence, FirstTime_b, Id_a; Instant: inst(initial(.Trip at .Pos_a))]
  filter [(not(isempty(.Instant))) and (.Instant <= .FirstTime_b)]
  project[Id_a, Licence]
 consume;

query now();


query now();
let Q7eOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]]
  sortby [Id asc, FirstTime asc] {a}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel [fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter [.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]]
  sortby [Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]]{b}
  symmjoin [(.Id_a = ..Id_b) and (.FirstTime_a <= ..FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

query now();


let Q7fOBA =
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataSNcar gettuples
  filter[.Type = "passenger"]
  projectextend[Licence; Id: attr(t,Id), FirstTime: inst(initial(.Trip at attr(t,Pos)))]
  filter[not(isempty(.FirstTime))]]
  sortby[Id asc, FirstTime asc]
  groupby[Id; FirstTime: group feed min[FirstTime]] {b}
  QueryPointsNet feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(s:TUPLE) dataSNcar_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataSNcar gettuples
  filter[.Type = "passenger"]
  projectextend[Licence; Id: attr(s,Id), FirstTime: inst(initial(.Trip at attr(s,Pos)))]
  filter[not(isempty(.FirstTime))]]
  sortby[Id asc, FirstTime asc] {a}
  symmjoin[(.Id_b = ..Id_a) and (..FirstTime_a <= .FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

query now();


let EVAL_SEC2COMMANDS_NETOBA = SEC2COMMANDS feed consume;

save EVAL_SEC2COMMANDS_NETOBA to 'NetworkOBARunTimes.DAT';

delete EVAL_SEC2COMMANDS_NETOBA;

close database;
