open database berlinmod;
# Query 1: What are the models of the vehicles with license plate numbers from QueryLicence?
query now();
let Q1TBA =
  dataMcar feed {c}
  QueryLicences feed {l}
  symmjoin [.Licence_c = ..Licence_l]
  project [Licence_c, Model]
consume;

query now();
# Query 2: How many vehicles exit that are passenger cars?
query now();
let Q2TBA =
  dataMcar feed
  filter [.Type = "passenger"]
count;

query now();
# Query 3: Where have the vehicles with licenses from QueryLicence1 been at each  instant from QueryInstant1?
query now();

let Q3TBA =
  dataMcar feed 
  QueryLicences1 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = ..Moid_c]
  QueryInstant1 feed 
  symmjoin [.Trip_c present ..Instant]
  projectextend[Instant, Licence; Pos: val(.Trip_c atinstant .Instant)]
consume;

query now();

# Query 4: Which license plate numbers belong to vehicles that have passed the points from QueryPoints?

query now();

let Q4TBA =
  dataMNtrip feed
  QueryPointsNet feed 
  symmjoin[.Trip passes ..Pos]
  project[Id, Moid]
  dataMcar feed {m}
  symmjoin[.Moid = ..Moid_m]
  projectd[Id, Licence_m]
  sortby [Id asc, Licence asc]
  krdup[Id, Licence]
consume;

query now();

# Query 5: What is the minimum distance between places, where a vehicle with a license from QueryLicences1 and a vehicle with Licenses
# from QueryLicence2 have been?

query now();

let Q5h1TBA =
  dataMcar feed 
  QueryLicences1 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = ..Moid_c]
  projectextend[Licence;Traj: trajectory(.Trip_c)]
  sortby[Licence asc]
  groupby[Licence; Traxj: group feed 
  aggregateB[Traj; fun(L1: gline, L2: gline)
     L1 union L2; [const gline value ()]]
  projectextend[Licence; Trax: gline2line(.Traxj)]
  consume;

query now();

let Q5h2TBA =
  dataMcar feed 
  QueryLicences2 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = ..Moid_c]
  projectextend[Licence;Traj: trajectory(.Trip_c)]
  sortby[Licence asc]
  groupby[Licence; Traxj: group feed 
  aggregateB[Traj; fun(L1: gline, L2: gline)
     L1 union L2; [const gline value ()]]
  projectextend[Licence; Trax: gline2line(.Traxj)]
  consume;

query now();

let Q5TBA =
  Q5h1TBA feed {c1}
  Q5h2TBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.Trax_c1, .Trax_c2)]
consume;

query now();

delete Q5h1TBA;
delete Q5h2TBA;

# Query 6: What are the pairs of license plate numbers of "trucks", that have been as close as 10m or less to each other?

#query now();

query now();

let Q6h1TBA =
  dataMcar feed filter [.Type = "truck"]
  project [Licence, Moid] {c}
  dataMNtrip feed
  symmjoin[.Moid_c = ..Moid]
  projectextend [Licence_c; BBox: mgpbbox(.Trip), ptrip: mgpoint2mpoint(.Trip)]
  projectextend[Licence_c, ptrip; Box: rectangle3(
    (minD(.BBox,1) - 5.0), (maxD(.BBox,1) + 5.0), (minD(.BBox,2) - 5.0), (maxD(.BBox,2) + 5.0), minD(.BBox,3), maxD(.BBox,3))]
consume;

query now();

let Q6TBA =
  Q6bh1TBA feed {c1}
  Q6bh1TBA feed {c2}
  symmjoin[(.Box_c1 intersects ..Box_c2) and (.Licence_c1 < ..Licence_c2) and (everNearerThan(.ptrip_c1, .ptrip_c2, 10.0))]
  project [Licence_c1, Licence_c2]
  sortby [Licence_c1 asc, Licence_c2 asc]
  krdup [Licence_c1, Licence_c2]
consume;

query now();
delete Q6h1TBA;


# Query 7: What are the license plate numbers of the "passenger" cars that  have reached points from QueryPoints first of all "passenger"
# cars  during the complete observation period?
query now();

query now();

let Q7h1TBA =
  dataMNtrip feed
  QueryPointsNet feed 
  symmjoin[.Trip passes ..Pos]
  project[Id, Moid; TimeAtPos: inst(initial(.Trip at .Pos))]
  dataMcar feed {m}
  symmjoin[(.Moid = ..Moid_m) and (..Type = "passenger")]
  project[Id, Licence_m, TimeAtPos]
  sortby [Id asc, TimeAtPos asc]
consume;

query now();
let Q7h2TBA =
  Q7h1TBA feed
    groupby [Id; FirstTime: group feed min[TimeAtPos]]
  consume;

query now();

let Q7TBA =
  Q7h1TBA feed {a}
  Q7h2TBA feed {b}
  symmjoin[(.Id_a = ..Id_b) and (.TimeAtPos_a <= ..FirstTime_b)]
  project [Id_a, Licence_m]
  sortby [Id_a asc, Licence_m_a asc]
  krdup [Id_a, Licence_m_a]
 consume;

delete Q7h1TBA;
delete Q7h2TBA;


# Query 8: What are the overall traveled distances of the vehicles with  license plate numbers from QueryLicences1 during the periods from
# QueryPeriods1?
query now();

let Q8TBA =
  dataMcar feed
  QueryLicences1 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = .Moid_c]
  QueryPeriods1 feed filter[not(isempty(.Period))]
  symmjoin [.Trip present ..Period]
  projectextend [Licence, Period, Id; Distance: length(.Trip_c atperiods .Period)]
  sortby [Id asc, Licence asc, Distance desc]
  groupby[Id, Period, Licence; Dist: group feed sum[Distance]]
  project[Licence, Period, Dist]
consume;

query now();
# Query 9: What is the longest distance that was traveled by a vehicle during  each of the periods from QueryPeriods?
query now();

let Q9TBA =
  dataMNtrip feed {c}
  QueryPeriods feed
  filter[not(isempty(.Period))]{p}
  symmjoin[.Trip_c present ..Period_p]
  projectextend [Moid_c, Id_p, Period_p; Distance: length(.Trip_c atperiods .Period_p)]
  sortby [Id_p asc, Moid_c asc, Distance desc]
  groupby[Period_p, Moid_c; Dist: group feed sum[Distance]]
  groupby[Period_p; Dista: group feed max[Dist]]
  project[Period_p, Dista]
consume;

query now();

# Query 10: When and where did the vehicles with license plate numbers from QueryLicences1 meet other vehicles (distance < 3m) and
#   what are the latter licenses?
query now();

let Q10h1TBA =
  dataMcar feed 
  QueryLicences1 feed {l}
  symmjoin[.Licence = ..Licence_l] {a}
  dataMNtrip feed
  symmjoin[.Moid_a = ..Moid]
  projectextend [Trip, Licence_a, Moid; ptrip: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend[Licence, Moid, Trip, ptrip; Box3: rectangle3((minD(.BBox,1) - 3.0), (maxD(.BBox,1) + 3.0), (minD(.BBox,2) - 3.0), (maxD(.BBox,2) + 3.0), minD(.BBox,3), maxD(.BBox,3))]
consume;

query now();

let Q10h2TBA =
  dataMNtrip feed
  projectextend [Moid; ptrip: mgpoint2mpoint(.Trip), Box3: mgpbbox(.Trip)]
consume;

query now();

let Q10TBA =
  Q10h2TBA feed {c2}
  Q10h1TBA feed {c1}
  symmjoin [(.Box3_c2 intersects ..Box3_c1) and (..Moid_c2 # .Moid_c1)]
  projectextend [Licence_c1, Moid_c2, Trip_c1; Pos: .Trip_c1 atperiods (deftime((distance(.ptrip_c1, .ptrip_c2) < 3.0) at TRUE))]
  filter [not(isempty(.Pos))]
  dataMcar feed {m}
  symmjoin[.Moid_c2 = ..Moid_m]
  project [Licence_c1, Licence_m, Pos]
  sortby[Licence_c1 asc, Licence_m asc]
  groupby[Licence_c1, Licence_m; AllPos: group feed
    aggregateB[Pos; fun(M1:mgpoint, M2:mgpoint) M1 union M2; [const mgpoint value()]]]
  project[Licence_c1, Licence_m, AllPos]
consume;

query now();

delete Q10h1TBA;
delete Q10h2TBA;

# Query 11: Which vehicles passed a point from QueryPoints1 at one of the instants from QueryInstant1?
query now();
let Q11TBA =
  dataMNtrip feed
  QueryPoints1Net feed
  symmjoin[.Trip passes .Pos]
  projectextend[Moid, Id; Trip: .Trip at .Pos]
  QueryInstant1 feed {i}
  symmjoin[.Trip present ..Instant_i]
  dataMcar feed {l}
  symmjoin[.Moid = ..Moid_l]
  project[Id, Instant_i, Licence_l]
  sortby [Id asc, Instant_i asc, Licence_l asc]
  krdup [Id, Instant_i, Licence_l]
consume;

query now();
# Query 12: Which vehicles met at a point from QueryPoints1 at an instant from  QueryInstant1?
query now();
let Q12h1TBA =
  dataMNtrip feed
  QueryPoints1Net feed
  symmjoin[.Trip passes .Pos]
  projectextend[Moid, Id; Trip: .Trip at .Pos]
  QueryInstant1 feed {i}
  symmjoin[.Trip present ..Instant_i]
  dataMcar feed {l}
  symmjoin[.Moid = ..Moid_l]
  project[Id, Instant_i, Licence_l]
  sortby [Id asc, Instant_i asc, Licence_l asc]
  krdup [Id, Instant_i, Licence_l]
consume;

query now();
let Q12TBA =
  Q12h1TBA feed {A}
  Q12h1TBA feed {B}
  symmjoin [(.Id_A = ..Id_B) and (.Instant_i_A = ..Instant_i_B) and (.Licence_l_A # ..Licence_l_B)]
  project [Id_A, Instant_i_A, Licence_l_A, Licence_l_B]
  sortby [Id_A asc, Instant_i_A asc, Licence_l_B asc]
consume;

query now();
delete Q12h1TBA;

# Query 13: Which vehicles traveled within one of the regions from QueryRegions1 during the periods from QueryPeriods1?
query now();
let Q13TBA =
  dataMNtrip feed 
  QueryPeriods1 feed filter [not(isempty(.Period))]
  symmjoin[.Trip present ..Period]
  projectextend[Moid, Period; Trip: .Trip atperiods .Period]
  QueryRegions1Net feed filter [not(isempty(.Region))]{r}
  symmjoin[.Trip passes ..Region_r]
  dataMcar feed {l}
  symmjoin[.Moid = ..Moid_l]
  project[Id_r, Period, Licence_l]
  sortby [Id_r asc, Period asc, Licence_l asc]
  krdup [Id_r, Period, Licence_l]
consume;

query now();

# Query 14: Which vehicles traveled within one of the regions from QueryRegions1 at one of the instants from QueryInstant1?
query now();
let Q14TBA =
  dataMNtrip feed
  QueryInstant1 feed
  symmjoin[.Trip present .Instant]
  projectextend[Moid, Instant; Trip: .Trip atinstant .Instant]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin[.Trip passes ..Region]
  dataMcar feed {l}
  symmjoin[.Moid = ..Moid_l]
  project[Id_r, Instant_i, Licence_l]
  sortby [Id_r asc, Instant_i asc, Licence_l asc]
  krdup[Id_r, Instant_i, Licence_l]
consume;

query now();

# Query 15: Which vehicles passed a point from QueryPoints1 during a period from QueryPeriods1?
query now();
let Q15TBA =
  dataMNtrip feed 
  QueryPeriods1 feed filter [not(isempty(.Period))]
  symmjoin[.Trip present ..Period]
  projectextend[Moid, Period; Trip: .Trip atperiods .Period]
  QueryPoints1Net feed
  symmjoin[.Trip passes ..Pos]
  dataMcar feed {l}
  symmjoin[.Moid = ..Moid_l]
  project[Id, Period, Licence_l]
  sortby [Id asc, Period asc, Licence_l asc]
  krdup [Id, Period, Licence_l]
consume;

query now();
# Query 16: List the pairs of licenses for vehicles the first from  QueryLicences1, the second from QueryLicences2, where the corresponding
# vehicles are both present within a Region from  QueryRegions1 during a period from QueryPeriod1, but do not meet  each other
# there and then.
query now();
let Q16h1TBA =
  dataMcar feed 
  QueryLicences1 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = ..Moid_c]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip_c passes ..Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip_c present ..Period_p]
  projectextend[Id_r, Id_p, Period_p, Licence; Trip: (.Trip_c at .Region_r) atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16h2TBA =
  dataMcar feed 
  QueryLicences2 feed {l}
  symmjoin[.Licence = ..Licence_l]
  dataMNtrip feed {c}
  symmjoin[.Moid = ..Moid_c]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip_c passes ..Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip_c present ..Period_p]
  projectextend[Id_r, Id_p, Period_p, Licence; Trip: (.Trip_c at .Region_r) atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16TBA =
  Q16h1TBA feed {a}
  Q16h2TBA feed {b}
  symmjoin[(.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and (.Licence_a # ..Licence_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
  krdup [Id_r_a, Id_p_a, Licence_a, Licence_b]
consume;

query now();
delete Q16h1TBA;
delete Q16h2TBA;

#Query 17: Which points from QueryPoints have been visited by a maximum number of different vehicles?
query now();
let Q17h1TBA =
  dataMNtrip feed
  QueryPointsNet feed
  symmjoin[.Trip passes ..Pos]
  project[Id, Moid]
  sortby [Id asc, Moid asc]
  krdup[Id, Moid]
  groupby[Id; Hits: group feed count]
consume;

query now();
let Q17TBA =
  Q17h1TBA feed
  filter [.Hits = (Q17h1TBA feed max[Hits])]
  project [Id, Hits]
consume;

query now();
delete Q17h1TBA;

let EVAL_SEC2COMMANDS_NETTBA = SEC2COMMANDS feed  consume;
save EVAL_SEC2COMMANDS_NETTBA to 'NetworkTBARunTimes.DAT';
delete EVAL_SEC2COMMANDS_NETTBA;
close database;
