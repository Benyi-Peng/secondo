open database berlinmod;
# Query 1: What are the models of the vehicles with license plate numbers from QueryLicence?
query now();
let Q1OBA =
  dataSNcar feed {c}
  QueryLicences feed {l}
  symmjoin[..Licence_l = .Licence_r]
  project [Licence, Model]
consume;

query now();
# Query 2: How many vehicles exist that are passenger cars?
query now();
let Q2OBA =
   dataSNcar feed filter [.Type = "passenger"]
count;

query now();
# Query 3: Where have the vehicles with licenses from QueryLicence1 been at each instant from QueryInstant1?
query now();
let Q3OBA =
  dataSNcar feed {c}
  QueryLicences1 feed {l}
  symmjoin[..Licence_l = .Licence_c]
  QueryInstant1 feed {i}
  product
  projectextend[Licence_c, Instant_i; Pos: val(.Trip_c atinstant .Instant_i)]
  sortby[Licence_c asc, Instant_i asc]
 consume;

query now();
# Query 4: Which license plate numbers belong to vehicles that have passed the points from QueryPoints?
query now();
let Q4OBA =
  dataSNcar feed
  QueryPointsNet feed
  symmjoin[.Trip passes ..Pos]
  project [Id, Licence]
  sortby [Id asc, Licence asc]
  krdup [Id, Licence]
consume;

query now();
# Query 5: What is the minimum distance between places, where a vehicle with a license from QueryLicences1 and a vehicle with licenses
# from QueryLicence2 have been?1
query now();
let Q5h1OBA =
  dataSNcar feed {c}
  QueryLicences1 feed {l1}
  symmjoin[..Licence_l1 = .Licence_c]
  projectextend[Licence_c; TrajLine: gline2line(trajectory(.Trip_c))]
consume;

query now();
let Q5h2OBA  =
  dataSNcar feed {c}
  QueryLicences2 feed {l2}
  symmjoin[..Licence_l2 = .Licence_c]
  projectextend[Licence_c; TrajLine: gline2line(trajectory(.Trip_c))]]
consume;

query now();
let Q5OBA =
  Q5h1OBA feed {c1}
  Q5h2OBA feed {c2}
  product
  projectextend [Licence_c_c1, Licence_c_c2; Distance: distance(.TrajLine_c1, .TrajLine_c2)]
consume;

query now();
delete Q5h1OBA;
delete Q5h2OBA;
# Query 6: What are the pairs of license plate numbers of "trucks", that have have been as close as 10m or less to each other?
query now();
let Q6h1OBA =
  dataSNcar feed
  filter [.Type = "truck"]
  projectextend [Licence; ptrip: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
  projectextend [Licence, ptrip; Box: rectangle3(minD(.BBox,1) - 5.0, maxD(.BBox,1) + 5.0, minD(.BBox,2) - 5.0, maxD(.BBox,2) + 5.0, minD(.BBox,3), maxD(.BBox,3))]
 consume;

query now();
let Q6OBA =
  Q6h1OBA feed {a}
  Q6h1OBA feed {b}
  symmjoin [(.Box_a intersects ..Box_b) and (.Licence_a < ..Licence_b) and (everNearerThan(.ptrip_a, ..ptrip_b, 10.0))]
  project [Licence_a, Licence_b]
  sortby [Licence_a asc, Licence_b asc]
  krdup [Licence_a, Licence_b]
consume;

query now();
delete Q6h1OBA;

# Query 7: What are the license plate numbers of the "passenger" cars that  have reached points from QueryPoints first of all "passenger"
# cars  during the complete observation period?

query now();
let Q7h1OBA =
  dataSNcar feed filter [.Type = "passenger"]
  QueryPointsNet feed
  symmjoin[.Trip passes ..Pos]
  projectextend[Licence, Id;FirstTime: inst(initial(.Trip at .Pos))]
  sortby [Id asc, FirstTime asc]
consume;

query now();

let Q7h2OBA =
  Q7dh1OBA feed
  groupby[Id; FirstTime: group feed min[FirstTime]]
consume;

query now();

let Q7OBA =
  Q7h1OBA feed {a}
  Q7h2OBA feed {b}
  symmjoin [(.Id_a = ..Id_b) and (.FirstTime_a <= ..FirstTime_b)]
  project[Id_a, Licence_a, FirstTime_a]
  sortby [Id_a asc, Licence_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_a, FirstTime_a]
consume;

query now();

delete Q7h1OBA;
delete Q7h2OBA;

# Query 8: What are the overall traveled distances of the vehicles with license plate numbers from QueryLicences1 during the periods from
# QueryPeriods1?

query now();
let Q8OBA =
  dataSNcar feed {c}
  QueryLicences1 feed {l}
  symmjoin[..Licence_l = .Licence_c]
  QueryPeriods1 feed filter[not(isempty(.Period))] {p}
  product
  projectextend [Licence_c, Period_p; Distance: length(.Trip_c atperiods .Period_p)]
consume;

query now();

# Query 9: What is the longest distance that was traveled by a vehicle during  each of the periods from QueryPeriods?

query now();

let Q9OBA =
  dataSNcar feed {c}
  QueryPeriods feed filter[not(isempty(.Period))]{p}
  product
  projectextend [Id_p, Period_p; Dist: length(.Trip_c atperiods .Period_p)]
  sortby [Id_p asc, Period_p asc, Dist desc]
  groupby [Id_p, Period_p; Distance: group feed max[Dist]]
consume;

# Query 10: When and where did the vehicles with license plate numbers from QueryLicences1 meet other vehicles (distance < 3m) and
# what are the latter licenses?
query now();

let Q10h1OBA =
  dataSNcar feed {c}
  QueryLicences1 feed {l}
  symmjoin[..Licence_l = .Licence_c]
  projectextend[Licence_c, Trip_c; TripA: mgpoint2mpoint(.Trip_c), BBox: mgpbbox(.Trip_c)]
  projectextend [Licence_c, Trip_c, TripA; Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))]
consume;

query now();

let Q10h2OBA =
 dataSNcar feed
  projectextend[Licence; TripA: mgpoint2mpoint(.Trip), BBox: mgpbbox(.Trip)]
 projectextend[Licence, TripA;Box: rectangle2((minD(.BBox,1) - 1.5), (maxD(.BBox,1) + 1.5), (minD(.BBox,2) - 1.5), (maxD(.BBox,2) + 1.5))]
consume;

query now();

let Q10OBA =
  Q10h2OBA feed {c1}
  Q10h1OBA feed {c2}
  symmjoin[(.Box_c1 intersects ..Box_c2) and (.Licence_c1 # ..Licence_c_c2) and (everNearerThan(.TripA_c1, ..TripA_c2, 3.0))]
  projectextend [Licence_c2, Licence_c1; Pos: .Trip_c_c2 atperiods deftime((distance(.TripA_c1, .TripA_c2) < 3.0) at TRUE)]
  filter [not(isempty(.Pos))]
consume;

query now();
delete Q10h1OBA;
delete Q10h2OBA;


# Query 11: Which vehicles passed a point from QueryPoints1 at one of the instants from QueryInstant1?

query now();

let Q11OBA =
  dataSNcar feed
  QueryPoints1Net feed {p}
  symmjoin[.Trip passes ..Pos_p]
  projectextend[Id_p, Licence; Trip: .Trip at .Pos_p]
  QueryInstant1 feed
  symmjoin[.Trip present ..Instant]
  project[Licence, Id_p, Instant]
consume;

# Query 12: Which vehicles met at a point from QueryPoints1 at an instant from QueryInstant1?
query now();
let Q12h1OBA =
  dataSNcar feed
  QueryPoints1Net feed {p}
  symmjoin[.Trip passes ..Pos_p]
  projectextend[Id_p, Licence; Trip: .Trip at .Pos_p]
  QueryInstant1 feed
  symmjoin[.Trip present ..Instant]
  project[Licence, Id_p, Instant]
consume;

query now();

let Q12OBA =
  Q12h1OBA feed {c1}
  Q12h1OBA feed {c2}
  symmjoin [(.Licence_c1 < ..Licence_c2) and (.Id_p_c1 = ..Id_p_c2) and (.Instant_c1 = ..Instant_c2)]
  project [Id_p_c1, Instant_i_c1, Licence_c1, Licence_c2]
  sortby [Id_p_c1 asc, Instant_i_c1 asc, Licence_c2 asc, Licence_c1 asc]
consume;

query now();

delete Q12h1OBA;

# Query 13: Which vehicles traveled within one of the regions from QueryRegions1 during the periods from QueryPeriods1?

query now();
let Q13OBA =
  dataSNcar feed
  QueryPeriods1 feed filter[not(isempty(.Period))] {t}
  product
  projectextend[Licence, Period_t; Trip: .Trip atperiods .Period_t]
  QueryRegions1Net feed
  symmjoin[.Trip passes ..Region]
  project[Id, Period_t, Licence]
  sortby [Id asc, Period_t asc, Licence asc]
  krdup [Id, Period_t, Licence]
consume;

query now();
# Query 14: Which vehicles traveled within one of the regions from QueryRegions1 at one of the instants from QueryInstant1?
query now();
let Q14OBA =
  dataSNcar feed
  QueryRegions1Net feed
  symmjoin[.Trip passes ..Region]
  projectextend[Id, Licence; Trip: .Trip at .Region]
  QueryInstant1 feed {i}
  symmjoin[.Trip present ..Instant_i]
  project[Id, Licence, Instant_i]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;

query now();

#  Query 15: Which vehicles passed a point from QueryPoints1 during a period from QueryPeriods1?
query now();
let Q15OBA =
  dataSNcar feed
  QueryPoints1Net feed
  symmjoin [.Trip passes ..Pos]
  projectextend [Id, Licence; Trip: .Trip at .Pos]
  QueryPeriods1 feed {t}
  symmjoin [.Trip present ..Period_t]
  project [Id, Period_t, Licence]
  sortby [Id asc, Period_t asc, Licence asc]
  krdup [Id, Period_t, Licence]
consume;

# Query 16: List the pairs of licenses for vehicles the first from QueryLicences1, the second from QueryLicences2, where the  corresponding
#  vehicles are both present within a Region from QueryRegions1 during a period from QueryPeriod1, but do not meet  each other
#  there and then.

query now();

let Q16h1OBA =
  dataSNcar feed {c}
  QueryLicences1 feed {l}
  symmjoin[.Licence_c = ..Licence_l]
  QueryRegions1Net feed filter[not(isempty(.Region))]
  symmjoin[.Trip passes ..Region]
  projectextend[Licence_c, Id; Trip: .Trip_c at .Region]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id, Id_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16h2OBA =
  dataSNcar feed {c}
  QueryLicences2 feed {l}
  symmjoin[.Licence_c = ..Licence_l]
  QueryRegions1Net feed filter[not(isempty(.Region))]
  symmjoin[.Trip passes ..Region]
  projectextend[Licence_c, Id; Trip: .Trip_c at .Region]
  QueryPeriods1 feed filter[not(isempty(.Period))]{p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id, Id_p; Licence: .Licence_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();

let Q16OBA =
  Q16h1OBA feed {a}
  Q16h2OBA feed {b}
  symmjoin[(.Licence_a # ..Licence_b) and (.Id_a = ..Id_b) and (.Id_p_a = ..Id_p_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
consume;

delete Q16h1OBA;
delete Q16h2OBA;

#Query 17: Which points from QueryPoints have been visited by a maximum number  of different vehicles?

query now();

let Q17h1OBA =
  dataSNcar feed {c}
  QueryPointsNet feed {p}
  symmjoin [.Trip_c passes ..Pos_p]
  project [Id_p, Licence_c]
  sortby [Id_p, Licence_c]
  krdup [Id_p, Licence_c]
  groupby[Id_p; Hits: group feed count]
consume;

query now();
let Q17OBA =
  Q17h1OBA feed
  filter [.Hits = (Q17h1OBA feed max[Hits])]
  project [Id_p, Hits]
consume;

query now();
delete Q17h1OBA;

let EVAL_SEC2COMMANDS_NETOBA = SEC2COMMANDS feed consume;

save EVAL_SEC2COMMANDS_NETOBA to 'NetworkOBARunTimes.DAT';

delete EVAL_SEC2COMMANDS_NETOBA;

close database;
