open database berlinmod;


# Query 5: What is the minimum distance between places, where a vehicle with a license from QueryLicences1 and a vehicle with Licenses
# from QueryLicence2 have been?

query now();

let Q5h1TBA =
  QueryLicences1 feed project[Licence] {LL1}
  loopsel[ fun(t:TUPLE)
    dataMcar_Licence_btree dataMcar exactmatch[attr(t,Licence_LL1)] {CAR}
    loopsel[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj: trajectory(.Trip)]
    aggregateB[Traj; fun(L1: gline, L2: gline)
     L1 union L2; [const gline value ()]]
    feed namedtransformstream[Traxj]
    extend[Licence: attr(t,Licence_LL1)]
  ]
  projectextend[Licence; Trax: gline2line(.Traxj)]
  consume;

query now();

let Q5h2TBA =
  QueryLicences2 feed project[Licence] {LL1}
  loopsel[ fun(t:TUPLE)
    dataMcar_Licence_btree dataMcar exactmatch[attr(t,Licence_LL1)] {CAR}
    loopsel[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj: trajectory(.Trip)]
    aggregateB[Traj; fun(L1: gline, L2: gline)
     L1 union L2; [const gline value ()]]
    feed namedtransformstream[Traxj]
    extend[Licence: attr(t,Licence_LL1)]
  ]
  projectextend[Licence; Trax: gline2line(.Traxj)]
  consume;

query now();

let Q5TBA =
  Q5h1TBA feed {c1}
  Q5h2TBA feed {c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.Trax_c1, .Trax_c2)]
consume;

query now();

delete Q5h1TBA;
delete Q5h2TBA;



# Query 7: What are the license plate numbers of the "passenger" cars that  have reached points from QueryPoints first of all "passenger"
# cars  during the complete observation period?
query now();

let Q7h1TBA =
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataMNtrip gettuples
  loopjoin [dataMcar_Moid_btree dataMcar exactmatch[.Moid]
  filter[.Type = "passenger"]
  project [Licence] {X}]
  projectextend [Licence_X; FirstTime: inst(initial(.Trip at attr(t,Pos))), Id: attr(t,Id)]]
 consume;

query now();

let Q7TBA =
  Q7h1TBA feed {a}
  Q7h1TBA feed project[Id, FirstTime]
  sortby [Id asc, FirstTime asc] groupby [Id; FirstTime: group feed min[FirstTime]]{f}
  symmjoin [(.Id_a = ..Id_f) and (.FirstTime_a <= ..FirstTime_f)]
  project [Id_a, Licence_X_a, FirstTime_a]
  sortby [Id_a asc, Licence_X_a asc, FirstTime_a asc]
  krdup [Id_a, Licence_X_a, FirstTime_a]
consume;

query now();

delete Q7h1TBA;


# Query 11: Which vehicles passed a point from QueryPoints1 at one of the instants from QueryInstant1?
query now();
let Q11TBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataMNtrip gettuples
  projectextend [Moid; Id: attr(t,Id_p), Pos: attr(t,Pos_p), Instant: attr(t,Instant_i)]] {a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch[.Moid_a]]
  project[Id_a, Instant_a, Licence]
  sortby [Id_a asc, Instant_a asc, Licence asc]
  krdup [Id_a, Instant_a, Licence]
consume;

query now();


query now();
# Query 12: Which vehicles met at a point from QueryPoints1 at an instant from  QueryInstant1?
query now();
let Q12h1TBA =
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  QueryInstant1 feed {i}
  product
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[box3d(attr(t,Prect_p), attr(t,Instant_i))]
  sort rdup dataMNtrip gettuples
  projectextend [Moid; Id: attr(t,Id_p), Pos: attr(t,Pos_p), Instant: attr(t,Instant_i)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch[.Moid_a]]
  projectextend[Moid, Licence; Id: .Id_a, Instant: .Instant_a]
consume;

query now();
let Q12TBA =
  Q12h1TBA feed {A}
  Q12h1TBA feed {B}
  symmjoin [(.Id_A = ..Id_B) and (.Instant_A = ..Instant_B) and (.Moid_A < ..Moid_B)]
  project [Id_A, Instant_A, Licence_A, Licence_B]
  sortby [Id_A asc, Instant_A asc, Licence_B asc]
consume;

query now();
delete Q12h1TBA;

let Q14TBA =
  QueryRegions1Net feed filter[not(isempty(.Region))] projectextendstream[Id, Region; Brect: routeintervals(.Region)]{r}
  QueryInstant1 feed {i}
  product
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[box3d(attr(t,Brect_r), attr(t,Instant_i))]
  sort rdup dataMNtrip gettuples
  filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Moid;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid_a]]
  projectextend[Licence; Id: .Id_a, Instant: .Instant_a]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
  project[Id, Instant, Licence]
consume;

query now();


# Query 16: List the pairs of licenses for vehicles the first from  QueryLicences1, the second from QueryLicences2, where the corresponding
# vehicles are both present within a Region from  QueryRegions1 during a period from QueryPeriod1, but do not meet  each other
# there and then.
query now();
let Q16h1TBA =
  QueryLicences1 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]]
  project [Licence, Moid] {a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  project[Licence_a, Trip] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip_c passes ..Region_r]
  projectextend[Licence_a_c, Id_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16h2TBA =
  QueryLicences2 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]]
  project [Licence, Moid] {a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  project[Licence_a, Trip] {c}
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip_c passes ..Region_r]
  projectextend[Licence_a_c, Id_r; Trip: .Trip_c at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a_c, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16TBA =
  Q16h1TBA feed {a}
  Q16h2TBA feed {b}
  symmjoin[(.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and (.Licence_a # ..Licence_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
  krdup [Id_r_a, Id_p_a, Licence_a, Licence_b]
  project[Id_r_a, Period_p_a, Licence_a, Licence_b]
consume;

query now();
delete Q16h1TBA;
delete Q16h2TBA;


let Q5aTBA =
  QueryLicences1 feed project[Licence] {LL1}
  loopsel[ fun(t:TUPLE)
    dataMcar_Licence_btree dataMcar exactmatch[attr(t,Licence_LL1)] {CAR}
    loopsel[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj: trajectory(.Trip)]
    aggregateB[Traj; fun(L1: gline, L2: gline) L1 union L2; [const gline value ()]]
    feed namedtransformstream[Traxj]
    extend[Licence: attr(t,Licence_LL1)]
  ]
  projectextend[Licence; Trax: gline2line(.Traxj)]{c1}
  QueryLicences2 feed project[Licence] {LL2}
  loopsel[ fun(s:TUPLE)
    dataMcar_Licence_btree dataMcar exactmatch[attr(s,Licence_LL2)] {CAR}
    loopsel[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_CAR]]
    projectextend[;Traj: trajectory(.Trip)]
    aggregateB[Traj; fun(L3: gline, L4: gline) L3 union L4; [const gline value ()]]
    feed namedtransformstream[Traxj]
    extend[Licence: attr(s,Licence_LL2)]
  ]
  projectextend[Licence; Trax: gline2line(.Traxj)]{c2}
  product
  projectextend [Licence_c1, Licence_c2; Distance: distance(.Trax_c1, .Trax_c2)]
consume;


#alternative Query

query now();

let Q7ah1TBA =
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataMNtrip gettuples
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid]
  filter[.Type = "passenger"]
  project[Licence] {X}]
  projectextend[ Licence_X;TimeAtPos: inst(initial(.Trip at attr(t,Pos))), Id: attr(t, Id)]]
  sortby [Id asc, TimeAtPos asc]
consume;

query now();

let Q7aTBA =
  Q7ah1TBA feed {a}
  Q7ah1TBA feed
    groupby [Id; FirstTime: group feed min[TimeAtPos]]{b}
  symmjoin[(.Id_a = ..Id_b) and (.TimeAtPos_a <= ..FirstTime_b)]
  project [Id_a, Licence_X_a]
  sortby [Id_a asc, Licence_X_a asc]
  krdup [Id_a, Licence_X_a]
 consume;

delete Q7ah1TBA;
delete Q7ah2TBA;

#alternative

let Q11aTBA =
  QueryInstant1 feed {i}
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  product
  projectextend [Instant_i, Id_p, Pos_p; BBox: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[attr(t,BBox)]
  sort rdup dataMNtrip gettuples
  projectextend [Moid; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch[.Moid_a]]
  project[Id_a, Instant_a, Licence]
  sortby [Id_a asc, Instant_a asc, Licence asc]
  krdup [Id_a, Instant_a, Licence]
consume;


#alternative Query
query now();
let Q12ah1TBA =
  QueryPoints1Net feed projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]{p}
  QueryInstant1 feed {i}
  product
  projectextend [Id_p, Pos_p, Instant_i; Box: box3d(.Prect_p, .Instant_i)]
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataMNtrip gettuples
  projectextend [Moid; Id: attr(t,Id_p), Instant: attr(t,Instant_i)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch[.Moid_a]]
  projectextend[Moid, Licence; Id: .Id_a, Instant: .Instant_a]
consume;

query now();
let Q12aTBA =
  Q12ah1TBA feed {A}
  Q12ah1TBA feed {B}
  symmjoin [(.Id_A = ..Id_B) and (.Instant_A = ..Instant_B) and (.Moid_A < ..Moid_B)]
  project [Id_A, Instant_A, Licence_A, Licence_B]
  sortby [Id_A asc, Instant_A asc, Licence_B asc]
consume;

query now();

delete Q12ah1TBA;

#alternative Query
query now();
let Q14aTBA =
  QueryRegions1Net feed filter[not(isempty(.Region))] projectextendstream[Id, Region; Brect: routeintervals(.Region)]{r}
  QueryInstant1 feed {i}
  product
  projectextend[Id_r, Region_r, Instant_i; Box: box3d(.Brect_r, .Instant_i)]
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataMNtrip gettuples
   filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Moid;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid_a]]
  projectextend[Licence; Id: .Id_a, Instant: .Instant_a]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
  project[Licence, Instant, Id]
consume;

let Q16ah1TBA =
  QueryLicences1 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]] {a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip passes ..Region_r]
  projectextend[Licence_a, Id_r; Trip: .Trip at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16ah2TBA =
  QueryLicences2 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]]{a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip passes ..Region_r]
  projectextend[Licence_a, Id_r; Trip: .Trip at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]
consume;

query now();
let Q16aTBA =
  Q16ah1TBA feed {a}
  Q16ah2TBA feed {b}
  symmjoin[(.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and (.Licence_a # ..Licence_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
  krdup [Id_r_a, Id_p_a, Licence_a, Licence_b]
consume;

query now();
delete Q16ah1TBA;
delete Q16ah2TBA;



let Q7bTBA =
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataMNtrip gettuples
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid]
  filter[.Type = "passenger"]
  project[Licence] {X}]
  projectextend[ Licence_X;TimeAtPos: inst(initial(.Trip at attr(t,Pos))), Id: attr(t, Id)]]
  sortby [Id asc, TimeAtPos asc] {b}
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(s:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(s,Prect)]
  sort rdup dataMNtrip gettuples
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid]
  filter[.Type = "passenger"]
  project[Licence] {X}]
  projectextend[ Licence_X;TimeAtPos: inst(initial(.Trip at attr(s,Pos))), Id: attr(s, Id)]]
  sortby [Id asc, TimeAtPos asc]
  groupby [Id; FirstTime: group feed min[TimeAtPos]] {a}
  symmjoin[(..Id_a = .Id_b) and (.TimeAtPos_b <= ..FirstTime_a)]
  project [Id_a, Licence_X_b]
  sortby [Id_a asc, Licence_X_b asc]
  krdup [Id_a, Licence_X_b]
 consume;

query now();

let Q14bTBA =
  QueryRegions1Net feed filter[not(isempty(.Region))] projectextendstream[Id, Region; Brect: routeintervals(.Region)]{r}
  QueryInstant1 feed {i}
  product
  projectextend[Id_r, Region_r, Instant_i; Box: box3d(.Brect_r, .Instant_i)]
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataMNtrip gettuples
  filter[(val(.Trip atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  projectextend [Moid;Instant: attr(t,Instant_i), Id: attr(t,Id_r)]]{a}
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid_a]]
  projectextend[Licence; Id: .Id_a, Instant: .Instant_a]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;


let Q16bTBA =
  QueryLicences1 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]] {a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip passes ..Region_r]
  projectextend[Licence_a, Id_r; Trip: .Trip at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{a}
  QueryLicences2 feed {l}
  loopjoin [dataMcar_Licence_btree dataMcar exactmatch[.Licence_l]]{a}
  loopjoin[dataMNtrip_Moid_btree dataMNtrip exactmatch[.Moid_a]]
  QueryRegions1Net feed filter[not(isempty(.Region))]{r}
  symmjoin [.Trip passes ..Region_r]
  projectextend[Licence_a, Id_r; Trip: .Trip at .Region_r]
  QueryPeriods1 feed {p}
  symmjoin [.Trip present ..Period_p]
  projectextend[Id_r, Id_p, Period_p; Licence: .Licence_a, Trip: .Trip atperiods .Period_p]
  filter [no_components(.Trip) > 0]{b}
  symmjoin[(.Id_r_a = ..Id_r_b) and (.Id_p_a = ..Id_p_b) and (.Licence_a # ..Licence_b) and
  (isempty(deftime(intersection(.Trip_a,..Trip_b))))]
  project [Id_r_a, Id_p_a, Period_p_a, Licence_a, Licence_b]
  sortby [Id_r_a asc, Id_p_a asc, Licence_a asc, Licence_b asc]
  krdup [Id_r_a, Id_p_a, Licence_a, Licence_b]
consume;


#alternative


let Q7cTBA =
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(t:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(t,Prect)]
  sort rdup dataMNtrip gettuples
  loopsel[fun(s:TUPLE) dataMcar_Moid_btree dataMcar exactmatch [attr(s,Moid)]
  filter[.Type = "passenger"]
  projectextend[ Licence;TimeAtPos: inst(initial(attr(s,Trip) at attr(t,Pos))), Id: attr(t, Id)]]]
  sortby [Id asc, TimeAtPos asc] {b}
  QueryPointsNet feed
  projectextend[Id, Pos; Prect: gpoint2rect(.Pos)]
  loopsel[fun(u:TUPLE) dataMNtrip_TrajBoxNet windowintersectsS[attr(u,Prect)]
  sort rdup dataMNtrip gettuples {a}
  loopsel[fun(r:TUPLE) dataMcar_Moid_btree dataMcar exactmatch [attr(r,Moid_a)]
  filter[.Type = "passenger"]
  projectextend[Licence;TimeAtPos: inst(initial(attr(r,Trip_a) at attr(u,Pos))), Id: attr(u, Id)]]]
  sortby [Id asc, TimeAtPos asc]
  groupby [Id; FirstTime: group feed min[TimeAtPos]]{a}
  symmjoin[(..Id_a = .Id_b) and (.TimeAtPos_b <= ..FirstTime_a)]
  project [Id_a, Licence_b]
  sortby [Id_a asc, Licence_b asc]
  krdup [Id_a, Licence_b]
 consume;



let Q14cTBA =
  QueryRegions1Net feed filter[not(isempty(.Region))] projectextendstream[Id, Region; Brect: routeintervals(.Region)]{r}
  QueryInstant1 feed {i}
  product
  projectextend[Id_r, Region_r, Instant_i; Box: box3d(.Brect_r, .Instant_i)]
  loopsel[fun(t:TUPLE) dataMNtrip_BoxNet_timespace windowintersectsS[attr(t,Box)]
  sort rdup dataMNtrip gettuples {a}
   filter[(val(.Trip_a atinstant (attr(t,Instant_i)))) inside (attr(t,Region_r))]
  loopjoin[dataMcar_Moid_btree dataMcar exactmatch [.Moid_a]]
  projectextend[Licence; Id: attr(t,Id_r), Instant: attr(t,Instant_i)]]
  sortby [Id asc, Instant asc, Licence asc]
  krdup[Id, Instant, Licence]
consume;


let EVAL_SEC2COMMANDS_NETTBA = SEC2COMMANDS feed  consume;
save EVAL_SEC2COMMANDS_NETTBA to 'NetworkTBARunTimes.DAT';
delete EVAL_SEC2COMMANDS_NETTBA;
close database;
