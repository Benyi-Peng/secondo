/* Generated by Together */

import java.io.*;

public class RPGConv {

    private static boolean success;
    private static String errorMsg;

    private final static double SCALEFACTOR = 10.0;

    public static boolean lastConversionSuccessful() {
        return success;
    }

    public static String lastConversionErrorMsg() {
        return errorMsg;
    }

    public static SegList getRegions (String rpgFileName) {
        RPGConv.success = true;
        RPGConv.errorMsg = "Unknown Error in RPG conversion";
        StreamTokenizer st = null;
        int token = 0;
		SegList r = new SegList();
        try {
	        st = new StreamTokenizer (new FileReader (rpgFileName));
	        st.eolIsSignificant(false);
    	    st.commentChar('#');

            //read interval
            for (int i = 0; i < 4; i++) {
                token = st.nextToken();
            }

            //read no. of points
            token = st.nextToken();
            int noOfPoints = 0;
            if (token == StreamTokenizer.TT_NUMBER)
                noOfPoints = (int) st.nval;
            else {
                RPGConv.errorMsg = "Error: wrong token type";
                throw new Exception();
            }

            Point[] points = new Point[noOfPoints];

			//Point construction

            for (int i = 0; i < noOfPoints; i++) {
                double x = 0.0;
                double y = 0.0;
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    x = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    y = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                points[i] = new Point (x,y);

            }

            //read number of Polygons
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_NUMBER) || (st.nval != 1.0)) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            //read word "POLYGON"
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_WORD) || (!st.sval.equals("POLYGON"))) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            int firstIndex = 0;
            int prevIndex = 0;
            int actIndex = 0;

			//read first point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            firstIndex = (int) st.nval;
            prevIndex = (int) st.nval;

            //read second point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            actIndex = (int) st.nval;
			int zaehl = 0;
            //read further point indices, construct Segments
            while (token != StreamTokenizer.TT_EOF) {
                r.add (new Segment (points[prevIndex - 1], points [actIndex - 1]));
				prevIndex = actIndex;
				token = st.nextToken();
    	        if ((token != StreamTokenizer.TT_NUMBER) &&
                							 (token != StreamTokenizer.TT_EOF)) {
    	            RPGConv.errorMsg = "File format error";
        	        throw new Exception();
            	}
            	if (token != StreamTokenizer.TT_EOF)
                	actIndex = (int) st.nval;
            }
            r.add (new Segment (points[actIndex - 1], points [firstIndex - 1]));
        }catch  (Exception e) {
            RPGConv.success = false;
            if (RPGConv.errorMsg.equals ("Unknown Error in RPG conversion"))
                RPGConv.errorMsg = e.getMessage();
            try {
            	while (token != StreamTokenizer.TT_EOF)
                	token = st.nextToken();
            }catch (Exception exc) {}
            SegList reg = new SegList();
            return reg;
        }
        return r;
    }


    public static SegList getLines (String rpgFileName) {
        RPGConv.success = true;
        RPGConv.errorMsg = "Unknown Error in RPG conversion";
        StreamTokenizer st = null;
        int token = 0;
		SegList l = new SegList();
        try {
	        st = new StreamTokenizer (new FileReader (rpgFileName));
	        st.eolIsSignificant(false);
    	    st.commentChar('#');

            //read interval
            for (int i = 0; i < 4; i++) {
                token = st.nextToken();
            }

            //read no. of points
            token = st.nextToken();
            int noOfPoints = 0;
            if (token == StreamTokenizer.TT_NUMBER)
                noOfPoints = (int) st.nval;
            else {
                RPGConv.errorMsg = "Error: wrong token type";
                throw new Exception();
            }

            Point[] points = new Point[noOfPoints];

			//Point construction

            for (int i = 0; i < noOfPoints; i++) {
                double x = 0.0;
                double y = 0.0;
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    x = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    y = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                points[i] = new Point (x,y);

            }

            //read number of Polygons
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_NUMBER) || (st.nval != 1.0)) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            //read word "POLYGON"
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_WORD) || (!st.sval.equals("POLYGON"))) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            int prevIndex = 0;
            int actIndex = 0;

			//read first point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            prevIndex = (int) st.nval;

            //read second point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            actIndex = (int) st.nval;

            //read further point indices, construct Segments
            while (token != StreamTokenizer.TT_EOF) {
                l.add (new Segment (points[prevIndex - 1], points [actIndex - 1]));
				prevIndex = actIndex;
				token = st.nextToken();
    	        if ((token != StreamTokenizer.TT_NUMBER) &&
                							 (token != StreamTokenizer.TT_EOF)) {
    	            RPGConv.errorMsg = "File format error";
        	        throw new Exception();
            	}
            	if (token != StreamTokenizer.TT_EOF)
                	actIndex = (int) st.nval;
            }
        }catch  (Exception e) {
            RPGConv.success = false;
            if (RPGConv.errorMsg.equals ("Unknown Error in RPG conversion"))
                RPGConv.errorMsg = e.getMessage();
            try {
            	while (token != StreamTokenizer.TT_EOF)
                	token = st.nextToken();
            }catch (Exception exc) {}
            SegList ln = new SegList();
            return ln;
        }
        return l;
    }

    public static SegList getPartsOfLines (String rpgFileName) {
        RPGConv.success = true;
        RPGConv.errorMsg = "Unknown Error in RPG conversion";
        StreamTokenizer st = null;
        int token = 0;
		SegList l = new SegList();
        try {
	        st = new StreamTokenizer (new FileReader (rpgFileName));
	        st.eolIsSignificant(false);
    	    st.commentChar('#');

            //read interval
            for (int i = 0; i < 4; i++) {
                token = st.nextToken();
            }

            //read no. of points
            token = st.nextToken();
            int noOfPoints = 0;
            if (token == StreamTokenizer.TT_NUMBER)
                noOfPoints = (int) st.nval;
            else {
                RPGConv.errorMsg = "Error: wrong token type";
                throw new Exception();
            }

            Point[] points = new Point[noOfPoints];

			//Point construction

            for (int i = 0; i < noOfPoints; i++) {
                double x = 0.0;
                double y = 0.0;
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    x = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    y = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                points[i] = new Point (x,y);

            }

            //read number of Polygons
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_NUMBER) || (st.nval != 1.0)) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            //read word "POLYGON"
            token = st.nextToken();
            if ((token != StreamTokenizer.TT_WORD) || (!st.sval.equals("POLYGON"))) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }

            int prevIndex = 0;
            int actIndex = 0;

			//read first point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            prevIndex = (int) st.nval;

            //read second point index
			token = st.nextToken();
            if (token != StreamTokenizer.TT_NUMBER) {
                RPGConv.errorMsg = "File format error";
                throw new Exception();
            }
            actIndex = (int) st.nval;

            //read further point indices, construct Segments
			byte cnt = 0;
            while (token != StreamTokenizer.TT_EOF) {
                if (cnt == 0){
                    Segment helpSegment = new Segment (points[prevIndex - 1], points [actIndex - 1]);
                    Segment s = null;
                    Rational zwei = new Rational (2);
                    if (!(helpSegment.getStartpoint().x.equal
                        					(helpSegment.getEndpoint().x))) {
                        		//non-vertical segment
                        Rational newX = (points[prevIndex - 1]).x.plus(
                            ((points [actIndex - 1]).x)).dividedby(zwei);
                        Rational gr = helpSegment.gradient();
                        Rational newY = gr.times(newX.minus(
                            (points[prevIndex - 1]).x)).plus(
                            (points[prevIndex - 1]).y);
                        s = new Segment (points[prevIndex - 1], new Point (newX, newY));
                        }else{
                            	//vertical segment
                            Rational newY = (points[prevIndex - 1]).y.plus(
                                (points [actIndex - 1]).y).dividedby(zwei);
                            s = new Segment (points[prevIndex - 1], new Point (points[prevIndex - 1].x, newY));
                        }
                        l.add (s);
	                }

				prevIndex = actIndex;
				token = st.nextToken();
    	        if ((token != StreamTokenizer.TT_NUMBER) &&
                							 (token != StreamTokenizer.TT_EOF)) {
    	            RPGConv.errorMsg = "File format error";
        	        throw new Exception();
            	}
            	if (token != StreamTokenizer.TT_EOF)
                	actIndex = (int) st.nval;
            	if (cnt != 2)
                    cnt++;
                else
                    cnt = 0;
            }

        }catch  (Exception e) {
            RPGConv.success = false;
            if (RPGConv.errorMsg.equals ("Unknown Error in RPG conversion"))
                RPGConv.errorMsg = e.getMessage();
            try {
            	while (token != StreamTokenizer.TT_EOF)
                	token = st.nextToken();
            }catch (Exception exc) {}
            SegList ln = new SegList();
            return ln;
        }
        return l;
    }


    public static PointList getPoints (String rpgFileName) {
        RPGConv.success = true;
        RPGConv.errorMsg = "Unknown Error in RPG conversion";
        StreamTokenizer st = null;
        int token = 0;
		PointList p = new PointList();
        try {
	        st = new StreamTokenizer (new FileReader (rpgFileName));
	        st.eolIsSignificant(false);
    	    st.commentChar('#');

            //read interval
            for (int i = 0; i < 4; i++) {
                token = st.nextToken();
            }

            //read no. of points
            token = st.nextToken();
            int noOfPoints = 0;
            if (token == StreamTokenizer.TT_NUMBER)
                noOfPoints = (int) st.nval;
            else {
                RPGConv.errorMsg = "Error: wrong token type";
                throw new Exception();
            }

            for (int i = 0; i < noOfPoints; i++) {
                double x = 0.0;
                double y = 0.0;
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    x = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                token = st.nextToken();
	            if (token == StreamTokenizer.TT_NUMBER)
                    y = st.nval * SCALEFACTOR;
	            else {
    	            RPGConv.errorMsg = "Error: wrong token type";
        	        throw new Exception();
            	}
                p.add (new Point (x,y));
            }
            while (token != StreamTokenizer.TT_EOF)
                token = st.nextToken();
        }catch (Exception e) {
            RPGConv.success = false;
            if (RPGConv.errorMsg.equals ("Unknown Error in RPG conversion"))
                RPGConv.errorMsg = e.getMessage();
            try {
                while (token != StreamTokenizer.TT_EOF)
                    token = st.nextToken();
            }catch (Exception exc) {}
            PointList pts = new PointList();
            return pts;
        }
        return p;
    }

}
