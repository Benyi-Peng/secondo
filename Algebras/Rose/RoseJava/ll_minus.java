import java.util.Iterator;
/* Generated by Together */

public class ll_minus {
    
    public static void main (String[] args) {
	
        SegList l1 = null;
        SegList l2 = null;
        SegList l3 = null;
        SegList lResult = null;
	
	l1 = RPGConv.getLines ("lines1000.ply");
        if (!RPGConv.lastConversionSuccessful()){
            System.out.println (RPGConv.lastConversionErrorMsg());
            System.exit(0);
        }
        l2 = RPGConv.getPartsOfLines ("lines1000.ply");
        if (!RPGConv.lastConversionSuccessful()){
            System.out.println (RPGConv.lastConversionErrorMsg());
            System.exit(0);
        }
        l3 = RPGConv.getLines ("linesAdd1000.ply");
        if (!RPGConv.lastConversionSuccessful()){
            System.out.println (RPGConv.lastConversionErrorMsg());
            System.exit(0);
        }
	
	
        Iterator it = l3.iterator();
        while (l2.size() < l1.size()) {
            Segment s = (Segment)((Segment) it.next()).copy();
            s.setStartpoint (new Point (s.getStartpoint().x,
					new Rational (s.getStartpoint().y.plus(new Rational (10)))));
            s.setEndpoint (new Point (s.getEndpoint().x,
				      new Rational (s.getEndpoint().y.plus(new Rational (10)))));
            l2.add (s);
        }
	
	while (it.hasNext()) {
            Object dummy = it.next();
        }
	
	long summe = 0;
	for (int n = 0; n < 10; n++) {
	    
	    long millis1 = System.currentTimeMillis();
	    for (int i = 0; i<1; i++) {
		lResult = Algebra.ll_minus (l1, l2);
	    }
	    long millis2 = System.currentTimeMillis();
	    System.out.println ("Laufzeit: " + (millis2 - millis1));
	    summe = summe + (millis2 - millis1);
	}
	
	System.out.println ("Size of l1: " + l1.size());
	System.out.println ("Size of l2: " + l2.size());
	System.out.println ("Size of result: " + lResult.size());
	System.out.println ("Summe: " + summe);
	System.out.println ("Durchschnittliche Laufzeit: " + summe/10 + " ms");
	
    }
    
}
