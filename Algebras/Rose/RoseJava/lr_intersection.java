/* Generated by Together */

public class lr_intersection {

    public static void main (String[] args) {

        SegList r1 = null;
        SegList l2 = null;
        SegList lResult = null;

	r1 = RPGConv.getRegions ("poly1000_1.ply");
        if (!RPGConv.lastConversionSuccessful()){
            System.out.println (RPGConv.lastConversionErrorMsg());
            System.exit(0);
        }
        l2 = RPGConv.getLines ("LinesInt1000.ply");
        if (!RPGConv.lastConversionSuccessful()){
            System.out.println (RPGConv.lastConversionErrorMsg());
            System.exit(0);
        }
	
	Rational fact = new Rational(70);
	for (int i = 0; i < r1.size(); i++) {
	    ((Segment)r1.get(i)).zoom(fact); }
	for (int i = 0; i < l2.size(); i++) {
	    ((Segment)l2.get(i)).zoom(fact); }
	

        TriList t1 = (new Polygons (r1)).triangles();
	/*
	GFXout gfx = new GFXout();
	gfx.initWindow();
	gfx.addList(t1);
	//gfx.addList(r1);
	//gfx.add(new Point(476,706));
	//gfx.add(new Point(604,716));
	gfx.addList(l2);
	gfx.showIt();
	*/
	
	long summe = 0;
        for (int n = 0; n < 10; n++) {
	    
	    long millis1 = System.currentTimeMillis();
	    for (int i = 0; i<1; i++) {
                lResult = Algebra.rl_intersection (t1, l2);
            }
	    long millis2 = System.currentTimeMillis();
	    System.out.println ("Laufzeit: " + (millis2 - millis1));
	    summe = summe + (millis2 - millis1);
        }
	
        System.out.println ("Summe: " + summe);
        System.out.println ("Durchschnittliche Laufzeit: " + summe/10 + " ms");

	GFXout zzz = new GFXout();
	zzz.initWindow();
	zzz.addList(lResult);
	zzz.showIt();
	
    }

}
