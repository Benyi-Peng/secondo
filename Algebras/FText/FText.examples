Database : berlintest
Restore  : No

Operator : <
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" < 'TestB'
Result   : TRUE

Operator : <
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' < 'TestB'
Result   : TRUE

Operator : <
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' < "TestB"
Result   : TRUE

Operator : <=
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" <= 'TestB'
Result   : TRUE

Operator : <=
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' <= 'TestB'
Result   : TRUE

Operator : <=
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' <= "TestB"
Result   : TRUE

Operator : =
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" = 'TestB'
Result   : FALSE

Operator : =
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' = 'TestB'
Result   : FALSE

Operator : =
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' = "TestB"
Result   : FALSE

Operator : >=
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" >= 'TestB'
Result   : FALSE

Operator : >=
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' >= 'TestB'
Result   : FALSE

Operator : >=
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' >= "TestB"
Result   : FALSE

Operator : >
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" > 'TestB'
Result   : FALSE

Operator : >
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' > 'TestB'
Result   : FALSE

Operator : >
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' > "TestB"
Result   : FALSE

Operator : #
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" # 'TestB'
Result   : TRUE

Operator : #
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' # 'TestB'
Result   : TRUE

Operator : #
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' # "TestB"
Result   : TRUE

Operator : contains
Number   : 1
Signature: text x text -> bool
Example  : query 'hello world' contains 'hell'
Result   : TRUE

Operator : contains
Number   : 2
Signature: text x text -> bool
Example  : query 'hello world' contains 'o w'
Result   : TRUE

Operator : contains
Number   : 3
Signature: text x text -> bool
Example  : query 'hello world' contains 'ld'
Result   : TRUE

Operator : contains
Number   : 4
Signature: text x text -> bool
Example  : query 'hello world' contains 'lox'
Result   : FALSE

Operator : contains
Number   : 5
Signature: text x string -> bool
Example  : query 'hello world' contains "lox"
Result   : FALSE

Operator : contains
Number   : 6
Signature: text x string -> bool
Example  : query 'hello world' contains " wo"
Result   : TRUE

Operator : dice
Number   : 1
Signature: int x text x text -> real
Example  : query dice(1, 'abc', 'bac')
Result   : 0.5

Operator : keywords
Number   : 1
Signature: text -> stream(string)
Example  : query 'two keys' keywords count
Result   :  2

Operator : length
Number   : 1
Signature: text -> int
Example  : query length('hello')
Result   : 5

Operator : sentences
Number   : 1
Signature: text -> stream(text)
Example  : query 'First sentence. Second sentence.' sentences count
Result   : 2

Operator : getcatalog
Number   : 1
Signature: -> stream(tuple((ObjectName string)(Type text)(TypeExpr text)))
Example  : query getcatalog() count >= 9
Result   : TRUE
Remark   : We have 9 system tables at least.

Operator : substr
Number   : 1
Signature: text x int x int -> string
Example  : query substr('123456789A123456789B123456789C', 10, 20)
Result   : "A123456789B"

Operator : subtext
Number   : 1
Signature: text x int x int -> text
Example  : query subtext('123456789A123456789B123456789C', 10, 20)
Result   : 'A123456789B'

Operator : isempty
Number   : 1
Signature: text -> bool
Example  : query isempty('')
Result   : TRUE

Operator : +
Number   : 1
Signature: text x text -> text
Example  : query ('Hello' + ' world!')
Result   : 'Hello world!'

Operator : +
Number   : 2
Signature: text x string -> text
Example  :query ('Hello' + " world!")
Result   : 'Hello world!'

Operator : +
Number   : 3
Signature: string x text -> text
Example  : query ("Hello" + ' world!')
Result   : 'Hello world!'

Operator : find
Number   : 1
Signature: text x text -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', '12345678901234567890123456789012345678901234567890') count
Result   : 1

Operator : find
Number   : 2
Signature: text x text -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', '1234567890') count
Result   : 5

Operator : find
Number   : 3
Signature: text x string -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', "1234567890") count
Result   : 5

Operator : find
Number   : 4
Signature: string x text -> stream(int)
Example  : query find("12345678901234567890123456789012345678901234567890", '1234567890') count
Result   : 4

Operator : find
Number   : 5
Signature: string x string -> stream(int)
Example  : query find("12345678901234567890123456789012345678901234567890", "1234567890") count
Result   : 4

Operator : evaluate
Number   : 1
Signature: text -> stream(tuple((CmdStr text) (Success bool) (Evaluable bool) (Defined bool) (IsFunction bool) (ResultType text) (Result text) (ErrorMessage text) (ElapsedTimeReal real) (ElapsedTimeCPU real)))
Example  : query evaluate('ten feed filter[.no > 5] count') filter[.Result = '5'] count = 1
Result   : TRUE

Operator : evaluate
Number   : 2
Signature: text x bool -> stream(tuple((CmdStr text) (Success bool) (Evaluable bool) (Defined bool) (IsFunction bool) (ResultType text) (Result text) (ErrorMessage text) (ElapsedTimeReal real) (ElapsedTimeCPU real)))
Example  : query evaluate('(count (feed ten))', TRUE) filter[.Result = '10'] count = 1
Result   : TRUE


Operator : replace
Number   : 1
Signature: text x text x string -> text
Example  : query replace('abab','a',"c")
Result   : 'cbcb'

Operator : replace
Number   : 2
Signature: text x string x text -> text
Example  : query replace('abab',"a",'c')
Result   : 'cbcb'

Operator : replace
Number   : 3
Signature: text x string x string -> text
Example  : query replace('abab',"a","c")
Result   : 'cbcb'

Operator : replace
Number   : 4
Signature: string x text x text -> text
Example  : query replace("abab",'a','c')
Result   : 'cbcb'

Operator : replace
Number   : 5
Signature: string x text x string -> text
Example  : query replace("abab",'a',"c")
Result   : 'cbcb'

Operator : replace
Number   : 6
Signature: string x string x text -> text
Example  : query replace("abab","a",'c')
Result   : 'cbcb'

Operator : replace
Number   : 7
Signature: string x string x string -> text
Example  : query replace("abab","a","c")
Result   : 'cbcb'

Operator : replace
Number   : 8
Signature: text x text x text -> text
Example  : query replace('abab','a','c')
Result   : 'cbcb'

Operator : getTypeNL
Number   : 1
Signature: Expr -> text
Example  : query (4 * 6) feed transformstream getTypeNL
Result   : '(stream (tuple ((elem int))))'

Operator : getValueNL
Number   : 1
Signature: Object -> text
Example  : query (4 * 6) getValueNL
Result   : '24'

Operator : getValueNL
Number   : 2
Signature: stream(DATA) -> stream(text)
Example  : query intstream(1,10) getValueNL transformstream aggregateB[elem; fun(T1: text, T2: text) (T1 + ' ' + T2); '']
Result   : '1 2 3 4 5 6 7 8 9 10'

Operator : getValueNL
Number   : 3
Signature: stream(tuple(X)) -> stream(text)
Example  : query ten feed getValueNL transformstream aggregateB[elem; fun(T1: text, T2: text) (T1 + T2); '']
Result   : '(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)'

