#!/bin/bash

function get_localIP
{
  if [ "$SECONDO_PLATFORM" = "linux32" -o "$SECONDO_PLATFORM" = "linux64" ]; then 
    localAddr=$(ifconfig eth0 | grep "inet addr" | awk -F" " '{print $2}')
    localAddr=${localAddr#*:}
  elif [ "$SECONDO_PLATFORM" = "mac_osx" ]; then
    localAddr=$(ifconfig en0 | grep inet | grep broadcast | cut -d' ' -f 2)
  else
    echo "Unavailable SECONDO_PLATFORM value $SECONDO_PLATFORM" >&2
    exit -1
  fi
  echo ${localAddr}
}

function get_clusterIPs
{
  MASTER_IPLIST=""
  if [ "$1" = "-m" ]; then
    MASTER_IPLIST="$PARALLEL_SECONDO_MASTER"
  fi
  SLAVES_IPLIST="$PARALLEL_SECONDO_SLAVES"
  NODES=""
  for node in $(cat ${MASTER_IPLIST} ${SLAVES_IPLIST}); do
    node=$(echo $node | cut -d':' -f 1)
    NODES="$NODES:$node"
  done
  echo ${NODES#:}
}

function get_masterIP
{
  MASTER_IPLIST="$PARALLEL_SECONDO_MASTER"
  CNT=0
  NODES=""
  for node in $(cat ${MASTER_IPLIST}); do
    NODES="$(echo $node | awk -F":" '{print $1}'):$NODES"
    let CNT++
  done
  if [ $CNT -gt 1 ]; then
    echo -e "The master list contains more than 1 location." >&2
    echo ""
    exit -1
  fi
  echo ${NODES%:}
}


# Get the main data server of nodes
# -m including the master, by default it is false
function get_mainDServs
{
  if [ "$1" = "-m" ]; then
    ANODES=($(cat $PARALLEL_SECONDO_MASTER $PARALLEL_SECONDO_SLAVES | awk '!x[$0]++' ))
  else
    ANODES=($(cat $PARALLEL_SECONDO_SLAVES | grep -v $(cat $PARALLEL_SECONDO_MASTER)))
  fi
  
  SERVERS=""
  IPAddrs=""
  for Node in ${ANODES[*]}; do
    IPAddr=$(echo $Node | cut -d':' -f1)
    DSPath=$(echo $Node | cut -d':' -f2)
    DSPath=${DSPath%/*}
    if [ "$(echo $IPAddrs | grep $IPAddr)" = "" ]; then
      SERVERS="$SERVERS $IPAddr:$DSPath"
      IPAddrs="$IPAddrs $IPAddr"
    fi
  done
  
  echo $SERVERS  
}


function get_slaveIPs
{
  MASTERIP=$(get_masterIP)
  RPSLVIPS=$(get_clusterIPs -m)  # The IPs may redundant

  CLEANIPS=""
  IFS=':'
  for IP in $RPSLVIPS; do
    CLEANIPS=${CLEANIPS/${IP}/} # remove the exist one
    CLEANIPS="$CLEANIPS $IP"
  done
  if [ "$1" != "-m" ]; then 
    CLEANIPS=${CLEANIPS/${MASTERIP}}
  fi

  echo ${CLEANIPS}
}

function get_NodeIP
{
  if [ $# -eq 0 ]; then
    NODEID=0
    echo -e "$NODEID: $(get_masterIP)\n"
    for IPADDR in $(get_slaveIPs); do
      let NODEID++
      echo -e "$NODEID: $IPADDR\n"
    done
  fi
}

function get_scrID
{
  declare -i ATTIMES=5
  while [ $ATTIMES -gt 0 ]; do
    sid=$(screen -ls | grep $1 | grep Detached | cut -f1 -d'.' | tr -d '\t')
    sin=$(echo -e "$sid" | wc -l)  # Get the number of screen id
    if [ $sin -eq 1 -a "$sid" != "" ];then
      echo $sid
      break
    else
      sid=""
    fi
    let ATTIMES--
  done
  if [ "$sid" = "" ];then
    echo "Error! Cannot get an unique screen ID" >&2
    echo ""
  fi
}

function exec_scr
{
# Send a command $2 to a detached screen with indicated ID $1
  sid=$1
  comm=$2
  screen -S $sid -p 0 -X stuff "${comm}$(printf \\r)" 
#  `screen -r ${sid} -p bash -X stuff $"${comm}"`
#  `screen -r ${sid} -p bash -X stuff $'\n'`
}

# Send a consequence of commands to an indicated screen session
function exec_scr_commands
{
  SESSION=$1
  shift
  while [ "$1" != "" ]; do 
    COMMAND=$1
    screen -S $SESSION -p 0 -X stuff "${COMMAND}$(printf \\r)"
    shift
  done
}

#function get_psecLoc
#{
#  MASTER_IPLIST=""
#  if [ "$1" = "-m" ]; then
#    MASTER_IPLIST="$PARALLEL_SECONDO_MASTER"
#  fi
#  SLAVES_IPLIST="$PARALLEL_SECONDO_SLAVES"
#  NODES=""
#  for node in $(cat ${MASTER_IPLIST} ${SLAVES_IPLIST}); do
#    node=$(echo $node | awk -F":" '{print $1":"$2}')
#    NODES="$NODES@${node%${PARALLEL_SECONDO_TMP_FDNAME}*}"
#  done
#  echo ${NODES#@}
#}

# Get the listening port of from a SecondoConfig file 
function get_secPort
{
  if [ -f "$1" ]; then
    PORTLINE=`grep "^[ ]*SecondoPort*=*[0-9]*$" "$1"`
    declare -i portNum=${PORTLINE#*=}
    if [ $portNum -le 0 ]; then
      echo "Invaliable Secondo listener port: $portNum" >&2
    fi
    echo $portNum
  else
    echo "The Secondo configure file \`$1' doesn't exit"
    echo 0
  fi
}

# Check the port in a SecondoConfig file is available
function isPortAvailable
{
  portNum=$1
  if [ "$portNum" != "" -a "${portNum/[0-9]*/}" == "" ]; then
    if [ $portNum -gt 0 ]; then
      LLNUM=$(netstat -atn | grep ${portNum} | grep -c LISTEN)
      if [ $LLNUM -eq 0 ]; then
        echo true 
        return
      fi
    fi
  fi
  echo false
}

# Get the register socket file name for Secondo Monitor
function get_regFileName
{
  CONF="$1"
  if [ "$CONF" != "" ]; then
    portNum=$(get_secPort "$CONF")
    if [ $portNum -ne 0 ]; then
      REGNAME=$(grep "^RegistrarSocketNamePrefix*=" "$CONF")
      REGNAME=${REGNAME#*=}
      if [ "$REGNAME" != "" ]; then
        echo "${REGNAME}_port${portNum}"
        return 
      fi
    fi
  fi
  echo ""
}

# Get the Secondo Home path
function get_secHome
{
 CONF="$1"
  if [ "$CONF" != "" ]; then
    SECHOME=$(grep "^SecondoHome*=" "$CONF")
    SECHOME=${SECHOME#*=}
    echo $SECHOME
    return
  fi
  echo ""
}

# Get the absolute path of a given file path
function get_abPath
{
  FILEPATH=$(dirname "$1")
  FILEPATH=$(cd $FILEPATH; pwd)
  FILENAME=${1##*/}
  echo "$FILEPATH/$FILENAME"
}

# Get the closest prime number 
function get_primeNum
{
  NUM=$1
  while [ `factor $NUM | awk '{print NF}'` -ne 2 ]; do 
    let NUM--
  done
  echo $NUM
}

# Set sed command argument according to platforms
function PSEDOPT
{
  if [ "$SECONDO_PLATFORM" = "mac_osx" ]; then
    echo "-i '' -e "
  else
    echo "-i "
  fi
}
