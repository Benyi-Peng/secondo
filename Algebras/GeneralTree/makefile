#This file is part of SECONDO.

#Copyright (C) 2006, University in Hagen, Department of Computer Science,
#Database Systems for New Applications.

#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

########################################################################
#
# SECONDO makefile for General Tree Algebra
#
########################################################################

# include global definitions
include ../../makefile.env

DOCU_FILES = GeneralTreeAlgebra.cpp

GTAF_DOCU_FILES = GTAF/GTAF.pd

GTAF_DOCU_EXT_FILES = $(GTAF_DOCU_FILES) \
	GTAF/GTAF2.pd \
	GTAF/GTAF.h \
	GTAF/GTAF_Types.h \
	GTAF/GTAF_Config.h \
	GTAF/GTAF_NodeConfig.h \
	GTAF/GTAF_NodeSupp.h \
	GTAF/GTAF_FileNode.h \
	GTAF/GTAF_Base.h \
	GTAF/GTAF_Entries.h \
	GTAF/GTAF_Nodes.h \
	GTAF/GTAF_Manager.h \
	GTAF/GTAF_Errors.h \
	GTAF/GTAF3.pd \
	GTAF/GTAF_NodeConfig.cpp \
	GTAF/GTAF_NodeSupp.cpp \
	GTAF/GTAF_FileNode.cpp \
	GTAF/GTAF_Manager.cpp \
	GTAF/GTAF_Errors.cpp

# names of the generated documentation files ("make docu" will
# generate the respective .pdf files)
DOCU = GeneralTree
GTAF_DOCU = gtaf
GTAF_DOCU_EXT = gtaf_ext

# This is the only macro which must be changed in order to
# define a module name for an algebra. The rest of this makefile
# should work for nearly every algebra.
MODNAME = GTAFAlgebra

# Use the mace CCFLAGS to add special compiler flags if needed.
# In this case the defaults are sufficient
CCFLAGS += $(ALG_INC_DIRS)

# add cpp files in the defined subdirectories
GTREE_DIRS := Common GTAF
GTREE_FILES := $(foreach dir,$(GTREE_DIRS),$(wildcard $(dir)/*.cpp))
OBJECTS += $(patsubst %.cpp, %.o, $(GTREE_FILES))

# The next rule will create a ".o" file for every ".cpp" file and
# creates a "lib$(MODNAME).a" file in the secondo/lib dir. Rules
# for creating ".dep" files and ".o" files are defined in makefile.env
.PHONY: all
all: $(OBJECTS) $(LIBOBJ)

# DEP_FILES is a macro defined in makefile.env. It will contain
# a list of files which are generated by the compiler to
# detect dependencies to other code files.
include $(DEP_FILES)

# The rule below creates a library file. Maybe as shared or as static
# object. In case of a shared object all dependencies to other libraries
# must be defined. However, currently the command make shared=yes will
# not work. But in principle every algebra implementor has to define dependencies
# to other libraries here, since the make procedure does not know how to do this
# automatically.
$(LIBOBJ): $(OBJECTS)
ifeq ($(shared),yes)
# ... as shared object
	$(LD) $(LDFLAGS) -o $(LIBOBJ) $(LDOPT) $(OBJECTS) -L$(LIBDIR) -lStandardAlgebra $(SDBLIB) $(TOOLLIB) $(DEFAULTLIB)
else
# ... as static library
	$(AR) -r $(LIBOBJ) $(OBJECTS)
endif

# remove all generated stuff
.PHONY: clean
clean:
	$(RM) $(DEP_FILES) $(OBJECTS) $(LIBOBJ) $(DOCU).pdf $(GTAF_DOCU).pdf $(GTAF_DOCU_EXT).pdf $(DOCU).dvi $(GTAF_DOCU).dvi $(GTAF_DOCU_EXT).dvi



#build docu as pdf $(DOCU_COMPLETE).pdf also contains all implementation files
.PHONY: pdf
docu: $(DOCU).pdf $(GTAF_DOCU).pdf $(GTAF_DOCU_EXT).pdf
$(DOCU).pdf: $(DOCU_FILES)
	cat $(DOCU_FILES) > $(DOCU)
	pd2dvi $(DOCU)
	pd2pdf $(DOCU)
	rm $(DOCU) $(DOCU).toc $(DOCU).log $(DOCU).aux $(DOCU).tex

$(GTAF_DOCU).pdf: $(GTAF_DOCU_FILES)
	cat $(GTAF_DOCU_FILES) > $(GTAF_DOCU)
	pd2dvi $(GTAF_DOCU)
	pd2pdf $(GTAF_DOCU)
	rm $(GTAF_DOCU) $(GTAF_DOCU).toc $(GTAF_DOCU).log $(GTAF_DOCU).aux $(GTAF_DOCU).tex

$(GTAF_DOCU_EXT).pdf: $(GTAF_DOCU_EXT_FILES)
	cat $(GTAF_DOCU_EXT_FILES) > $(GTAF_DOCU_EXT)
	pd2dvi $(GTAF_DOCU_EXT)
	pd2pdf $(GTAF_DOCU_EXT)
	rm $(GTAF_DOCU_EXT) $(GTAF_DOCU_EXT).toc $(GTAF_DOCU_EXT).log $(GTAF_DOCU_EXT).aux $(GTAF_DOCU_EXT).tex
