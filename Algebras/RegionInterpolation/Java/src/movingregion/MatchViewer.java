/*
 * MatchViewer.java
 *
 * Created on 15. August 2007, 00:40
 */

package movingregion;

/**
 *
 * @author  java
 */

import java.util.*;
import java.awt.*;
import javax.swing.*;

public class MatchViewer extends javax.swing.JPanel
{
    Match myMatch;
    ConvexHullTreeViewer source;
    ConvexHullTreeViewer target;
    /** Creates new form MatchViewer */
    public MatchViewer(Match myMatch)
    {
        this.myMatch=myMatch;
        initComponents();
        source=new ConvexHullTreeViewer(myMatch.getSource(),this);
        target=new ConvexHullTreeViewer(myMatch.getTarget(),this);
        this.regions.add(source);
        this.regions.add(target);
    }
    
    public void changeSelection(RegionTreeNode[] nodes)
    {
        Vector tmp=new Vector();
        for(int i=0;i<nodes.length;i++)
        {
            if(myMatch.getMatches(nodes[i])!=null)
            {
                for(int j=0;j<myMatch.getMatches(nodes[i]).length;j++)
                {
                    tmp.add(myMatch.getMatches(nodes[i])[j]);
                }
            }
            
        }
        RegionTreeNode[] res=new RegionTreeNode[tmp.size()];
        for(int i=0;i< tmp.size();i++)
        {
            res[i]=(RegionTreeNode)tmp.elementAt(i);
        }
        if(source.contains(nodes[0]))
            target.setActual(res);
        else
            source.setActual(res);
        this.repaint();
    }
    
    public void setHei(int height)
    {
        source.setHei(height/2);
        target.setHei(height/2);
    }
    
    
    public void setWid(int width)
    {
        source.setWid(width);
        target.setWid(width);
    }
    
    public void paint(Graphics g)
    {
        super.paint(g);
//        System.out.println("repaint "+this.myMatch.getName());
        g.setFont(new Font("SansSerif",Font.BOLD,24));
        FontMetrics fm=g.getFontMetrics();
        int y=0;//(int)(fm.getMaxAscent()*1.5);
        int maxStringWidth=this.getWidth()/4;
        //g.drawString(this.myMatch.getName(),this.getWidth()-fm.stringWidth(myMatch.getName())-jScrollPane1.getVerticalScrollBar().getWidth()-10,y);
        fm=g.getFontMetrics();
        String myName=this.myMatch.getName();
        do
        {
            y=y+(int)(fm.getMaxAscent()*1.5);
            String tmp="";
            while (fm.stringWidth(tmp)<maxStringWidth)
            {
              //  System.out.println(tmp);
                if(myName.indexOf(" ")!=-1)
                {
                    tmp=tmp+" "+ myName.substring(0,myName.indexOf(" "));
                    myName=myName.substring(myName.indexOf(" ")+1);
                }
                else
                {
                    //System.out.println(Descrip);
                    tmp=tmp+" "+ myName;
                    myName="";
                }
            }
            g.drawString(tmp,this.getWidth()-fm.stringWidth(tmp)-jScrollPane1.getVerticalScrollBar().getWidth()-10,y);            
        }
        while(myName.length()>0);//fm.stringWidth(Descrip)>maxStringWidth);
        
        g.setFont(new Font("SansSerif",Font.PLAIN,16));
        fm=g.getFontMetrics();        
        String Descrip=myMatch.getDescription();
        do
        {
            y=y+(int)(fm.getMaxAscent()*1.5);
            String tmp="";
            while (fm.stringWidth(tmp)<maxStringWidth)
            {
              //  System.out.println(tmp);
                if(Descrip.indexOf(" ")!=-1)
                {
                    tmp=tmp+" "+ Descrip.substring(0,Descrip.indexOf(" "));
                    Descrip=Descrip.substring(Descrip.indexOf(" ")+1);
                }
                else
                {
                    //System.out.println(Descrip);
                    tmp=tmp+" "+ Descrip;
                    Descrip="";
                }
            }
            g.drawString(tmp,this.getWidth()-fm.stringWidth(tmp)-jScrollPane1.getVerticalScrollBar().getWidth()-10,y);            
        }
        while(Descrip.length()>0);//fm.stringWidth(Descrip)>maxStringWidth);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jScrollPane1 = new javax.swing.JScrollPane();
        regions = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        regions.setLayout(new java.awt.GridLayout(2, 0));

        regions.addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentMoved(java.awt.event.ComponentEvent evt)
            {
                regionsComponentMoved(evt);
            }
        });

        jScrollPane1.setViewportView(regions);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    private void regionsComponentMoved(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_regionsComponentMoved
    {//GEN-HEADEREND:event_regionsComponentMoved
        
        this.repaint();
    }//GEN-LAST:event_regionsComponentMoved
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel regions;
    // End of variables declaration//GEN-END:variables
    
}
