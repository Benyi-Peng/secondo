#
# MRegionOpsAlgebra-Testfile
#
# November 2008, M. Hoeger
#

# *
# * Preparing the test database
# *

#restore database berlintest from berlintest;
open database berlintest;

delete mpA;
delete mpB;
delete rA;
delete rB;
delete mrA;
delete mrB;
delete t0A;
delete t0B;
delete t1A;
delete t1B;
delete t0;
delete t1;
delete noSamples;
delete step;
delete samples;
delete tolerance;
delete aIb;
delete bIa;
delete aUb;
delete bUa;
delete aMb;
delete bMa;

#setup mregionopstest

# *
# * Create data in the test database
# *

let mpA = tripU5;
#let mpB = mpA;
let mpB = tripU8a;
#let mpA = train1;
#let mpB = train5;

#let rA = grunewald;
#let rB = grunewald;
let rA = grunewald translate[0.0, -2000.0];
let rB = westhafen scale[10.0] translate[-1500.0 - 54000.0, 7500.0 - 150000.0];

let noSamples = 100.0;

let mrA = move(mpA, rA);
let mrB = move(mpB, rB);

let t0A = instant2real(inst(initial(mpA)));
let t0B = instant2real(inst(initial(mpB)));
let t1A = instant2real(inst(final(mpA)));
let t1B = instant2real(inst(final(mpB)));

let t0 = ifthenelse(t0A < t0B, t0A, t0B);
let t1 = ifthenelse(t1A > t1B, t1A, t1B);

let step = (abs(t1 - t0)) / noSamples;

let samples = realstream(t0, t1, step) 
              use[fun(t: real) create_instant(t)] transformstream consume;

let tolerance = 0.1;

# ***********************************************************
# * intersection
# ***********************************************************

#testcase mrA intersection mrB

#yields ()

let aIb = intersection(mrA, mrB);

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(aIb atinstant t)) 
- 
area(intersection_new(val(mrA atinstant t), val(mrB atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************

#testcase mrB intersection mrA

#yields ()

let bIa = intersection(mrB, mrA);

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(bIa atinstant t)) 
- 
area(intersection_new(val(mrB atinstant t), val(mrA atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************
# * union
# ***********************************************************

#testcase mrA union mrB

#yields ()

let aUb = mrA union mrB;

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(aUb atinstant t)) 
- 
area(union_new(val(mrA atinstant t), val(mrB atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************

#testcase mrB union mrA

#yields ()

let bUa = mrB union mrA;

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(bUa atinstant t)) 
- 
area(union_new(val(mrB atinstant t), val(mrA atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************
# * minus
# ***********************************************************

#testcase mrA minus mrB

#yields ()

let aMb = mrA minus mrB;

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(aMb atinstant t)) 
- 
area(minus_new(val(mrA atinstant t), val(mrB atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************

#testcase mrB minus mrA

#yields ()

let bMa = mrB minus mrA;

#yields (bool TRUE)

query samples feed transformstream 
use[ fun(t: instant) 
abs( 
area(val(bMa atinstant t)) 
- 
area(minus_new(val(mrB atinstant t), val(mrA atinstant t)))
)]
printstream transformstream max[elem] < tolerance;

# ***********************************************************

#teardown

close database;


