Database : berlintest
Restore  : No 

Operator : connect
Number   : 1  
Signature: text  x int x text -> bool
Example  : query connect('localhost', 1234, 'SecondoConfig.ini')
Result   : FALSE


Operator : checkConnections 
Number   : 1  
Signature: -> strean(tuple)
Example  : query checkConnections() count
Result   : 0

Operator : rcmd 
Number   : 1  
Signature: int x {string,text} -> stream(tuple)
Example  : query rcmd(0,'list databases') count
Result   : 0

Operator : disconnect
Number   : 1  
Signature: int -> int , -> int
Example  : query disconnect(0)
Result   : 0

Operator  : rquery
Number    : 1
Signature : int x {string,text} -> ANY
Example   : query rquery(0,'query ten count')
Result    : bug
Remark    : requires a remote server

Operator  : prcmd
Number    : 1
Signature : stream(tuple) x attrName x attrName -> stream(tuple + E)
Example   : query intstream(0,5) namedtransformstream[Server] extend[ W : 'open database berlintest'] prcmd[Server,W] consume
Result    : bug
Remark    : requires a remote server

Operator : sendFile
Number   : 1
Signature : int x {string, text} x {string, text} -> bool
Example   : query sendFile(0, 'local.txt', "remote.txt")
Result    : bug
Remark    : Requires a remote server

Operator  : requestFile
Number    : 1
Signature : int x {string, text} x {string, text} -> bool
Example   : query requestFile(0, 'remote.txt', "local.txt")
Result    : bug
Remark    : Requires a remote server


Operator  : psendFile
Number    : 1
Signature : stream(tuple) x ID x ID x ID -> stream(extend(tuple))
Example   : query filetable feed psendFile[ServerNo, LocalFileName, RemoteFileName] consume
Result    : bug
Remark    : Requires a remote server


Operator  : prequestFile
Number    : 1
Signature : stream(tuple) x ID x ID x ID -> stream(extend(tuple))
Example   : query filetable feed prequestFile[ServerNo, RemoteFileName, LocalFileName] consume
Result    : bug
Remark    : Requires a remote server

Operator  : getRequestFolder 
Number    : 1
Signature : int -> text
Example   : query getRequestFolder(0)
Result    : (text undefined)

Operator  : getSendFolder 
Number    : 1
Signature : int -> text
Example   : query getSendFolder(0)
Result    : (text undefined)

Operator : pconnect
Number   : 1
Signature: stream(tuple(X)) x id x id x id -> stream(tuple(X + CNo))
Example  : query connectTable feed pconnect[Host, Port, Config] consume
Result   : bug
Remark   : Requires a remote server


Operator : pquery
Number   : 1
Signature: stream(int) x {string.text} x int -> stream(Tuple(ServerNo : int, Result : text))
Example  : query intstream(0,3) pquery['query ten count', 0] consume
Result   : bug
Remark   : Requires a remote server


Operator : put
Number   : 1
Signature: darray2(T) x int x T -> darray2(T)
Example  : query put([const darray2(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))],3,27)
Result   : bug
Remark   : Requires a remote server

Operator : get
Number   : 1
Signature: darray2(T) x int -> T
Example  : query get([const darray2(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))],3)
Result   : bug
Remark   : Requires a remote server

Operator : size
Number   : 1
Signature: darray2(T) -> int 
Example  : query size([const darray2(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))])
Result   : 4

Operator : getWorkers 
Number   : 1
Signature: darray2(T) -> stream(tuple)
Example  : query getWorkers([const darray2(int) value (da1 4 (("onehost" 1234 "SecondoConfig.ini") ("otherhost" 1234 "SecondoConfig.ini")))]) count
Result   : 2


Operator  : fconsume5
Number    : 1
Signature : stream(TUPLE) x {string, text} -> stream(TUPLE)
Example   : query ten fconsume5['ten.bin'] count
Result    : 10


Operator  : ffeed5
Number    : 1
Signature : {string, text} -> stream(TUPLE)
Example   : query ffeed5('ten.bin') count
Result    : 10

Operator  : createDarray2
Number    : 1 
Signature : stream(TUPLE) x int x string x ANY x Ident x Ident x Ident -> darray2
Example   : query workers feed createDarray2[8,"DA1",strassen, Host, Port, Config]
Result    : bug
Remark    : in development

Operator: pput
Number  : 1
Signature : darray2(T) x (int x t)+ -> darray2(T)
Example   : query da3 feed pput[0,ten,1,ten]
Result    : bug
Remark    : remote server required






