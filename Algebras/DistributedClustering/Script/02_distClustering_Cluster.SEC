####################################
# Script for distribute Clustering #
#                                  # 
####################################

open database berlintest;

# initial parameters
delete Workers4;
let Workers4 = [const rel(tuple([Server: string, Port: int])) value
(("132.176.69.181" 91234)
 ("132.176.69.181" 94321)
 ("132.176.69.182" 91236)
 ("132.176.69.182" 95321))];
 
delete CntWorkers;
let CntWorkers = 4;
delete EPS;
let EPS = 5000.01;
delete MintPts;
let MintPts = 5;

#start workers
query Workers4 feed extend
[Started: connect(.Server, .Port, "SecondoConfig.ini")]consume;

#open databases
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'open database berlintest'] prcmd[Server,W] consume;

## distribute data for MergeSort ####################
#creat a file for each worker
delete lokalPath;
let lokalPath = secondoHome() + '/distFile.bin';
query Orte2 feed addcounter[No, 0] 
fdistribute5[lokalPath, CntWorkers, No] count;

#send a file to each worker
delete AktWorker;
let AktWorker = 0;
delete SendFolder;
let SendFolder = '';
delete QueryText;
let QueryText = '';
while AktWorker < CntWorkers do
{
  query sendFile(AktWorker, lokalPath + "_" + num2string(AktWorker) , 
  "distFile.bin") |
  update SendFolder := getSendFolder(AktWorker) |
  query rcmd(AktWorker, 'delete DistClPath ') consume |
  query rcmd(AktWorker, 'let DistClPath = secondoHome() + "/" +"' + SendFolder 
  + '" + "/"') consume |
  query rcmd(AktWorker, 'delete WorkerId ') consume |
  query rcmd( AktWorker, 'let WorkerId = ' + num2string(AktWorker))consume |
  query removeFile(lokalPath + "_" + num2string(AktWorker)) |
  update AktWorker := AktWorker + 1
}
endwhile;

#create relation DistRel from File and delete File
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete DistRel'
] prcmd[Server,W] consume;
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'let DistRel = ffeed5(DistClPath + "distFile.bin") remove[No] consume'
] prcmd[Server,W] consume;
query intstream(0,CntWorkers - 1) pquery[
'query removeFile(DistClPath + "distFile.bin")' ,0] consume;

#create Sample files #############################
# filesize is r=m*ln(n*t)                       ##
# t... count of machines                        ##
# n... count of objects                         ##
# m... m = n/t count of objects at each machine ##
##################################################
query intstream(0,CntWorkers - 1) pquery[
'query DistRel feed head[real2int(floor(DistRel 
count / logB(Orte2 count * 4, 2.718281828)))] 
fconsume5[DistClPath + "SampPartRel.bin"]count'
,0] consume;

#distribute files to other workers
delete HelpInt;
let HelpInt = 0;
update AktWorker := 0;

while AktWorker < CntWorkers do
{ 
  while HelpInt < CntWorkers do
  {
    if AktWorker # HelpInt then
      query transferFile(AktWorker,HelpInt,93456, 
      rquery(AktWorker,"query DistClPath") + "SampPartRel.bin", 
      rquery(HelpInt,"query DistClPath") + "SampPartRel.bin_" 
      + num2string(AktWorker))
    endif |
    update HelpInt := HelpInt + 1
  }
  endwhile |
  query rquery(AktWorker,
  'query moveFile( DistClPath + "SampPartRel.bin", 
  DistClPath + "SampPartRel.bin_' + num2string(AktWorker) + '")') |
  update HelpInt := 0 |
  update AktWorker := AktWorker + 1
} 
endwhile;

# concat distributed sample files to a relation on each Worker
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete SampPartRel'
] prcmd[Server,W] consume;

# create execution Query
delete Query;
update AktWorker := 1;
let Query = 'let SampPartRel = ffeed5(DistClPath + "SampPartRel.bin_0")';
while AktWorker < CntWorkers do
{ 
  update Query := Query + 
  ' ffeed5(DistClPath + "SampPartRel.bin_' 
    + num2string(AktWorker) + '") concat' |
  update AktWorker := AktWorker + 1
} 
endwhile ;
update Query := Query + ' consume' ;

# execute Query
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
Query
] prcmd[Server,W] consume;

# remove old Files
update AktWorker := 0;
while AktWorker < CntWorkers do
{ 
  query intstream(0,CntWorkers - 1) pquery[
  'query removeFile(DistClPath + "SampPartRel.bin_' 
  + num2string(AktWorker) + '")'
  ,0] consume |
  update AktWorker := AktWorker + 1
} 
endwhile ;

# create new relation with disttributed Sample Sort (distsamp) 
# -> new Relation is DistUnSortRel
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete DistUnSortRel'
] prcmd[Server,W] consume;

query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'let DistUnSortRel = DistRel feed SampPartRel feed distsamp[GeoData, DsAttr, ' 
  + num2string(CntWorkers) + '] consume'
] prcmd[Server,W] consume;

# create files from DistUnSortRel respective to 
#his worker and distribute the files
# create files
update AktWorker := 0;
while AktWorker < CntWorkers do
{ 
  query intstream(0,CntWorkers - 1) pquery[
  'query DistUnSortRel feed filter[.DsAttr = ' + num2string(AktWorker) + '] 
   fconsume5[DistClPath + "SampPartRel.bin__' + num2string(AktWorker) 
   + '"] count'
 ,0] consume |
  update AktWorker := AktWorker + 1
} 
endwhile ;

# distribute files 
update HelpInt := 0;
update AktWorker := 0;

while AktWorker < CntWorkers do
{ 
  while HelpInt < CntWorkers do
  {
    if AktWorker # HelpInt then
      query transferFile(AktWorker,HelpInt,93456, 
      rquery(AktWorker,"query DistClPath") + "SampPartRel.bin__" 
      + num2string(HelpInt), 
      rquery(HelpInt,"query DistClPath") + "SampPartRel.bin_" 
      + num2string(AktWorker))
    endif |
    update HelpInt := HelpInt + 1
  }
  endwhile |
  query rquery(AktWorker,
  'query moveFile( DistClPath + "SampPartRel.bin__' 
  + num2string(AktWorker) + '", DistClPath + "SampPartRel.bin_' 
  + num2string(AktWorker) + '")') |
  update HelpInt := 0 |
  update AktWorker := AktWorker + 1
} 
endwhile;

# remove old Files SampPartRel.bin__i
update AktWorker := 0;
while AktWorker < CntWorkers do
{ 
  query intstream(0,CntWorkers - 1) pquery[
  'query removeFile(DistClPath + "SampPartRel.bin__' 
  + num2string(AktWorker) + '")'
 ,0] consume |
  update AktWorker := AktWorker + 1
} 
endwhile ;

# delete DistRel and SampPartRel and DistUnSortRel
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete DistRel'
] prcmd[Server,W] consume;

query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete SampPartRel'
] prcmd[Server,W] consume;

query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'delete DistUnSortRel'
] prcmd[Server,W] consume;

#concat new files to relation DistRel
# use Query which was created above -> Relation stored as SampPartRel
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
Query
] prcmd[Server,W] consume;

# remove old Files SampPartRel.bin_i
update AktWorker := 0;
while AktWorker < CntWorkers do
{ 
  query intstream(0,CntWorkers - 1) pquery[
  'query removeFile(DistClPath + "SampPartRel.bin_' 
  + num2string(AktWorker) + '")'
  ,0] consume |
  update AktWorker := AktWorker + 1
} 
endwhile ;

# begin dbscan with SampPartRel and store in DistRel
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'let DistRel = SampPartRel feed dbdacscan[GeoData, ClusterId, "DbScanNeigRel", ' 
+ num2string(EPS) + ' , ' + num2string(MintPts) + ']consume'
] prcmd[Server,W] consume;

delete NeighborRel;
let NeighborRel = '';
delete AktRound;
let AktRound = 0;
delete LastRound;
let LastRound = ceil(CntWorkers / 2);

while AktRound < LastRound do
{ 
# examine Neighborsrel 
  update NeighborRel := rquery(0,'query DistRel feed extract [NeighborsRelN]')|
# create file from DistRel and Neighborsrel (after dbdacscan)
  query intstream(0,CntWorkers - 1) filterintstream[
    (. mod real2int(pow (2,AktRound)))= 0]
    pquery[
    'query DistRel feed fconsume5[DistClPath + "DbScanFile.bin"]count'
    ,0] consume |
  query intstream(0,CntWorkers - 1) filterintstream[
    (. mod real2int(pow (2,AktRound))) = 0]
    pquery[
    'query ' + NeighborRel 
    + ' feed fconsume5[DistClPath + "NeighborFile.bin"]count'
   ,0] consume |
# delete NeighborRel
  query intstream(0,CntWorkers - 1) filterintstream[
    (. mod real2int(pow (2,AktRound))) = 0]
    namedtransformstream[Server] extend[ W :
    'delete ' + NeighborRel 
    ] prcmd[Server,W] consume |
# send file to lower left neighbors ( 0 - n/2-1)
  update HelpInt := 0 |
  update AktWorker := real2int(pow (2,AktRound)) |
  while AktWorker < CntWorkers do
  { 
    query transferFile(AktWorker, HelpInt,93456, 
      rquery(AktWorker,"query DistClPath") + "DbScanFile.bin", 
      rquery(HelpInt,"query DistClPath") + "DbScanFile.bin_1") |
    query transferFile(AktWorker, HelpInt,93456, 
      rquery(AktWorker,"query DistClPath") + "NeighborFile.bin", 
      rquery(HelpInt,"query DistClPath") + "NeighborFile.bin_1") |
    query rquery(AktWorker,
    'query removeFile(DistClPath + "DbScanFile.bin")') |
    query rquery(AktWorker,
    'query removeFile(DistClPath + "NeighborFile.bin")') |
    update HelpInt := HelpInt + real2int(pow (2,AktRound + 1)) |
    update AktWorker := AktWorker + real2int(pow (2,AktRound + 1))
  } 
  endwhile |
# execute distclmerge with DbScanFile.bin and NeighborFile.bin
  query intstream(0,CntWorkers - 1) 
  filterintstream[(. mod real2int(pow (2,AktRound + 1))) = 0] 
    namedtransformstream[Server] extend[ W :
    'update DistRel :=  
    ffeed5(DistClPath + "DbScanFile.bin") 
    ffeed5(DistClPath + "NeighborFile.bin")
    ffeed5(DistClPath + "DbScanFile.bin_1") 
    ffeed5(DistClPath + "NeighborFile.bin_1")
    distclmerge[GeoData, ClusterId, "DbScanNeigRel", ' 
    + num2string(EPS) + ' , ' + num2string(MintPts) + ']consume'
    ] prcmd[Server,W] consume |
# remove Files
  query intstream(0,CntWorkers - 1) 
  filterintstream[(. mod real2int(pow (2,AktRound + 1))) = 0] 
    pquery[
    'query removeFile(DistClPath + "DbScanFile.bin")'
    ,0] consume |
  query intstream(0,CntWorkers - 1) 
  filterintstream[(. mod real2int(pow (2,AktRound + 1))) = 0] 
    pquery[
    'query removeFile(DistClPath + "DbScanFile.bin_1")'
    ,0] consume |
  query intstream(0,CntWorkers - 1) 
  filterintstream[(. mod real2int(pow (2,AktRound + 1))) = 0] 
   pquery[
    'query removeFile(DistClPath + "NeighborFile.bin")'
   ,0] consume |
  query intstream(0,CntWorkers - 1) 
  filterintstream[(. mod real2int(pow (2,AktRound + 1))) = 0] 
    pquery[
    'query removeFile(DistClPath + "NeighborFile.bin_1")'
   ,0] consume |
  update AktRound := AktRound + 1
} 
endwhile ;

# after last Round print FinalRelation at Worker 0
# query rquery(0, 'query DistRel ');

# number of clusters
query rquery(0, 'query DistRel feed sortby[ClusterId]
groupby[ClusterId ; C : group count] count');

#close databases
query intstream(0,CntWorkers - 1) namedtransformstream[Server] extend[ W :
'close database'] prcmd[Server,W] consume;

#disconnect
query disconnect();
