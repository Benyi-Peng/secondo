# ---- TEIL 1 ----

(delete ai);

(let ai = ( (array int) (0 1 2 3) ));

(delete f);

(let f =    (fun (i int) (* i i))  );

(query (loop ai f));

(query (loop (loop (loop ai f) f) f));

# ---- TEIL 2 ----

(delete ar);

(delete ar);

(create ar : (array(rel(tuple((no int))))));

(update ar := ( (
                  array(rel(tuple((no int))))
                )
                (
                  ( (1) )
                  ( (2) (3) )
                  ( (4) (5) (6) )
                  ( (7) (8) (9) (10) )
                )
              )
)


(delete fil);

(let fil =
             (fun (par (rel(tuple((no int)))))
               (consume
                 (filter
                   (feed par)
                     (fun (tuple1 TUPLE) (> (attr tuple1 no) 2))))) );

(query (loop ar fil));

# ---- TEIL 3 ----
# setzt voraus, dass die Relation plz vorhanden ist.

(delete c);

(let c =
  (fun (par (rel(tuple((PLZ int)(Ort string))))) (count par))
);

delete plzArray;

let plzArray = plz feed extend[pkg: log(randint(65535))] distribute[pkg];

(query (loop plzArray c));

(delete wald);

(let wald =
  (fun (par (rel(tuple((PLZ int)(Ort string)))))
    (consume
        (filter
            (feed par)
            (fun
                (tuple1 TUPLE)
                (contains
                    (attr tuple1 Ort)
                    "wald"))))));

(query (loop plzArray wald));



# Text syntax:

delete type plztype;

type plztype = rel(tuple([PLZ:int, Ort:string]));

query plzArray loop[fun(p:plztype) p count];

query plzArray loop[fun (p:plztype) p feed filter[.Ort contains "wald"]
	consume];







# ---- TEIL 4 ----

(delete ten);

(let ten = (consume (summarize ar)));

(delete tree);

(let tree =
              (fun (par (rel(tuple((no int))))) (createbtree par no)) );

# (let tenind = (tree ten));

# Es erscheint die folgende Zeile:
# Assertion failed: file != 0, file BTreeAlgebra.cpp, line 424
