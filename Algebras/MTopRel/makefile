########################################################################
#
# SECONDO makefile for TopRel  Algebra C++
#
########################################################################


# include global definitions
include ../../makefile.env

# This is the only macro which must be changed in order to
# define a module name for an algebra. The rest of this makefile
# should work for nearly every algebra. 
MODNAME = TopRelAlgebra

# Use the mace CCFLAGS to add special compiler flags if needed.
# In this case the defaults are sufficient
CCFLAGS = $(DEFAULTCCFLAGS) -I../FText -I../Rectangle

# The next rule will create a ".o" file for every ".cpp" file and 
# creates a "lib$(MODNAME).a" file in the secondo/lib dir. Rules
# for creating ".dep" files and ".o" files are defined in makefile.env
.PHONY: all
all: $(OBJECTS) $(LIBOBJ)


# DEP_FILES is a macro defined in makefile.env. It will contain
# a list of files which are generated by the compiler to
# detect dependencies to other code files.
include $(DEP_FILES)


# The rule below creates a library file. Maybe as shared or as static
# object. In case of a shared object all dependencies to other libraries
# must be defined. However, currently the command make shared=yes will 
# not work. But in principle every algebra implementor has to define dependencies
# to other libraries here, since the make procedure does not know how to do this
# automatically. 
$(LIBOBJ): $(OBJECTS)
ifeq ($(shared),yes)
# ... as shared object
	$(LD) $(LDFLAGS) -o $(LIBOBJ) $(LDOPT) $(OBJECTS) -L$(LIBDIR) -lStandardAlgebra $(SDBLIB) $(TOOLLIB) $(DEFAULTLIB)
else
# ... as static library
	$(AR) -r $(LIBOBJ) $(OBJECTS)
endif

TreeParser.o: TreeParser.y.c
	$(CC) -c -o TreeParser.o TreeParser.y.c 


TreeParser.y.c: TreeParser.y
	$(YACC) -d -o TreeParser.y.c TreeParser.y

TreeLex.o: TreeLex.c
	$(CC) -c -o TreeLex.o TreeLex.c

TreeLex.c: TreeLex.l TreeParser.y.c
	$(LEX) -oTreeLex.c TreeLex.l

Tree.o: Tree.c Tree.h makefile
	$(CC) -c -o Tree.o Tree.c



# remove all generated stuff
.PHONY: clean
clean:
	$(RM) $(DEP_FILES) $(OBJECTS) $(LIBOBJ)
