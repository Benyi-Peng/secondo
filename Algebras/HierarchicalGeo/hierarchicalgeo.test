#This file is part of SECONDO.
#
#Copyright (C) 2004, University in Hagen, Department of Computer Science, 
#Database Systems for New Applications.
#
#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# a test for the spatial algebra
# run with : TestRunner -c SecondoConfig.ini < hierarchicalgeo.test

# A fresh restored berlin database needs to be present for
# this test


#setup hierarchicalgeotest

open database hiergeo



# The conventions for commands are the same as in SecondoTTYBDB
# make sure that commands are always terminated 
# (either by a semicolon or by a newline)

# a TESTCASE consists of a TESTCASE declarative followed
# by a YIELDS declarative followed by a command.
# multiple or no commands after a YIELD directive
# will confuse the TestRunner

# the expected output specified by the YIELD declarative
# is converted to a ListExpr and the TestRunner compares
# it to Secondo's actual output by calling  
# NestedList->Equal 



# 1 - Creating, updating, querying and deleting a cpoint-object

#testcase createcpoint
#yields success 
create ctest1 : cpoint;

#testcase updatecpoint
#yields success
update ctest1 := [const cpoint value(50.0 (9876.5 8765.4))];

#testcase letcpoint
#yields success
let ctest2 = [const cpoint value(50.0 (8888.8 7777.7))];


#testcase querycpoint
#yields success
query ctest2;

#testcase deletecpoint
#yields success
delete ctest1;

#testcase queryepsilon
#yields (real 50.0)
query epsilon(ctest2)


# 2 - Tests about the datatype CUPoint (uncertain unit point)

#testcase createcupoint
#yields success
create cuptest1 : cupoint;

#textcase updatecupoint
#yields success
update cuptest1 := [const cupoint value(23.4 (
            ("2003-11-20-07:01:44.586" "2003-11-20-07:01:50" TRUE FALSE)
            (-3544.0 14312.0 -3560.0 14235.0)))];


#testcase letcupoint
#yields success
let cuptest2 = [const cupoint value (44.5 (
            ("2003-11-20-07:01:50" "2003-11-20-07:02" TRUE FALSE)
            (-3560.0 14235.0 -3560.0 14235.0)))];
            
#testcase querycupoint
#yields (cupoint (23.4 (\
            ("2003-11-20-07:01:44.586" "2003-11-20-07:01:50" TRUE FALSE)\
            (-3544.0 14312.0 -3560.0 14235.0))) )
query cuptest1;

#testcase queryepsiloncupoint
#yields (real 44.5)
query epsilon(cuptest2);

# tolerance_real 0.001

#testcase querytrajectorycupoint
#yields (region ( (( \
            (-3537.089385881461 14230.23935291043)\
                (-3582.910614118539 14239.76064708957)\
                (-3566.910614118539 14316.76064708957)\
                (-3521.089385881461 14307.23935291043))) ))
query trajectory( cuptest1);

#testcase deletecupoint
#yields success
delete cuptest1;


# 3 - Creating, updating, querying and deleting a cmpoint-object

#testcase createcmpoint
#yields success 
create cmptest1 : cmpoint;


#testcase updatecmpoint
#yields success
update cmptest1 := [const cmpoint value((34.5 (
            ("2003-11-20-07:01:38.530" "2003-11-20-07:01:44.586" TRUE FALSE)
            (-3512.0 14394.0 -3544.0 14312.0)))
    (23.4 (
            ("2003-11-20-07:01:44.586" "2003-11-20-07:01:50" TRUE FALSE)
            (-3544.0 14312.0 -3560.0 14235.0)))
    (44.5 (
            ("2003-11-20-07:01:50" "2003-11-20-07:02" TRUE FALSE)
            (-3560.0 14235.0 -3560.0 14235.0))))];

#testcase letcmpoint
#yields success
let cmptest2 = [const cmpoint value((22.25 (
            ("2003-11-20-07:01:38.530" "2003-11-20-07:01:44.586" TRUE FALSE)
            (-3412.0 14394.0 -3444.0 14312.0)))
    (12.3 (
            ("2003-11-20-07:01:44.586" "2003-11-20-07:01:50" TRUE FALSE)
            (-3444.0 14312.0 -3460.0 14235.0)))
    (15.0 (
            ("2003-11-20-07:01:50" "2003-11-20-07:02" TRUE FALSE)
            (-3460.0 14235.0 -3460.0 14235.0))))];

#testcase querycmptest
#yields (cmpoint ( (34.5 (\
            ("2003-11-20-07:01:38.530" "2003-11-20-07:01:44.586" TRUE FALSE)\
            (-3512.0 14394.0 -3544.0 14312.0)))\
    (23.4 (\
            ("2003-11-20-07:01:44.586" "2003-11-20-07:01:50" TRUE FALSE)\
            (-3544.0 14312.0 -3560.0 14235.0)))\
    (44.5 (\
            ("2003-11-20-07:01:50" "2003-11-20-07:02" TRUE FALSE)\
            (-3560.0 14235.0 -3560.0 14235.0)))) )
query cmptest1;


#testcase querydeftime
#yields (periods ( ("2003-11-20-07:01:38.530" "2003-11-20-07:02" TRUE FALSE) ) )
query deftime (cmptest1);


#testcase queryepsiloncmpoint
#yields (real 44.5)
query epsilon(cmptest1);


#testcase querycmptestpresent1
#yields (bool TRUE )
query cmptest1 present ( [const instant value"2003-11-20-07:01:45"] );


#testcase querycmptestpresent2
#yields (bool FALSE )
query cmptest1 present ( [const instant value"2003-11-21-07:01:45"] );


#testcase querycmptestatinstant
#yields (intimeregion ("2003-11-20-07:01:45" ( ( (\
                (-3566.794913800979 14297.04364246868)\
                (-3568.623239292142 14306.00261423832)\
                (-3566.878699957451 14314.9782775442)\
                (-3561.827666362905 14322.60015453728)\
                (-3554.241371722162 14327.70447456003)\
                (-3545.278153687511 14329.51186819015)\
                (-3536.306589861971 14327.74636775256)\
                (-3528.696532152325 14322.67754432629)\
                (-3523.609946551014 14315.07934742233)\
                (-3521.823494643517 14306.11193202808)\
                (-3523.527104730926 14297.34684989721)\
                (-3528.542476080384 14289.70145916175)\
                (-3536.104842082074 14284.56175394381)\
                (-3545.059518704463 14282.71250656736)\
                (-3554.039232517375 14284.43607528055)\
                (-3561.672887207145 14289.46929148375))))))
query cmptest1 atinstant( [const instant value"2003-11-20-07:01:45"] );


#testcase querycmptestatperiods
#yields (cmpoint ( (23.4 (\
            ("2003-11-20-07:01:46" "2003-11-20-07:01:50" TRUE FALSE)\
            (-3548.178795714814 14291.88954562246 -3560.0 14235.0)))\
    (44.5 (\
            ("2003-11-20-07:01:50" "2003-11-20-07:01:53" TRUE FALSE)\
            (-3560.0 14235.0 -3560.0 14235.0)))) )
query cmptest atperiods ([const periods value(("2003-11-20-07:01:46" "2003-11-20-07:01:53" TRUE FALSE))]);


#testcase deletecmpoint
#yields success
delete cmptest1;


#teardown

delete ctest2;
delete cuptest2;
delete cmptest2;
close database;