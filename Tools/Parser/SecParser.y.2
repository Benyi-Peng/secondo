/*
May 15, 1998 RHG Added rule for the ~model~ command.

Feb 3, 1999 Stefan Dieker Added "typexpr : typeexpr ':' typeexpr" rule

August 10, 2000 RHG Changed definition of syntax for constant values. Now to be written as 

	'[' typeexpr 'const' valueexpr ']'

for example, 

----	[points const ((1 -4) (2 3))]
	[int const 954]
----

March 2002 Ulrich Telle Port to C++

*/

%%

/* commands */

commands	:	command
		|	commands ';' command
		;

command		:	basic
		|	transaction
		|	database
		|	inquiries
		;	

basic		:	TYPE IDENTIFIER '=' typeexpr
				{PRINTF("(type "); PRINT($2); 
				PRINTF(" = "); PRINT($4); PRINTF(")\n");}
		|	DELETE TYPE IDENTIFIER	
				{PRINTF("(delete type "); PRINT($3); 
				PRINTF(")\n");}
		|	CREATE IDENTIFIER ':' typeexpr
				{PRINTF("(create "); PRINT($2); 
				PRINTF(" : "); PRINT($4); PRINTF(")\n");}

		|		{paramno=0; depth =0;}
			UPDATE IDENTIFIER ASSIGN valueexpr
				{PRINTF("(update "); PRINT($3); 
				PRINTF(" := "); PRINT($5); PRINTF(")\n");}
		|	DELETE IDENTIFIER
				{PRINTF("(delete "); PRINT($2); 
				PRINTF(")\n");}

		|		{paramno=0; depth =0;}
			QUERY valueexpr
				{PRINTF("(query "); PRINT($3); 
				PRINTF(")\n");}

                |               {paramno=0; depth =0;}
                        MODEL valueexpr
                                {PRINTF("(model "); PRINT($3);
                                PRINTF(")\n");}
 
		|		{paramno=0; depth =0;}
			LET IDENTIFIER '=' valueexpr
				{PRINTF("(let "); PRINT($3); 
				PRINTF(" = "); PRINT($5); PRINTF(")\n");}
		|	PERSISTENT IDENTIFIER
				{PRINTF("(persistent "); PRINT($2); 
				PRINTF(")\n");}
		;

transaction	:	BEGIN1 TRANSACTION
				{PRINTF("(begin transaction)\n");}
		|	COMMIT TRANSACTION
				{PRINTF("(commit transaction)\n");}
		|	ABORT TRANSACTION
				{PRINTF("(abort transaction)\n");}
		;

database	:	CREATE DATABASE IDENTIFIER
				{PRINTF("(create database "); PRINT($3); 
				PRINTF(")\n");}
		|	DELETE DATABASE IDENTIFIER
				{PRINTF("(delete database "); PRINT($3); 
				PRINTF(")\n");}
		|	OPEN DATABASE IDENTIFIER
				{PRINTF("(open database "); PRINT($3); 
				PRINTF(")\n");}
		|	CLOSE DATABASE 
				{PRINTF("(close database)\n");}
		|	SAVE DATABASE TO IDENTIFIER
				{PRINTF("(save database to "); PRINT($4); 
				PRINTF(")\n");}
		|	RESTORE DATABASE IDENTIFIER FROM IDENTIFIER
				{PRINTF("(restore database "); PRINT($3); 
				PRINTF(" from "); PRINT($5); PRINTF(")\n");}
		;

inquiries	:	LIST DATABASES
				{PRINTF("(list databases)\n");}
		|	LIST TYPE CONSTRUCTORS
				{PRINTF("(list type constructors)\n");}
		|	LIST OPERATORS
				{PRINTF("(list operators)\n");}
		|	LIST TYPES
				{PRINTF("(list types)\n");}
		|	LIST OBJECTS
				{PRINTF("(list objects)\n");}
		;


/* typeexpr*/

typeexpr	:	constructor	{$$ = $1;}
		|	constructor '(' typeexprs ')'
				{$$ = NestedText::Concat(NestedText::AtomC("("),
					NestedText::Concat($1,
					  NestedText::Concat(NestedText::AtomC(" "),
					    NestedText::Concat($3, NestedText::AtomC(")")))));}

		|	'(' typeexprs ')'
				{$$ = NestedText::Concat(NestedText::AtomC("("),
					NestedText::Concat($2, NestedText::AtomC(")")));}

		|	'[' typeexprs ']'
				{$$ = NestedText::Concat(NestedText::AtomC("("),
					NestedText::Concat($2, NestedText::AtomC(")")));}

		|	'[' ']'		{$$ = NestedText::AtomC("()");}

		|	typeexpr ':' typeexpr	{$$ = NestedText::Concat(NestedText::AtomC("("),
						NestedText::Concat($1, NestedText::Concat(NestedText::AtomC(" "),
						NestedText::Concat($3,  NestedText::AtomC(")")))));}
		;

constructor	:	IDENTIFIER	{$$ = $1;}
		|	TUPLE		{$$ = $1;}
		|	GROUP		{$$ = $1;}
		;

typeexprs	:	typeexpr	{$$ = $1;}
		|	typeexprs ',' typeexpr	
					{$$ = NestedText::Concat($1, 
						NestedText::Concat(NestedText::AtomC(" "), $3));}
		;

/* valueexpr, general part */

namedfunction	: naming function
			{$$ = NestedText::Concat(NestedText::AtomC("("),
				NestedText::Concat($1,
				NestedText::Concat(NestedText::AtomC(" "),
				NestedText::Concat($2,
					NestedText::AtomC(")")	))));}
		| function		{$$ = $1;}
		;

function	: FUN '(' args ')' valueexpr
				{$$ = NestedText::Concat(NestedText::AtomC("(fun "),
					NestedText::Concat($3,
 					  NestedText::Concat (NestedText::AtomC(" "),
  					    NestedText::Concat($5, NestedText::AtomC(")") ))));}
		;

arg		: IDENTIFIER ':' typeexpr
				{$$ = NestedText::Concat(NestedText::AtomC("("),
					NestedText::Concat($1,
					  NestedText::Concat(NestedText::AtomC(" "),
					    NestedText::Concat($3, NestedText::AtomC(")") ))));}
		;

args		: arg		{$$ = $1;}
		| args ',' arg	{$$ = NestedText::Concat($1, 
					      	NestedText::Concat(NestedText::AtomC(" "), $3));}
		;


attribute	: '.' IDENTIFIER
			{$$ = NestedText::Concat(NestedText::AtomC("(attr "),
				NestedText::Concat(NestedText::AtomC(param),
				NestedText::Concat(NestedText::AtomC(" "),
				NestedText::Concat($2,
					NestedText::AtomC(")")	))));}
		;

attribute2	: DOUBLE IDENTIFIER
			{$$ = NestedText::Concat(NestedText::AtomC("(attr "),
				NestedText::Concat(NestedText::AtomC(param2),
				NestedText::Concat(NestedText::AtomC(" "),
				NestedText::Concat($2,				
					NestedText::AtomC(")")	))));}
		;


constant	: INTEGER | REAL | STRING | BOOLEAN
		; 

nestedlist	: atom			{$$ = $1;}
		| '(' rest		{$$ = NestedText::Concat($1, $2);}
		;

rest		: ')'			{$$ = $1;}
		| atom rest		{$$ = NestedText::Concat($1, 
						NestedText::Concat(NestedText::AtomC(" "), $2));}
		| nestedlist rest	{$$ = NestedText::Concat($1, 
						NestedText::Concat(NestedText::AtomC(" "), $2));}
		;

atom		: constant		{$$ = $1;}
		| IDENTIFIER		{$$ = $1;}
		;

list		: elems			{$$ = NestedText::Concat(NestedText::AtomC("("), 
						NestedText::Concat($1,
						NestedText::AtomC(")")     ));}
		;

elems		: 			{$$ = NestedText::AtomC("");}
		| elem			{$$ = $1;}
		| elems ',' elem	{$$ = NestedText::Concat($1,
						NestedText::Concat(NestedText::AtomC(" "), $3));}
		;

elem		: valueexpr		{$$ = $1;}
		| valueexpr valueexpr	
			{$$ = NestedText::Concat(NestedText::AtomC("("),
				NestedText::Concat($1,
				NestedText::Concat(NestedText::AtomC(" "),
				NestedText::Concat($2,				
					NestedText::AtomC(")")	))));}
		| namedfunction		{$$ = $1;}
		;

naming		: IDENTIFIER ':'	{$$ = $1;}
		;

		
valueexpr	: IDENTIFIER				{$$ = $1;}
		| constant				{$$ = $1;}
		| attribute				{$$ = $1;}
		| attribute2				{$$ = $1;}
		| '(' valueexpr ')'			{$$ = $2;}
		| '[' typeexpr CONST nestedlist ']'
			{$$ = NestedText::Concat(NestedText::AtomC("("),
				NestedText::Concat($2,
				NestedText::Concat(NestedText::AtomC(" "),
				NestedText::Concat($4,				
					NestedText::AtomC(")")	))));}
		| '[' list ']'				{$$ = $2;}

		| '.'					{$$ = NestedText::AtomC(param);}

		| TUPLE					{$$ = NestedText::AtomC(param);}

		| GROUP					{$$ = NestedText::AtomC(param);}

		| valueexpr '=' valueexpr
			{$$ = NestedText::Concat(NestedText::AtomC("(="), 
				NestedText::Concat(NestedText::AtomC(" "), 
				NestedText::Concat($1,
				NestedText::Concat(NestedText::AtomC(" "), 
				NestedText::Concat($3,
				NestedText::AtomC(")")     )))));}

		| valueexpr '{' IDENTIFIER '}'
			{$$ = NestedText::Concat(NestedText::AtomC("(rename"), 
				NestedText::Concat(NestedText::AtomC(" "), 
				NestedText::Concat($1,
				NestedText::Concat(NestedText::AtomC(" "), 
				NestedText::Concat($3,
				NestedText::AtomC(")")     )))));}


/* algebra specific part */

