package secondo;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;

import sj.lang.ListExpr;
import secondoPostgisUtil.IMySEC2XXXINFO;

public class UtilSecFunction
  implements IMySEC2XXXINFO
{
  public ArrayList<StringBuffer> malColName;
  public ArrayList<StringBuffer> malColType;
  private static volatile HashSet<String> mhsOperatoren;
  
  public UtilSecFunction()
  {
    this.malColName = new ArrayList();
    this.malColType = new ArrayList();
    if (mhsOperatoren == null)
    {
      mhsOperatoren = new HashSet();
      fillHashSetOperatoren();
    }
  }
  
  public LinkedList<String> removeSec2XXXINFOObjects(LinkedList<String> _llObjects)
  {
    _llObjects.remove(sbSEC2CACHEINFO.toString());
    _llObjects.remove(sbSEC2COMMANDS.toString());
    _llObjects.remove(sbSEC2COUNTERS.toString());
    _llObjects.remove(sbSEC2FILEINFO.toString());
    _llObjects.remove(sbSEC2OPERATORUSAGE.toString());
    _llObjects.remove(sbSEC2OPERTORINFO.toString());
    _llObjects.remove(sbSEC2TYPEINFO.toString());
    
    return _llObjects;
  }
  
  public boolean getColumAndType(ListExpr LE)
  {
    boolean result = true;
    if (LE.listLength() != 2) {
      return false;
    }
    ListExpr type = LE.first();
    

    ListExpr maintype = type.first();
    if ((type.listLength() != 2) || (!maintype.isAtom()) || (maintype.atomType() != 5) || (
      (!maintype.symbolValue().equals("rel")) && (!maintype.symbolValue().equals("mrel")) && (!maintype.symbolValue().equals("trel")))) {
      return false;
    }
    ListExpr tupletype = type.second();
    
    ListExpr TupleFirst = tupletype.first();
    if ((tupletype.listLength() != 2) || (!TupleFirst.isAtom()) || 
      (TupleFirst.atomType() != 5) || 
      (!(TupleFirst.symbolValue().equals("tuple") | TupleFirst.symbolValue().equals("mtuple")))) {
      return false;
    }
    ListExpr TupleTypeValue = tupletype.second();
    for (int i = 0; (!TupleTypeValue.isEmpty()) && (result); i++)
    {
      ListExpr TupleSubType = TupleTypeValue.first();
      if (TupleSubType.listLength() != 2)
      {
        result = false;
      }
      else
      {
        this.malColName.add(new StringBuffer(TupleSubType.first().writeListExprToString().replace("\n", "")));
        this.malColType.add(new StringBuffer(TupleSubType.second().toString().replace("\n", "")));
        
        result = true;
      }
      TupleTypeValue = TupleTypeValue.rest();
    }
    return result;
  }
  
  public boolean getColumAndTypeFromListObject(ListExpr LE)
  {
    boolean result = true;
    if (LE.listLength() != 1) {
      return false;
    }
    ListExpr type = LE.first();
    if (type.listLength() == -1) {
      return false;
    }
    ListExpr maintype = type.first();
    if ((type.listLength() != 2) || (!maintype.isAtom()) || (maintype.atomType() != 5) || (
      (!maintype.symbolValue().equals("rel")) && (!maintype.symbolValue().equals("mrel")) && (!maintype.symbolValue().equals("trel")))) {
      return false;
    }
    ListExpr tupletype = type.second();
    
    ListExpr TupleFirst = tupletype.first();
    if ((tupletype.listLength() != 2) || (!TupleFirst.isAtom()) || 
      (TupleFirst.atomType() != 5) || 
      (!(TupleFirst.symbolValue().equals("tuple") | TupleFirst.symbolValue().equals("mtuple")))) {
      return false;
    }
    ListExpr TupleTypeValue = tupletype.second();
    for (int i = 0; (!TupleTypeValue.isEmpty()) && (result); i++)
    {
      ListExpr TupleSubType = TupleTypeValue.first();
      if (TupleSubType.listLength() != 2)
      {
        result = false;
      }
      else
      {
        this.malColName.add(new StringBuffer(TupleSubType.first().writeListExprToString().replace("\n", "")));
        this.malColType.add(new StringBuffer(TupleSubType.second().toString().replace("\n", "")));
        
        result = true;
      }
      TupleTypeValue = TupleTypeValue.rest();
    }
    return result;
  }
  
  public boolean isOperator(String _str)
  {
    if (mhsOperatoren == null)
    {
      mhsOperatoren = new HashSet();
      fillHashSetOperatoren();
    }
    if (mhsOperatoren.size() <= 0) {
      return true;
    }
    return mhsOperatoren.contains(_str);
  }
  
  private void fillHashSetOperatoren()
  {
    if (mhsOperatoren.size() > 0) {
      return;
    }
    mhsOperatoren.add("~");
    mhsOperatoren.add("<");
    mhsOperatoren.add("<<");
    mhsOperatoren.add("<<==");
    mhsOperatoren.add("<=");
    mhsOperatoren.add("=");
    mhsOperatoren.add("==");
    mhsOperatoren.add("= ");
    mhsOperatoren.add(">");
    mhsOperatoren.add(">=");
    mhsOperatoren.add(">>");
    mhsOperatoren.add(">>==");
    mhsOperatoren.add("-");
    mhsOperatoren.add("!");
    mhsOperatoren.add("/");
    mhsOperatoren.add("*");
    mhsOperatoren.add("#");
    mhsOperatoren.add("##");
    mhsOperatoren.add("+");
    mhsOperatoren.add("++");
    mhsOperatoren.add("above");
    mhsOperatoren.add("abs");
    mhsOperatoren.add("aconsume");
    mhsOperatoren.add("addcounter");
    mhsOperatoren.add("add_height_groom");
    mhsOperatoren.add("addid");
    mhsOperatoren.add("addinfragraph ");
    mhsOperatoren.add("addtupleid");
    mhsOperatoren.add("adjacent");
    mhsOperatoren.add("afeed");
    mhsOperatoren.add("agent");
    mhsOperatoren.add("aggregate");
    mhsOperatoren.add("aggregateB");
    mhsOperatoren.add("aggregateC");
    mhsOperatoren.add("aggregateS");
    mhsOperatoren.add("album");
    mhsOperatoren.add("= alias EQUAL");
    mhsOperatoren.add("> alias GREATER");
    mhsOperatoren.add(">= alias GREATEREQUAL");
    mhsOperatoren.add("< alias LOWER");
    mhsOperatoren.add("<= alias LOWEREQUAL");
    mhsOperatoren.add("# alias NOTEQUAL");
    mhsOperatoren.add("always");
    mhsOperatoren.add("and");
    mhsOperatoren.add("ANY");
    mhsOperatoren.add("ANY2");
    mhsOperatoren.add("apply_ply");
    mhsOperatoren.add("applyToAll ");
    mhsOperatoren.add("approximate");
    mhsOperatoren.add("arccos");
    mhsOperatoren.add("arcsin");
    mhsOperatoren.add("arctan");
    mhsOperatoren.add("arctan2");
    mhsOperatoren.add("area");
    mhsOperatoren.add("assert");
    mhsOperatoren.add("at");
    mhsOperatoren.add("atinstant");
    mhsOperatoren.add("atinstant ");
    mhsOperatoren.add("atmax");
    mhsOperatoren.add("atmin");
    mhsOperatoren.add("atperiods");
    mhsOperatoren.add("atperiods ");
    mhsOperatoren.add("atpoint");
    mhsOperatoren.add("at_point");
    mhsOperatoren.add("atposition");
    mhsOperatoren.add("attackcount");
    mhsOperatoren.add("attackedby");
    mhsOperatoren.add("attackedfrom");
    mhsOperatoren.add("attr");
    mhsOperatoren.add("attrsize");
    mhsOperatoren.add("author");
    mhsOperatoren.add("avg");
    mhsOperatoren.add("bbox");
    mhsOperatoren.add("bbox2d");
    mhsOperatoren.add("bbox3d");
    mhsOperatoren.add("bboxintersects");
    mhsOperatoren.add("bboxold");
    mhsOperatoren.add("bcontains");
    mhsOperatoren.add("bcontains2");
    mhsOperatoren.add("before");
    mhsOperatoren.add("below");
    mhsOperatoren.add("between");
    mhsOperatoren.add("binand");
    mhsOperatoren.add("binands");
    mhsOperatoren.add("binor");
    mhsOperatoren.add("binrange_max");
    mhsOperatoren.add("binrange_maxX");
    mhsOperatoren.add("binrange_maxY");
    mhsOperatoren.add("binrange_min");
    mhsOperatoren.add("binrange_minX");
    mhsOperatoren.add("binrange_minY");
    mhsOperatoren.add("binsX");
    mhsOperatoren.add("binsY");
    mhsOperatoren.add("bitrate");
    mhsOperatoren.add("blowfish_decode");
    mhsOperatoren.add("blowfish_encode");
    mhsOperatoren.add("bn_busroutes");
    mhsOperatoren.add("bn_busstops");
    mhsOperatoren.add("bnnavigation");
    mhsOperatoren.add("bool2int");
    mhsOperatoren.add("boundary");
    mhsOperatoren.add("box2d");
    mhsOperatoren.add("box3d");
    mhsOperatoren.add("breakpoints");
    mhsOperatoren.add("breaks");
    mhsOperatoren.add("brgeodata");
    mhsOperatoren.add("brsegments");
    mhsOperatoren.add("bsgeodata");
    mhsOperatoren.add("bs_neighbors1");
    mhsOperatoren.add("bs_neighbors2");
    mhsOperatoren.add("bs_neighbors3");
    mhsOperatoren.add("bs_stops");
    mhsOperatoren.add("bufferLine");
    mhsOperatoren.add("bulkloadrtree");
    mhsOperatoren.add("bulkloadtmrtree");
    mhsOperatoren.add("cancel");
    mhsOperatoren.add("canmeet");
    mhsOperatoren.add("captured");
    mhsOperatoren.add("captures");
    mhsOperatoren.add("ceil");
    mhsOperatoren.add("cellbox");
    mhsOperatoren.add("cellindex");
    mhsOperatoren.add("cellnumber");
    mhsOperatoren.add("center");
    mhsOperatoren.add("char");
    mhsOperatoren.add("chartext");
    mhsOperatoren.add("charToText");
    mhsOperatoren.add("check");
    mhsOperatoren.add("checkmate");
    mhsOperatoren.add("checkOperatorTypeMap");
    mhsOperatoren.add("checkOperatorTypeMap2");
    mhsOperatoren.add("checkpw");
    mhsOperatoren.add("checksline");
    mhsOperatoren.add("checkTopRel ");
    mhsOperatoren.add("check_workers");
    mhsOperatoren.add("chinaknearest");
    mhsOperatoren.add("circle");
    mhsOperatoren.add("circlen");
    mhsOperatoren.add("circularstringlinearization");
    mhsOperatoren.add("cluster_a");
    mhsOperatoren.add("cluster_b");
    mhsOperatoren.add("cluster_c");
    mhsOperatoren.add("cluster_d");
    mhsOperatoren.add("cluster_e");
    mhsOperatoren.add("cluster_f");
    mhsOperatoren.add("cluster_g");
    mhsOperatoren.add("clustername_of");
    mhsOperatoren.add("clusterof");
    mhsOperatoren.add("clusterseq");
    mhsOperatoren.add("collect");
    mhsOperatoren.add("collect_line2");
    mhsOperatoren.add("collect_multiset");
    mhsOperatoren.add("collect_points");
    mhsOperatoren.add("collect_set");
    mhsOperatoren.add("collect_vector");
    mhsOperatoren.add("colordist");
    mhsOperatoren.add("column ");
    mhsOperatoren.add("comment");
    mhsOperatoren.add("commonborder");
    mhsOperatoren.add("compare");
    mhsOperatoren.add("components");
    mhsOperatoren.add("compress");
    mhsOperatoren.add("computeclosure");
    mhsOperatoren.add("concat");
    mhsOperatoren.add("concatmp3");
    mhsOperatoren.add("concatS");
    mhsOperatoren.add("concatS2");
    mhsOperatoren.add("connectedcomponents");
    mhsOperatoren.add("const_e");
    mhsOperatoren.add("constgraph");
    mhsOperatoren.add("constgraphpoints");
    mhsOperatoren.add("const_pi");
    mhsOperatoren.add("consume");
    mhsOperatoren.add("consume ");
    mhsOperatoren.add("contains");
    mhsOperatoren.add("contains_rob");
    mhsOperatoren.add("convex");
    mhsOperatoren.add("convexhull");
    mhsOperatoren.add("cos");
    mhsOperatoren.add("count");
    mhsOperatoren.add("count2");
    mhsOperatoren.add("countboth");
    mhsOperatoren.add("countintstream");
    mhsOperatoren.add("covariance");
    mhsOperatoren.add("createadjdoor1");
    mhsOperatoren.add("createadjdoor2");
    mhsOperatoren.add("createbgraph");
    mhsOperatoren.add("createbtree");
    mhsOperatoren.add("createbtree2");
    mhsOperatoren.add("create_bus_route1");
    mhsOperatoren.add("create_bus_route2");
    mhsOperatoren.add("create_bus_route3");
    mhsOperatoren.add("create_bus_route4");
    mhsOperatoren.add("create_bus_segment_speed");
    mhsOperatoren.add("create_bus_stop1");
    mhsOperatoren.add("create_bus_stop2");
    mhsOperatoren.add("create_bus_stop3");
    mhsOperatoren.add("create_bus_stop4");
    mhsOperatoren.add("create_bus_stop5");
    mhsOperatoren.add("createcluster");
    mhsOperatoren.add("create_daytime_bus_mo");
    mhsOperatoren.add("createdeleterel");
    mhsOperatoren.add("createDfa");
    mhsOperatoren.add("createDirectory");
    mhsOperatoren.add("createdoor1");
    mhsOperatoren.add("createdoor2");
    mhsOperatoren.add("createdoor3d");
    mhsOperatoren.add("createdoorbox");
    mhsOperatoren.add("createdualgraph");
    mhsOperatoren.add("create_duration");
    mhsOperatoren.add("createFList");
    mhsOperatoren.add("create_geoid");
    mhsOperatoren.add("createhash");
    mhsOperatoren.add("create_histogram1d");
    mhsOperatoren.add("create_histogram1d_equicount");
    mhsOperatoren.add("create_histogram1d_equiwidth");
    mhsOperatoren.add("create_histogram2d");
    mhsOperatoren.add("create_histogram2d_equicount");
    mhsOperatoren.add("create_histogram2d_equiwidth");
    mhsOperatoren.add("createigraph");
    mhsOperatoren.add("createinsertrel");
    mhsOperatoren.add("create_instant");
    mhsOperatoren.add("createInvFile");
    mhsOperatoren.add("createmetromo");
    mhsOperatoren.add("createmetroroute");
    mhsOperatoren.add("createmetrostop");
    mhsOperatoren.add("createmgraph");
    mhsOperatoren.add("createmint");
    mhsOperatoren.add("createml");
    mhsOperatoren.add("createmlrelation");
    mhsOperatoren.add("create_multiset");
    mhsOperatoren.add("create_night_bus_mo");
    mhsOperatoren.add("createObject");
    mhsOperatoren.add("createosmgraph");
    mhsOperatoren.add("createpgroup");
    mhsOperatoren.add("createprioritypgroup");
    mhsOperatoren.add("createRecord");
    mhsOperatoren.add("createRegEx");
    mhsOperatoren.add("createRegEx2");
    mhsOperatoren.add("creatergraph");
    mhsOperatoren.add("creatertree");
    mhsOperatoren.add("create_set");
    mhsOperatoren.add("create_sline");
    mhsOperatoren.add("createsuffixtree");
    mhsOperatoren.add("createsuffixtree_quadratic");
    mhsOperatoren.add("createtbtree");
    mhsOperatoren.add("create_time_table1");
    mhsOperatoren.add("create_time_table2");
    mhsOperatoren.add("createupdaterel");
    mhsOperatoren.add("createvalidpgroup");
    mhsOperatoren.add("create_vector");
    mhsOperatoren.add("createvgraph");
    mhsOperatoren.add("criticalPoints");
    mhsOperatoren.add("crossings");
    mhsOperatoren.add("crossings_rob");
    mhsOperatoren.add("crypt");
    mhsOperatoren.add("csvexport");
    mhsOperatoren.add("cumulate");
    mhsOperatoren.add("cut");
    mhsOperatoren.add("cyclicbulkload");
    mhsOperatoren.add("day_of");
    mhsOperatoren.add("db3export");
    mhsOperatoren.add("dbimport");
    mhsOperatoren.add("dbimport2");
    mhsOperatoren.add("dbscan");
    mhsOperatoren.add("dbtype");
    mhsOperatoren.add("ddistribute");
    mhsOperatoren.add("decomposegenmo");
    mhsOperatoren.add("decomposeregion");
    mhsOperatoren.add("decomposetri");
    mhsOperatoren.add("deftime");
    mhsOperatoren.add("deg2rad");
    mhsOperatoren.add("DELEMENT");
    mhsOperatoren.add("DELEMENT2");
    mhsOperatoren.add("deletebtree");
    mhsOperatoren.add("deletebtree2");
    mhsOperatoren.add("deletebyid");
    mhsOperatoren.add("deletedirect");
    mhsOperatoren.add("deletedirectsave");
    mhsOperatoren.add("deleteelem");
    mhsOperatoren.add("deletehash");
    mhsOperatoren.add("deleteObject");
    mhsOperatoren.add("deletertree");
    mhsOperatoren.add("deletesearch");
    mhsOperatoren.add("deletesearchsave");
    mhsOperatoren.add("derivable");
    mhsOperatoren.add("derivable_new");
    mhsOperatoren.add("derivative");
    mhsOperatoren.add("derivative_new");
    mhsOperatoren.add("dice");
    mhsOperatoren.add("d_idx");
    mhsOperatoren.add("difference");
    mhsOperatoren.add("direction");
    mhsOperatoren.add("disjoint");
    mhsOperatoren.add("display");
    mhsOperatoren.add("distance");
    mhsOperatoren.add("distanceOrthodrome");
    mhsOperatoren.add("distancescan");
    mhsOperatoren.add("distancescan2");
    mhsOperatoren.add("distancescan3");
    mhsOperatoren.add("distancescan4");
    mhsOperatoren.add("distanceSmallerThan");
    mhsOperatoren.add("distribute");
    mhsOperatoren.add("disturb");
    mhsOperatoren.add("div");
    mhsOperatoren.add("dloop");
    mhsOperatoren.add("dloopa");
    mhsOperatoren.add("dms2deg");
    mhsOperatoren.add("d_receive_rel");
    mhsOperatoren.add("d_receive_shuffle");
    mhsOperatoren.add("DRELATION");
    mhsOperatoren.add("d_send_rel");
    mhsOperatoren.add("d_send_shuffle");
    mhsOperatoren.add("dshuffle");
    mhsOperatoren.add("dshuffle1");
    mhsOperatoren.add("dshuffle2");
    mhsOperatoren.add("dsummarize");
    mhsOperatoren.add("dtie");
    mhsOperatoren.add("dumpstream");
    mhsOperatoren.add("duration2real");
    mhsOperatoren.add("east");
    mhsOperatoren.add("echo");
    mhsOperatoren.add("edges");
    mhsOperatoren.add("ELEMENT");
    mhsOperatoren.add("ELEMENT2");
    mhsOperatoren.add("end");
    mhsOperatoren.add("endfield");
    mhsOperatoren.add("endunitinst");
    mhsOperatoren.add("enlargeRect");
    mhsOperatoren.add("enpassant_field");
    mhsOperatoren.add("ensure");
    mhsOperatoren.add("entries");
    mhsOperatoren.add("eplus");
    mhsOperatoren.add("equal");
    mhsOperatoren.add("equals");
    mhsOperatoren.add("equalway");
    mhsOperatoren.add("evaluate");
    mhsOperatoren.add("everNearerThan");
    mhsOperatoren.add("exactmatch");
    mhsOperatoren.add("exactmatch2");
    mhsOperatoren.add("exactmatchS");
    mhsOperatoren.add("exists");
    mhsOperatoren.add("export");
    mhsOperatoren.add("extattrsize");
    mhsOperatoren.add("extdeftime");
    mhsOperatoren.add("extend");
    mhsOperatoren.add("extend_aggr ");
    mhsOperatoren.add("extend_last ");
    mhsOperatoren.add("extendstream");
    mhsOperatoren.add("extract");
    mhsOperatoren.add("exttuplesize");
    mhsOperatoren.add("fconsume");
    mhsOperatoren.add("fdistribute");
    mhsOperatoren.add("feed");
    mhsOperatoren.add("feedproject");
    mhsOperatoren.add("ffeed");
    mhsOperatoren.add("field");
    mhsOperatoren.add("fileSize");
    mhsOperatoren.add("fillgaps");
    mhsOperatoren.add("filter");
    mhsOperatoren.add("filterdisjoint");
    mhsOperatoren.add("filterintstream");
    mhsOperatoren.add("filterMatches");
    mhsOperatoren.add("final");
    mhsOperatoren.add("find");
    mhsOperatoren.add("findbin");
    mhsOperatoren.add("findbinX");
    mhsOperatoren.add("findbinY");
    mhsOperatoren.add("find_maxbin");
    mhsOperatoren.add("find_minbin");
    mhsOperatoren.add("findPattern");
    mhsOperatoren.add("flipleft");
    mhsOperatoren.add("floor");
    mhsOperatoren.add("fold");
    mhsOperatoren.add("forall");
    mhsOperatoren.add("framecount");
    mhsOperatoren.add("frequency");
    mhsOperatoren.add("fromCSVtext");
    mhsOperatoren.add("fromFields");
    mhsOperatoren.add("fullosmimport");
    mhsOperatoren.add("generate_bench_1");
    mhsOperatoren.add("generate_bench_2");
    mhsOperatoren.add("generate_bench_3");
    mhsOperatoren.add("generate_bench_4");
    mhsOperatoren.add("generate_bench_5");
    mhsOperatoren.add("generate_car");
    mhsOperatoren.add("generate_genmo");
    mhsOperatoren.add("generate_ip1");
    mhsOperatoren.add("generate_mo1");
    mhsOperatoren.add("generate_wp1");
    mhsOperatoren.add("generate_wp2");
    mhsOperatoren.add("generate_wp3");
    mhsOperatoren.add("genmoindex");
    mhsOperatoren.add("genmo_tm_list");
    mhsOperatoren.add("genrangevisible");
    mhsOperatoren.add("genre");
    mhsOperatoren.add("gentrajectory");
    mhsOperatoren.add("geospath");
    mhsOperatoren.add("get");
    mhsOperatoren.add("getAdjacentSections");
    mhsOperatoren.add("getadjnode");
    mhsOperatoren.add("getallpoints");
    mhsOperatoren.add("getBDBVersion");
    mhsOperatoren.add("getBGP");
    mhsOperatoren.add("getBox");
    mhsOperatoren.add("getbusroutes");
    mhsOperatoren.add("getbusstops");
    mhsOperatoren.add("get_cache_size");
    mhsOperatoren.add("getcatalog");
    mhsOperatoren.add("getCategory");
    mhsOperatoren.add("getcluster ");
    mhsOperatoren.add("getconnectivitycode");
    mhsOperatoren.add("getcontour");
    mhsOperatoren.add("get_cost");
    mhsOperatoren.add("getcount1d");
    mhsOperatoren.add("getcount2d");
    mhsOperatoren.add("getDatabaseName");
    mhsOperatoren.add("get_dg_edge");
    mhsOperatoren.add("getDirectory");
    mhsOperatoren.add("get_duration");
    mhsOperatoren.add("getendpoint");
    mhsOperatoren.add("getFileInfo");
    mhsOperatoren.add("getFilename");
    mhsOperatoren.add("getFlattening");
    mhsOperatoren.add("get_floor");
    mhsOperatoren.add("getheight");
    mhsOperatoren.add("getHeight");
    mhsOperatoren.add("gethole");
    mhsOperatoren.add("getHoles");
    mhsOperatoren.add("getid3");
    mhsOperatoren.add("getindoorpath");
    mhsOperatoren.add("getinfra");
    mhsOperatoren.add("getkey");
    mhsOperatoren.add("get_key");
    mhsOperatoren.add("getLeafEntries");
    mhsOperatoren.add("get_lines");
    mhsOperatoren.add("getloc ");
    mhsOperatoren.add("getlyrics");
    mhsOperatoren.add("get_maxkeysize");
    mhsOperatoren.add("getMaxVal");
    mhsOperatoren.add("get_maxvaluesize");
    mhsOperatoren.add("getmetrodata");
    mhsOperatoren.add("getMinFillDegree");
    mhsOperatoren.add("getMinVal");
    mhsOperatoren.add("getmode ");
    mhsOperatoren.add("getmove");
    mhsOperatoren.add("get_no_cachehits");
    mhsOperatoren.add("getNodeInfo");
    mhsOperatoren.add("getnodes");
    mhsOperatoren.add("getNodeSize");
    mhsOperatoren.add("getNodeSons");
    mhsOperatoren.add("get_no_nodes_visited");
    mhsOperatoren.add("getObjectTypeNL");
    mhsOperatoren.add("getObjectValueNL");
    mhsOperatoren.add("getOpName");
    mhsOperatoren.add("getPageSize");
    mhsOperatoren.add("getpavenode1");
    mhsOperatoren.add("getpavenode2");
    mhsOperatoren.add("get_p_edges3");
    mhsOperatoren.add("get_p_edges4");
    mhsOperatoren.add("getPictureDate");
    mhsOperatoren.add("getPID");
    mhsOperatoren.add("get_pinned_nodes");
    mhsOperatoren.add("getpolygon");
    mhsOperatoren.add("get_pos");
    mhsOperatoren.add("getposition");
    mhsOperatoren.add("getRadius");
    mhsOperatoren.add("getrect1 ");
    mhsOperatoren.add("getref ");
    mhsOperatoren.add("getregion");
    mhsOperatoren.add("getReverseAdjacentSections");
    mhsOperatoren.add("get_rg_edges1");
    mhsOperatoren.add("get_rg_edges2");
    mhsOperatoren.add("get_rg_nodes");
    mhsOperatoren.add("getRootNode");
    mhsOperatoren.add("get_route_density1");
    mhsOperatoren.add("getscalefactorx");
    mhsOperatoren.add("getscalefactory");
    mhsOperatoren.add("getSecondoPlatform");
    mhsOperatoren.add("getSecondoVersion");
    mhsOperatoren.add("get_source");
    mhsOperatoren.add("getstartpoint");
    mhsOperatoren.add("get_startsmaller");
    mhsOperatoren.add("get_statistics");
    mhsOperatoren.add("getstopid");
    mhsOperatoren.add("get_target");
    mhsOperatoren.add("gettuples");
    mhsOperatoren.add("gettuples2");
    mhsOperatoren.add("gettuplesdbl");
    mhsOperatoren.add("getTypeNL");
    mhsOperatoren.add("getunit");
    mhsOperatoren.add("getValueNL");
    mhsOperatoren.add("getvgedge");
    mhsOperatoren.add("getvnode");
    mhsOperatoren.add("getWidth");
    mhsOperatoren.add("getx");
    mhsOperatoren.add("gety");
    mhsOperatoren.add("gline2line");
    mhsOperatoren.add("gpoint2point");
    mhsOperatoren.add("gpoint2rect");
    mhsOperatoren.add("gps");
    mhsOperatoren.add("gpximport");
    mhsOperatoren.add("gracehashjoin");
    mhsOperatoren.add("gracehashjoinParam");
    mhsOperatoren.add("greeceknearest");
    mhsOperatoren.add("gridcell2rect");
    mhsOperatoren.add("gridintersects");
    mhsOperatoren.add("GROUP");
    mhsOperatoren.add("groupby");
    mhsOperatoren.add("groupby2");
    mhsOperatoren.add("hadoopjoin");
    mhsOperatoren.add("hadoopMap");
    mhsOperatoren.add("hadoopReduce");
    mhsOperatoren.add("hadoopReduce2");
    mhsOperatoren.add("halfSegments");
    mhsOperatoren.add("hashjoin");
    mhsOperatoren.add("hashvalue");
    mhsOperatoren.add("hat");
    mhsOperatoren.add("head");
    mhsOperatoren.add("heading");
    mhsOperatoren.add("history");
    mhsOperatoren.add("hour_of");
    mhsOperatoren.add("hybridhashjoin");
    mhsOperatoren.add("hybridhashjoinParam");
    mhsOperatoren.add("ifthenelse");
    mhsOperatoren.add("ifthenelse2");
    mhsOperatoren.add("in");
    mhsOperatoren.add("in_circlen");
    mhsOperatoren.add("includes");
    mhsOperatoren.add("indoornavigation");
    mhsOperatoren.add("ininterior");
    mhsOperatoren.add("initial");
    mhsOperatoren.add("insert");
    mhsOperatoren.add("insert1d");
    mhsOperatoren.add("insert1dvalue");
    mhsOperatoren.add("insert2d");
    mhsOperatoren.add("insert2dvalue");
    mhsOperatoren.add("insertbtree");
    mhsOperatoren.add("insertbtree2");
    mhsOperatoren.add("inserthash");
    mhsOperatoren.add("insertMMRTree ");
    mhsOperatoren.add("insertrtree");
    mhsOperatoren.add("insertsave");
    mhsOperatoren.add("inserttuple");
    mhsOperatoren.add("inserttuplesave");
    mhsOperatoren.add("inside");
    mhsOperatoren.add("inst");
    mhsOperatoren.add("instant2real");
    mhsOperatoren.add("int2bool");
    mhsOperatoren.add("int2real");
    mhsOperatoren.add("int2tid");
    mhsOperatoren.add("integrate");
    mhsOperatoren.add("internal_node_capacity");
    mhsOperatoren.add("intersection");
    mhsOperatoren.add("intersectionBO");
    mhsOperatoren.add("intersection_new");
    mhsOperatoren.add("intersection_rob");
    mhsOperatoren.add("intersects");
    mhsOperatoren.add("intersects_new");
    mhsOperatoren.add("intstream");
    mhsOperatoren.add("intstream2");
    mhsOperatoren.add("invert");
    mhsOperatoren.add("is");
    mhsOperatoren.add("is_castling");
    mhsOperatoren.add("isComplete");
    mhsOperatoren.add("isDBObject");
    mhsOperatoren.add("isdefined");
    mhsOperatoren.add("isDirectory");
    mhsOperatoren.add("isempty");
    mhsOperatoren.add("is_enpassant");
    mhsOperatoren.add("is_even");
    mhsOperatoren.add("isFile");
    mhsOperatoren.add("isgrayscale");
    mhsOperatoren.add("isknn");
    mhsOperatoren.add("is_mate");
    mhsOperatoren.add("is_neighbor");
    mhsOperatoren.add("is_odd");
    mhsOperatoren.add("isOrdered");
    mhsOperatoren.add("isportrait");
    mhsOperatoren.add("is_refinement");
    mhsOperatoren.add("is_stalemate");
    mhsOperatoren.add("iswhite");
    mhsOperatoren.add("itHashJoin ");
    mhsOperatoren.add("itSpatialJoin ");
    mhsOperatoren.add("joinMMRTreeIt");
    mhsOperatoren.add("joinMMRTreeItVec");
    mhsOperatoren.add("junctions");
    mhsOperatoren.add("junregion");
    mhsOperatoren.add("kbiggest");
    mhsOperatoren.add("keyrange");
    mhsOperatoren.add("keyrange ");
    mhsOperatoren.add("keyrange2");
    mhsOperatoren.add("keywords");
    mhsOperatoren.add("kinds");
    mhsOperatoren.add("kmismatch");
    mhsOperatoren.add("knearest");
    mhsOperatoren.add("knearest_dist");
    mhsOperatoren.add("knearestfilter");
    mhsOperatoren.add("knearestvector");
    mhsOperatoren.add("krdup");
    mhsOperatoren.add("krduph");
    mhsOperatoren.add("ksmallest");
    mhsOperatoren.add("lastmove");
    mhsOperatoren.add("lastoptree ");
    mhsOperatoren.add("ldistance");
    mhsOperatoren.add("leaf_node_capacity");
    mhsOperatoren.add("leapyear");
    mhsOperatoren.add("left");
    mhsOperatoren.add("leftrange");
    mhsOperatoren.add("leftrange2");
    mhsOperatoren.add("leftrangeS");
    mhsOperatoren.add("length");
    mhsOperatoren.add("letObject");
    mhsOperatoren.add("like");
    mhsOperatoren.add("line2gline");
    mhsOperatoren.add("line2region");
    mhsOperatoren.add("linearize");
    mhsOperatoren.add("linearize2");
    mhsOperatoren.add("loadmp3from");
    mhsOperatoren.add("locations");
    mhsOperatoren.add("loc_of_door");
    mhsOperatoren.add("log");
    mhsOperatoren.add("logB");
    mhsOperatoren.add("longestcommonsubstring");
    mhsOperatoren.add("longestrepeatedsubstring");
    mhsOperatoren.add("longlines");
    mhsOperatoren.add("loop");
    mhsOperatoren.add("loopa");
    mhsOperatoren.add("loopb");
    mhsOperatoren.add("loopjoin");
    mhsOperatoren.add("loopjoinrel");
    mhsOperatoren.add("loopsel");
    mhsOperatoren.add("loopselect");
    mhsOperatoren.add("loopselecta");
    mhsOperatoren.add("loopselectb");
    mhsOperatoren.add("loopswitch");
    mhsOperatoren.add("loopswitcha");
    mhsOperatoren.add("loopswitchb");
    mhsOperatoren.add("lowres ");
    mhsOperatoren.add("lyricswords");
    mhsOperatoren.add("makearray");
    mhsOperatoren.add("makearrayN");
    mhsOperatoren.add("makeDarray");
    mhsOperatoren.add("makeline");
    mhsOperatoren.add("makemvalue");
    mhsOperatoren.add("makepoint");
    mhsOperatoren.add("mapbstopave");
    mhsOperatoren.add("mapgenmo ");
    mhsOperatoren.add("mapmatching");
    mhsOperatoren.add("mapmatchmht");
    mhsOperatoren.add("mapmstopave");
    mhsOperatoren.add("markUsage");
    mhsOperatoren.add("matches");
    mhsOperatoren.add("matchingOperatorNames");
    mhsOperatoren.add("matchingOperators");
    mhsOperatoren.add("max");
    mhsOperatoren.add("maxD");
    mhsOperatoren.add("maxdegree");
    mhsOperatoren.add("maxDuration");
    mhsOperatoren.add("maximaluniquematches");
    mhsOperatoren.add("maximum");
    mhsOperatoren.add("maxInstant");
    mhsOperatoren.add("maxrect ");
    mhsOperatoren.add("mbool2mint");
    mhsOperatoren.add("mbrange");
    mhsOperatoren.add("mconsume");
    mhsOperatoren.add("md5");
    mhsOperatoren.add("mean");
    mhsOperatoren.add("meanX");
    mhsOperatoren.add("meanY");
    mhsOperatoren.add("memtuplesize");
    mhsOperatoren.add("merge");
    mhsOperatoren.add("mergecov2");
    mhsOperatoren.add("mergediff");
    mhsOperatoren.add("mergejoin");
    mhsOperatoren.add("mergertree");
    mhsOperatoren.add("mergesec");
    mhsOperatoren.add("mergeunion");
    mhsOperatoren.add("mgp2mgpsecunits");
    mhsOperatoren.add("mgp2mgpsecunits2");
    mhsOperatoren.add("mgp2mgpsecunits3");
    mhsOperatoren.add("mgpbbox");
    mhsOperatoren.add("mgpoint2mpoint");
    mhsOperatoren.add("mgpsu2tuple");
    mhsOperatoren.add("millisecond_of");
    mhsOperatoren.add("min");
    mhsOperatoren.add("minD");
    mhsOperatoren.add("mindegree");
    mhsOperatoren.add("minDuration");
    mhsOperatoren.add("minimum");
    mhsOperatoren.add("minInstant");
    mhsOperatoren.add("minus");
    mhsOperatoren.add("minus_new");
    mhsOperatoren.add("minute_of");
    mhsOperatoren.add("mirror");
    mhsOperatoren.add("mnnavigation");
    mhsOperatoren.add("mod");
    mhsOperatoren.add("mode2bit");
    mhsOperatoren.add("mode2str");
    mhsOperatoren.add("modeval");
    mhsOperatoren.add("modifyboundary");
    mhsOperatoren.add("modifyline");
    mhsOperatoren.add("month_of");
    mhsOperatoren.add("move");
    mhsOperatoren.add("moveFile");
    mhsOperatoren.add("moveNo");
    mhsOperatoren.add("moves");
    mhsOperatoren.add("mpoint2mgpoint");
    mhsOperatoren.add("ms_neighbors1");
    mhsOperatoren.add("ms_neighbors2");
    mhsOperatoren.add("mtoppred ");
    mhsOperatoren.add("multiintersection");
    mhsOperatoren.add("myinside");
    mhsOperatoren.add("namedtransformstream");
    mhsOperatoren.add("name_of");
    mhsOperatoren.add("navigation1");
    mhsOperatoren.add("nearstops_building");
    mhsOperatoren.add("neighbors");
    mhsOperatoren.add("nest");
    mhsOperatoren.add("netbbox");
    mhsOperatoren.add("netdistance");
    mhsOperatoren.add("netdistancenew");
    mhsOperatoren.add("never");
    mhsOperatoren.add("nmeaimport");
    mhsOperatoren.add("nmeaimport_line");
    mhsOperatoren.add("no_components");
    mhsOperatoren.add("no_components ");
    mhsOperatoren.add("nodes");
    mhsOperatoren.add("no_entries");
    mhsOperatoren.add("nonequal");
    mhsOperatoren.add("no_nodes");
    mhsOperatoren.add("north");
    mhsOperatoren.add("northeast");
    mhsOperatoren.add("northwest");
    mhsOperatoren.add("no_segments");
    mhsOperatoren.add("not");
    mhsOperatoren.add("now");
    mhsOperatoren.add("num2string");
    mhsOperatoren.add("number_of");
    mhsOperatoren.add("oconsume");
    mhsOperatoren.add("oldknearestfilter");
    mhsOperatoren.add("oleftrange");
    mhsOperatoren.add("omapmatchmht");
    mhsOperatoren.add("omapmatchmht_mpoint");
    mhsOperatoren.add("omapmatchmht_p");
    mhsOperatoren.add("onborder");
    mhsOperatoren.add("or");
    mhsOperatoren.add("orange");
    mhsOperatoren.add("orightrange");
    mhsOperatoren.add("oshortestpatha");
    mhsOperatoren.add("oshortestpathd");
    mhsOperatoren.add("osmimport");
    mhsOperatoren.add("osmlocmap");
    mhsOperatoren.add("osm_path");
    mhsOperatoren.add("out_circlen");
    mhsOperatoren.add("overlaps");
    mhsOperatoren.add("para");
    mhsOperatoren.add("partitionRect");
    mhsOperatoren.add("partjoin");
    mhsOperatoren.add("partjoinselect");
    mhsOperatoren.add("partjoinswitch");
    mhsOperatoren.add("partof");
    mhsOperatoren.add("passes");
    mhsOperatoren.add("passmbool");
    mhsOperatoren.add("path_in_region ");
    mhsOperatoren.add("path_to_building ");
    mhsOperatoren.add("patterncount");
    mhsOperatoren.add("patternFilter ");
    mhsOperatoren.add("patternoccurs");
    mhsOperatoren.add("patternpositions");
    mhsOperatoren.add("pave_loc_togp");
    mhsOperatoren.add("paveregion");
    mhsOperatoren.add("perimeter");
    mhsOperatoren.add("periods2mint");
    mhsOperatoren.add("pffeed");
    mhsOperatoren.add("piece");
    mhsOperatoren.add("piececount");
    mhsOperatoren.add("piece_moves");
    mhsOperatoren.add("piece_moves_blocked");
    mhsOperatoren.add("pieces");
    mhsOperatoren.add("piecevalue");
    mhsOperatoren.add("pin_nodes");
    mhsOperatoren.add("p_intersects");
    mhsOperatoren.add("placenodes");
    mhsOperatoren.add("point2d");
    mhsOperatoren.add("point2gpoint");
    mhsOperatoren.add("polygpoints");
    mhsOperatoren.add("polylines");
    mhsOperatoren.add("polylinesC");
    mhsOperatoren.add("pos_fields");
    mhsOperatoren.add("positions");
    mhsOperatoren.add("pos_moves");
    mhsOperatoren.add("pos_moves_blocked");
    mhsOperatoren.add("posrange_b");
    mhsOperatoren.add("pow");
    mhsOperatoren.add("predcounts ");
    mhsOperatoren.add("present");
    mhsOperatoren.add("printintstream");
    mhsOperatoren.add("printrefs ");
    mhsOperatoren.add("printstream");
    mhsOperatoren.add("product");
    mhsOperatoren.add("project");
    mhsOperatoren.add("projectextend");
    mhsOperatoren.add("projectextendstream");
    mhsOperatoren.add("projecttransformstream");
    mhsOperatoren.add("protectcount");
    mhsOperatoren.add("protectedby");
    mhsOperatoren.add("protectedfrom");
    mhsOperatoren.add("put");
    mhsOperatoren.add("putid3");
    mhsOperatoren.add("putinfra");
    mhsOperatoren.add("putlyrics");
    mhsOperatoren.add("putrel");
    mhsOperatoren.add("pwdisjoint");
    mhsOperatoren.add("queryrect2d");
    mhsOperatoren.add("rad2deg");
    mhsOperatoren.add("randint");
    mhsOperatoren.add("randmax");
    mhsOperatoren.add("randomdelay");
    mhsOperatoren.add("randommbool");
    mhsOperatoren.add("randomshiftdelay");
    mhsOperatoren.add("randseed");
    mhsOperatoren.add("range");
    mhsOperatoren.add("range2");
    mhsOperatoren.add("range_query");
    mhsOperatoren.add("rangeS");
    mhsOperatoren.add("range_tmrtree");
    mhsOperatoren.add("rangevalues");
    mhsOperatoren.add("rdup");
    mhsOperatoren.add("readFile");
    mhsOperatoren.add("readpgn");
    mhsOperatoren.add("real2int");
    mhsOperatoren.add("realJoinMMRTree");
    mhsOperatoren.add("realJoinMMRTreeVec");
    mhsOperatoren.add("realm");
    mhsOperatoren.add("realminize");
    mhsOperatoren.add("realstream");
    mhsOperatoren.add("receive");
    mhsOperatoren.add("receiveD");
    mhsOperatoren.add("receivetextstreamUDP");
    mhsOperatoren.add("receivetextUDP");
    mhsOperatoren.add("rect2periods");
    mhsOperatoren.add("rect2region");
    mhsOperatoren.add("rectangle2");
    mhsOperatoren.add("rectangle3");
    mhsOperatoren.add("rectangle4");
    mhsOperatoren.add("rectangle8");
    mhsOperatoren.add("rectproject");
    mhsOperatoren.add("reduce");
    mhsOperatoren.add("ref_id");
    mhsOperatoren.add("refinebr");
    mhsOperatoren.add("refine_bus_route");
    mhsOperatoren.add("refinedata");
    mhsOperatoren.add("refmo2genmo ");
    mhsOperatoren.add("regexmatches");
    mhsOperatoren.add("regvertex");
    mhsOperatoren.add("relax");
    mhsOperatoren.add("relcount");
    mhsOperatoren.add("relcount2");
    mhsOperatoren.add("remove");
    mhsOperatoren.add("remove_dirty ");
    mhsOperatoren.add("removeFile");
    mhsOperatoren.add("removeid3");
    mhsOperatoren.add("removelyrics");
    mhsOperatoren.add("rename");
    mhsOperatoren.add("renameattr");
    mhsOperatoren.add("renamecluster");
    mhsOperatoren.add("replace");
    mhsOperatoren.add("reset_counters");
    mhsOperatoren.add("restrict");
    mhsOperatoren.add("reverse");
    mhsOperatoren.add("rewrite");
    mhsOperatoren.add("right");
    mhsOperatoren.add("rightrange");
    mhsOperatoren.add("rightrange2");
    mhsOperatoren.add("rightrangeS");
    mhsOperatoren.add("rng_binomial");
    mhsOperatoren.add("rng_exponential");
    mhsOperatoren.add("rng_flat");
    mhsOperatoren.add("rng_gaussian");
    mhsOperatoren.add("rng_GeneratorMaxRand");
    mhsOperatoren.add("rng_GeneratorMinRand");
    mhsOperatoren.add("rng_GeneratorName");
    mhsOperatoren.add("rng_geometric");
    mhsOperatoren.add("rng_getMax");
    mhsOperatoren.add("rng_getMin");
    mhsOperatoren.add("rng_getSeed");
    mhsOperatoren.add("rng_getType");
    mhsOperatoren.add("rng_init");
    mhsOperatoren.add("rng_int");
    mhsOperatoren.add("rng_intN");
    mhsOperatoren.add("rng_NoGenerators");
    mhsOperatoren.add("rng_poisson");
    mhsOperatoren.add("rng_real");
    mhsOperatoren.add("rng_realpos");
    mhsOperatoren.add("rng_setSeed");
    mhsOperatoren.add("rootattrsize");
    mhsOperatoren.add("roottuplesize");
    mhsOperatoren.add("rotate");
    mhsOperatoren.add("rotationsweep");
    mhsOperatoren.add("rough_center");
    mhsOperatoren.add("round");
    mhsOperatoren.add("routeintervals");
    mhsOperatoren.add("routes");
    mhsOperatoren.add("row");
    mhsOperatoren.add("samecolor");
    mhsOperatoren.add("sample");
    mhsOperatoren.add("samplempoint");
    mhsOperatoren.add("sand");
    mhsOperatoren.add("savemp3to");
    mhsOperatoren.add("saveObject");
    mhsOperatoren.add("saveto");
    mhsOperatoren.add("scale");
    mhsOperatoren.add("scalerect");
    mhsOperatoren.add("searchPrefix");
    mhsOperatoren.add("searchWord ");
    mhsOperatoren.add("second_of");
    mhsOperatoren.add("sections");
    mhsOperatoren.add("segment2region");
    mhsOperatoren.add("segments");
    mhsOperatoren.add("send");
    mhsOperatoren.add("sendD");
    mhsOperatoren.add("sendtextstreamTCP");
    mhsOperatoren.add("sendtextUDP");
    mhsOperatoren.add("sentences");
    mhsOperatoren.add("seqinit");
    mhsOperatoren.add("seqnext");
    mhsOperatoren.add("set_br_speed");
    mhsOperatoren.add("set_bs_speed");
    mhsOperatoren.add("set_building_type ");
    mhsOperatoren.add("set_cache_limit_type");
    mhsOperatoren.add("set_cache_size");
    mhsOperatoren.add("set_debug");
    mhsOperatoren.add("set_histogram1d");
    mhsOperatoren.add("set_histogram2d");
    mhsOperatoren.add("set_maxkeysize");
    mhsOperatoren.add("set_maxvaluesize");
    mhsOperatoren.add("setoption");
    mhsOperatoren.add("setref_id");
    mhsOperatoren.add("setscalefactorx");
    mhsOperatoren.add("setscalefactory");
    mhsOperatoren.add("set_startsmaller");
    mhsOperatoren.add("set_stop_loc");
    mhsOperatoren.add("set_ts_daybus");
    mhsOperatoren.add("set_ts_nightbus");
    mhsOperatoren.add("setunitofdistance");
    mhsOperatoren.add("setunitoftime");
    mhsOperatoren.add("shortestpath");
    mhsOperatoren.add("shortest_path");
    mhsOperatoren.add("shortest_pathastar");
    mhsOperatoren.add("shortestpath_tm");
    mhsOperatoren.add("shortestpathtree");
    mhsOperatoren.add("shortestuniquesubstring");
    mhsOperatoren.add("shpexport");
    mhsOperatoren.add("shpimport");
    mhsOperatoren.add("shpimport2");
    mhsOperatoren.add("shpimport3");
    mhsOperatoren.add("shptype");
    mhsOperatoren.add("shrink_eager");
    mhsOperatoren.add("shrink_eager2");
    mhsOperatoren.add("shrink_lazy");
    mhsOperatoren.add("shrink_lazy2");
    mhsOperatoren.add("shutdown");
    mhsOperatoren.add("sim_create_trip");
    mhsOperatoren.add("sim_fillup_mpoint");
    mhsOperatoren.add("simpleequals");
    mhsOperatoren.add("simplify");
    mhsOperatoren.add("sim_print_params");
    mhsOperatoren.add("sim_set_dest_params");
    mhsOperatoren.add("sim_set_event_params");
    mhsOperatoren.add("sim_set_rng");
    mhsOperatoren.add("sim_trips");
    mhsOperatoren.add("sin");
    mhsOperatoren.add("single");
    mhsOperatoren.add("size");
    mhsOperatoren.add("sizecounters");
    mhsOperatoren.add("sizeOf");
    mhsOperatoren.add("sl2reg");
    mhsOperatoren.add("slidingwindow");
    mhsOperatoren.add("smcdgte");
    mhsOperatoren.add("smouterjoin");
    mhsOperatoren.add("sometimes");
    mhsOperatoren.add("songlength");
    mhsOperatoren.add("songyear");
    mhsOperatoren.add("sor");
    mhsOperatoren.add("sort");
    mhsOperatoren.add("sortarray");
    mhsOperatoren.add("sortby");
    mhsOperatoren.add("sortby_old");
    mhsOperatoren.add("sortbyParam");
    mhsOperatoren.add("sortmergejoin");
    mhsOperatoren.add("sortmergejoin_old");
    mhsOperatoren.add("sortmergejoinParam");
    mhsOperatoren.add("sort_old");
    mhsOperatoren.add("sortParam");
    mhsOperatoren.add("south");
    mhsOperatoren.add("southeast");
    mhsOperatoren.add("southwest");
    mhsOperatoren.add("spatialjoin");
    mhsOperatoren.add("spatialjoin0");
    mhsOperatoren.add("speed");
    mhsOperatoren.add("speed_new");
    mhsOperatoren.add("splitslineatpoints");
    mhsOperatoren.add("spread");
    mhsOperatoren.add("spsearchvisited");
    mhsOperatoren.add("sqlExport");
    mhsOperatoren.add("sqrt");
    mhsOperatoren.add("squareddistance");
    mhsOperatoren.add("stalemate");
    mhsOperatoren.add("start");
    mhsOperatoren.add("startfield");
    mhsOperatoren.add("starts");
    mhsOperatoren.add("startsreg");
    mhsOperatoren.add("startunitinst");
    mhsOperatoren.add("startup");
    mhsOperatoren.add("state_of_door");
    mhsOperatoren.add("statMMRTree");
    mhsOperatoren.add("statMMRTree ");
    mhsOperatoren.add("stats");
    mhsOperatoren.add("stconstraint");
    mhsOperatoren.add("stdpgroup");
    mhsOperatoren.add("stpattern");
    mhsOperatoren.add("stpattern2");
    mhsOperatoren.add("stpatternex");
    mhsOperatoren.add("stpatternex2");
    mhsOperatoren.add("stpatternexextend");
    mhsOperatoren.add("stpatternexextend2");
    mhsOperatoren.add("stpatternexextendstream");
    mhsOperatoren.add("stpatternexextendstream2");
    mhsOperatoren.add("stpatternextend");
    mhsOperatoren.add("stpatternextend2");
    mhsOperatoren.add("stpatternextendstream");
    mhsOperatoren.add("stpatternextendstream2");
    mhsOperatoren.add("str2date");
    mhsOperatoren.add("STREAMELEM");
    mhsOperatoren.add("STREAMELEM2");
    mhsOperatoren.add("strequal");
    mhsOperatoren.add("subline");
    mhsOperatoren.add("submp3");
    mhsOperatoren.add("substr");
    mhsOperatoren.add("subtext");
    mhsOperatoren.add("sum");
    mhsOperatoren.add("summarize");
    mhsOperatoren.add("svg2text");
    mhsOperatoren.add("symmjoin");
    mhsOperatoren.add("symmouterjoin");
    mhsOperatoren.add("symmproduct");
    mhsOperatoren.add("symmproductextend");
    mhsOperatoren.add("sys_getAlgebraId");
    mhsOperatoren.add("sys_getAlgebraName");
    mhsOperatoren.add("sys_getMatchingOperators");
    mhsOperatoren.add("tail");
    mhsOperatoren.add("tan");
    mhsOperatoren.add("tbentries");
    mhsOperatoren.add("tbleafnodes");
    mhsOperatoren.add("tblevel");
    mhsOperatoren.add("tbnodes");
    mhsOperatoren.add("tconsume");
    mhsOperatoren.add("test_bnnavigation");
    mhsOperatoren.add("testRegionCreator");
    mhsOperatoren.add("test_walk_sp");
    mhsOperatoren.add("text2svg");
    mhsOperatoren.add("thebuilding");
    mhsOperatoren.add("thebusnetwork");
    mhsOperatoren.add("thedate");
    mhsOperatoren.add("theday");
    mhsOperatoren.add("thedoor");
    mhsOperatoren.add("thefloor");
    mhsOperatoren.add("thehour");
    mhsOperatoren.add("theindoor ");
    mhsOperatoren.add("theInstant");
    mhsOperatoren.add("the_ivalue");
    mhsOperatoren.add("themetronetwork");
    mhsOperatoren.add("theminute");
    mhsOperatoren.add("themonth");
    mhsOperatoren.add("the_mvalue");
    mhsOperatoren.add("the_mvalue2");
    mhsOperatoren.add("thenetwork");
    mhsOperatoren.add("theosmpave");
    mhsOperatoren.add("thepavement ");
    mhsOperatoren.add("theperiod");
    mhsOperatoren.add("theRange");
    mhsOperatoren.add("thesecond");
    mhsOperatoren.add("thespace ");
    mhsOperatoren.add("the_unit");
    mhsOperatoren.add("thevertex");
    mhsOperatoren.add("theyear");
    mhsOperatoren.add("tid2int");
    mhsOperatoren.add("tie");
    mhsOperatoren.add("timeout");
    mhsOperatoren.add("titleof");
    mhsOperatoren.add("tm_at");
    mhsOperatoren.add("tm_at2");
    mhsOperatoren.add("tm_at3");
    mhsOperatoren.add("tm_build_id");
    mhsOperatoren.add("tmcontains");
    mhsOperatoren.add("tm_distance");
    mhsOperatoren.add("tm_duration");
    mhsOperatoren.add("tm_genloc");
    mhsOperatoren.add("tm_join1");
    mhsOperatoren.add("tm_mr2ms");
    mhsOperatoren.add("tm_nodes");
    mhsOperatoren.add("tm_passes");
    mhsOperatoren.add("tm_plus_id");
    mhsOperatoren.add("tm_room_id");
    mhsOperatoren.add("tmrtreemode");
    mhsOperatoren.add("tm_segs");
    mhsOperatoren.add("tm_traffic");
    mhsOperatoren.add("tm_translate");
    mhsOperatoren.add("tm_translate2");
    mhsOperatoren.add("toCSVtext");
    mhsOperatoren.add("today");
    mhsOperatoren.add("toFields");
    mhsOperatoren.add("tokenize");
    mhsOperatoren.add("tolower");
    mhsOperatoren.add("toObject");
    mhsOperatoren.add("toppred");
    mhsOperatoren.add("toprel");
    mhsOperatoren.add("toprelseq");
    mhsOperatoren.add("tostring");
    mhsOperatoren.add("totext");
    mhsOperatoren.add("touchpoints");
    mhsOperatoren.add("toupper");
    mhsOperatoren.add("track");
    mhsOperatoren.add("trajectory");
    mhsOperatoren.add("transformR2Tstream");
    mhsOperatoren.add("transformstream");
    mhsOperatoren.add("transformT2Rstream");
    mhsOperatoren.add("translate");
    mhsOperatoren.add("translateappend");
    mhsOperatoren.add("translateappendS");
    mhsOperatoren.add("translate_groom");
    mhsOperatoren.add("translatehistogram");
    mhsOperatoren.add("transpose");
    mhsOperatoren.add("treeheight");
    mhsOperatoren.add("triangulation");
    mhsOperatoren.add("triangulation2");
    mhsOperatoren.add("triangulation_ext");
    mhsOperatoren.add("triangulation_ext2");
    mhsOperatoren.add("triangulation_new");
    mhsOperatoren.add("triangulation_new2");
    mhsOperatoren.add("trim");
    mhsOperatoren.add("TUPLE");
    mhsOperatoren.add("TUPLE2");
    mhsOperatoren.add("tuplebuffer");
    mhsOperatoren.add("tuplebuffer2");
    mhsOperatoren.add("tuplefile");
    mhsOperatoren.add("tupleid");
    mhsOperatoren.add("tuplesize");
    mhsOperatoren.add("twed");
    mhsOperatoren.add("twotuples");
    mhsOperatoren.add("type_of_door");
    mhsOperatoren.add("ugpoint2mgpoint");
    mhsOperatoren.add("uint2ureal");
    mhsOperatoren.add("union");
    mhsOperatoren.add("union_new");
    mhsOperatoren.add("unitboundingbox");
    mhsOperatoren.add("unitbox");
    mhsOperatoren.add("unitbox2");
    mhsOperatoren.add("unitendpos");
    mhsOperatoren.add("unitendtime");
    mhsOperatoren.add("unitrid");
    mhsOperatoren.add("units");
    mhsOperatoren.add("units ");
    mhsOperatoren.add("unitstartpos");
    mhsOperatoren.add("unitstarttime");
    mhsOperatoren.add("unnest");
    mhsOperatoren.add("unpin_nodes");
    mhsOperatoren.add("unspecified");
    mhsOperatoren.add("updatebtree");
    mhsOperatoren.add("updatebtree2");
    mhsOperatoren.add("updatebulkloadrtree");
    mhsOperatoren.add("updatebyid");
    mhsOperatoren.add("updatedirect");
    mhsOperatoren.add("updatedirectsave");
    mhsOperatoren.add("updatehash");
    mhsOperatoren.add("updatertree");
    mhsOperatoren.add("updatesearch");
    mhsOperatoren.add("updatesearchsave");
    mhsOperatoren.add("up_down");
    mhsOperatoren.add("use");
    mhsOperatoren.add("use2");
    mhsOperatoren.add("usehistogram");
    mhsOperatoren.add("usehistogram2");
    mhsOperatoren.add("val");
    mhsOperatoren.add("var");
    mhsOperatoren.add("variance");
    mhsOperatoren.add("varianceX");
    mhsOperatoren.add("varianceY");
    mhsOperatoren.add("vec");
    mhsOperatoren.add("velocity");
    mhsOperatoren.add("velocity_new");
    mhsOperatoren.add("version");
    mhsOperatoren.add("vertextrajectory");
    mhsOperatoren.add("vertices");
    mhsOperatoren.add("walk_sp");
    mhsOperatoren.add("walk_sp_debug");
    mhsOperatoren.add("walk_sp_old");
    mhsOperatoren.add("weekday_of");
    mhsOperatoren.add("west");
    mhsOperatoren.add("when");
    mhsOperatoren.add("whiledo");
    mhsOperatoren.add("windowclippingin");
    mhsOperatoren.add("windowclippingout");
    mhsOperatoren.add("windowintersects");
    mhsOperatoren.add("windowintersectsS");
    mhsOperatoren.add("within");
    mhsOperatoren.add("within2");
    mhsOperatoren.add("writeFile");
    mhsOperatoren.add("year_of");
    mhsOperatoren.add("zcurve");
    mhsOperatoren.add("zero");
    mhsOperatoren.add("zval");
  }
}
