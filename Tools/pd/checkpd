# This file is part of the PD system
# Copyright (C) 1998 Ralf Hartmut Gueting, Fachbereich Informatik, FernUniversitaet Hagen

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# !/bin/sh
# Script for checking of correctness with respect to pd and latex
#
#
MAXLINES=80
IGNORE_INCLUDES="true"

# check the first argument to be '--strong'
# using this argument, too long lines will be treated as errors
# instead of warnings
STRONG=false
if [ "$1" == "--strong" ]; then
   STRONG=true
   shift
fi


ARGS=$*
if [ -z "$ARGS" ]
then
   FILESCPP=$(find $PWD -name '*.cpp')
   FILESH=$(find $PWD -name '*.h')
   MYFILES="$FILESCPP $FILESH"
else
   MYFILES=""
   for G in $ARGS
   do
     MYFILES="$MYFILES $PWD/$G"
   done
fi

TEMPDIR="$PWD/.checkpd"
HERE="$PWD"

if [ ! -d "$TEMPDIR"  ]; then
   mkdir "$TEMPDIR"
   if [ $? -ne 0 ]; then
     echo "cannot create temp directory"
     exit -1
   fi
   EXIST=FALSE
else
   EXIST=TRUE
fi

cd "$TEMPDIR"

PROCESSED=0
PDFAILED=0
LATEXFAILED=0
LINEFAILED=0
NOTFOUND=0

for F in $MYFILES
do
   if [ ! -e "$F" ]; then
      NOTFOUND=$(expr "$NOTFOUND" + 1)
   else
      PROCESSED=$(expr "$PROCESSED" + 1)
      S=$((pdtabs <"$F" | maketex >/dev/null) 2>&1)
      if [ $? -ne 0 ]
      then
        echo "pdcheck for $F failed"
        echo "message : $S"
        echo -e "\n"
        PDFAILED=$(expr "$PDFAILED" + 1)
      else
        {
          cat "$PD_HEADER"
          pdtabs <$F | maketex | linebreaks
        } >"$TEMPDIR"/tmp.tex
        latex -interaction=nonstopmode "$TEMPDIR"/tmp.tex >/dev/null
        if [ $? -ne 0 ]; then
           if [ -n "$IGNORE_INCLUDES" ]; then
              TEXLOG="$TEMPDIR"/tmp.log
              LE=$(cat "$TEXLOG" | grep -i "^\!" | grep -vi "File .* not found" | grep -vi "cannot determine size of" | wc -l)
              if [ "$LE" -gt 0 ]; then
                 echo -e "LaTeX Error in \"$F\" \n"
                 LATEXFAILED=$(expr "$LATEXFAILED" + 1)
              fi
           else
             echo -e "LaTeX Error in \"$F\" (If the file contains figures we can't avoid this) \n"
             LATEXFAILED=$(expr "$LATEXFAILED" + 1)
           fi
        else
           linecheck "$MAXLINES" $F >/dev/null
           CL="$?"
           if [ "$CL" -ne 0 ]; then
              if [ "$STRONG" == "true" ]; then
                 echo -e "Error: $CL lines too long in \"$F\""
              else
                 echo -e "Warning: $CL lines too long in \"$F\""
              fi
              LINEFAILED=$(expr "$LINEFAILED" + 1)
           fi
        fi
        rm -f $TEMPDIR/*.dvi $TEMPDIR/*.log $TEMPDIR/*.aux $TEMPDIR/*.tmp $TEMPDIR/*.toc $TEMPDIR/tmp.tex
      fi
   fi
done

cd "$HERE"
rm -rf "$TEMPDIR"

SUCCESS=$(expr "$PROCESSED" - "$PDFAILED" - "$LINEFAILED" - "$LATEXFAILED" )
if [ "$PROCESSED" -gt 0 ]; then
   echo "checkpd Statistic:"
   if [ "$NOTFOUND" -gt 0 ]; then
      echo "files not found : $NOTFOUND "
   fi
   echo "processed files : $PROCESSED"
   echo "pd errors       : $PDFAILED"
   echo "latex errors    : $LATEXFAILED"
   echo "too long lines  : $LINEFAILED"
   echo "files ok        : $SUCCESS"
else
   if [ "$NOTFOUND" -gt 0 ]; then
      echo "checkpd: files not found : $NOTFOUND "
   fi
   echo "checkpd: no file to check"
fi

if [ "$STRONG" != "true" ]; then
    FAILED=$(expr "$PDFAILED" + "$LATEXFAILED")
else
    FAILED=$(expr "$PDFAILED" + "$LATEXFAILED" +  "$LINEFAILED" )
fi
#FAILED="$PDFAILED"
exit "$FAILED"
