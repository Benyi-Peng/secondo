# SECONDO ENVIRONMENT SETUP FOR LINUX 
#
# Since Feb 2005. M. Spiekermann

# Note: If you plan to try to other versions of Berkeley DB, bison, flex, etc
# rename the old one and 
# configure it for installation within the directory structure of installsdk which
# is
#
# $SECONDO_SDK
#         |-gcc
#         |-flex
#         |-bison
#         |-swi       SWI-Prolog
#         |-bdb       Berkeley-DB 
#         |-aux       Auxiliary tools, readline, jpeg-lib, etc 
#
# If you plan to use another directory layout please be careful. Study the
# settings made in the file secondo.setroot.
#
# You need to set the environment variables
#
# C_INCLUDE_PATH       // list of paths for compiling C-code 
# CPLUS_INCLUDE_PATH   // list of paths for compiling C++-code
# LIBRARY_PATH         // list of paths for the linker
# LD_LIBRARY_PATH      // list of paths for shared obejcts (runtime linker)

# For some strange reason the jepge library is not found although it
# is defined in LIBRARY_PATH. Therefore we define some special additional
# linker flags
export SECONDO_LDFLAGS="-L$SECONDO_SDK/aux/lib"


#SWI Prolog
export SWI_HOME_DIR="$SECONDO_SDK/swi/lib/pl-5.4.7"
export PL_INCLUDE_DIR="$SWI_HOME_DIR/include"
export PL_LIB_DIR="$SWI_HOME_DIR/lib/i686-linux"

export PL_VERSION="50407"
# If the OptimizerServer crashes at runtime try to use it
# with the jpl libraries provided by SWI-Prolog instead of
# compiling it (see also Jpl/readme.txt).

#export PL_DLL_DIR=PL_LIB_DIR
#export JPL_JAR=$SWI_HOME_DIR/lib/jpl.jar
#export JPL_DLL=$PL_DLL_DIR/libjpl.so

#JAVA
export J2SDK_ROOT="$SECONDO_SDK/j2sdk1.4.2_01"

#PD System
export PD_DVI_VIEWER=xdvi
export PD_PS_VIEWER=gv

#Readline support
export readline=true
