# !/bin/bash
#
# cvs-make.sh: 
# 
# This bash-script checks out the last SECONDO sources
# and runs make to compile them.
#
# 03/02/28 M. Spiekermann: initial version
# 04/01/27 M. Spiekermann: port from csh to bash 
# 05/01/27 M. Spiekermann: major revision, automatic test runs
# July 2005 M. Spiekermann: cvsDir was not set correctly.
#
# July-August 2005, M. Spiekermann: The script will now only
#  compile SECONDO if there are changes in the CVS repository.
#  Moreover, the CVS history will be shown and the users who made
#  changes are extracted and their email addresses are retrieved.
#
# August 2005, M. Spiekermann: A new function makeSecondo was introduced. Now
#  SECONDO will be compiled twice: first with all algebra modules activated
#  and second with the algebras as defined in makefile.alsgebras.sample. 
#  Moreover, if the script is successful, a new tag LAST_STABLE will be set
#  for the file's revision numbers.
#
# January 2006, M. Spiekermann: A backup dir for mails and test outputs
#   was implemented. 




baseDir=$HOME/${0%/*}
# include function definitions
# libutil.sh must be in the search PATH 
if [ -s $baseDir/libutil.sh ]; 
then
  if ! source $baseDir/libutil.sh; then exit 1; fi
else
  if ! source libutil.sh; then exit 1; fi
fi



# makeSecondo $1 $2
#
# $1 file name for make's output
# $2 subject for email
function makeSecondo() {

local msgFile=$1
local subject=$2

cd $cbuildDir
CM-Scripts/catvar.sh > $msgFile 2>&1

if isCmdPresent "nice"; then
  local niceOpt="nice -n 19"
fi

checkCmd "$niceOpt make" >> $msgFile 2>&1

local rc=$?
# proceed if last command was successful
if [ $rc -ne 0 ]; then

  printf "%s\n" "Problems during build, sending a mail."

  sendMail "$subject" "$mailRecipients" "$mailBody1" "$cvsHistMailBackupDir" "$msgFile" 

  return $rc 
fi

}


#default options
rootDir=$HOME
coDir=tmp_secondo_${date_ymd}_${date_HMS}
cvsDir=/home/cvsroot
coTag="HEAD"
coModule="secondo"
LU_SENDMAIL="true"

declare -i numOfArgs=$#
let numOfArgs++

while [ $# -eq 0 -o $numOfArgs -ne $OPTIND ]; do

  getopts "hnr:c:t:" optKey
  if [ "$optKey" == "?" ]; then
    optKey="h"
  fi

  case $optKey in

   h) showGPL
      printf "\n%s\n" "Usage of ${0##*/}:" 
      printf "%s\n"   "  -r<root-dir> => Mandatory argument"
      printf "%s\n"   "Options:"
      printf "%s\n"   "  -h print this message and exit."
      printf "%s\n"   "  -n send no mails. Just print the message to stdout."
      printf "%s\n"   "  -t<version-tag> => \"${coTag}\" "
      printf "%s\n"   "  -m<cvs-module> => \"${coModule}\" "
      printf "%s\n\n" "  -c<checkout-dir> => \"tmp_secondo_<date>\""
      printf "%s\n"   "The script checks out a local copy of <cvs-module> into the directoy"
      printf "%s\n"   "into <root-dir>/<checkout-dir> and runs make, various tests, etc."
      printf "%s\n\n" "In case of a failure an email will be sent to the CVS users."
      exit 0;;
   
   r) rootDir=$OPTARG;;

   c) coDir=$OPTARG;;

   t) coTag=$OPTARG;;

   n) LU_SENDMAIL="false";;

  esac

done

# set up environment for secondo
source ~/.bashrc # this is needed when started by cron
if ! source ~/.secondorc ""; then exit 1; fi

# derive some other important directories
cbuildDir=${rootDir}/${coDir}
scriptDir=${cbuildDir}/CM-Scripts

printSep "Startup parameters ($(date))"

printf "%s\n" "Script = ${PWD}/$0"
printf "%s\n" "rootDir = $rootDir"
printf "%s\n" "cvsDir = $cvsDir"
printf "%s\n" "coDir = $coDir"
printf "%s\n" "coTag = $coTag"
printf "%s\n" "coModule = $coModule"
printf "%s\n" "LU_SENDMAIL = $LU_SENDMAIL"


## check if files in the module secondo were changed
## since the last run
lastDateFile="$HOME/.cvs-make-lastrun"
lastDateFileHeader="#This file was generated by $0! It stores the date of the last run."

cvsHistRootDir="/home/secondo/testrun-errors"
cvsHistFile="$cvsHistRootDir/cvs-make-history"
cvsHistMailBackupDir=$cvsHistRootDir/${date_ymd}_${date_HMS}


# retrieve date of last run and store it in the first
# line. This is more secure since time stamps of the file
# may be corrupted by backup-script etc.
if [ -e $lastDateFile ]; then
  lastDate=$(tail -n1 $lastDateFile)
else
  lastDate="1-day-ago"
fi

cvsHistory=$(cvs history -xMAR -a -D"$lastDate" -p secondo)

# store current date in file
currentDate=$(date +"%Y-%m-%d %H:%M")

echo $lastDateFileHeader > $lastDateFile
echo $currentDate >> $lastDateFile

cvsChanges="
-----------------------------------------------------------
${currentDate}: Changes since last run (${lastDate})
-----------------------------------------------------------
$cvsHistory"
echo -e "$cvsChanges" >> $cvsHistFile

# extract the 1st line of cvs history 
cvsHasChanged=$(echo $cvsHistory | head -n1)

if [ "$cvsHasChanged" != "No records selected." ]; then
 
  echo -e "\n$cvsChanges"

  cvsUsers=$( echo -e "$cvsHistory" | 
	      awk '/./ { print $5 }' | sort | uniq | tr "\n" " " )

  mailRecipients=""
  for userName in $cvsUsers; do

    mapStr "${cvsDir}/CVSROOT/users" "$userName" ":"
    mailRecipients="$LU_MAPSTR $mailRecipients"

  done

  printf "\n%s\n" "CVS user(s)     : $cvsUsers"
  printf "%s\n"   "Mail address(es): $mailRecipients"
  

else

  printf "\nNo changes since ${lastDate}! \n\n"
  exit 1;

fi



## report host status 
printSep "host status"
printf "%s\n" "uptime"
uptime
printf "\n%s\n" "disk free"
df -k
printf "\n%s\n" "memory usage"
free -m


# define mail bodys
mailHeader="
This message was generated by $0!  

$cvsChanges"

mailFooter="
Please contact the involved people in order to find out 
who should fix the problem! A history of the old error log
files is stored in $cvsHistRootDir on server zeppelin."

mailBody1="
$mailHeader

You will find the output of make in the attached file.
$mailFooter
"

mailBody2="
$mailHeader

You will find the log files of the failed tests in the attached file.
$mailFooter"

## checkout work copy
printSep "Checking out work copy"
setvar $cbuildDir
printSep "Environment settings"
catvar

printSep "Alias definitions"
alias

cd $rootDir
checkCmd "cvs -Q checkout -d $coDir -P secondo"

## run make
printSep "Compiling SECONDO"

declare -i errors=0
cd $cbuildDir
printf "\n%s\n" "Entering directory $PWD"

export SECONDO_ACTIVATE_ALL_ALGEBRAS="true"
export SECONDO_YACC="/usr/bin/bison"

makeSecondo "make-allalgebras.log" "Building SECONDO with all algebras failed!"

checkCmd "make realclean" > make-realclean.log 2>&1
unset SECONDO_ACTIVATE_ALL_ALGEBRAS
makeSecondo "make-nojni.log" "Building SECONDO failed!"


## run tests

if [ $? == 0 ]; then

  printSep "Running automatic tests"
  cd $scriptDir
  checkCmd "run-tests.sh -tty $cvsHistRootDir" 

  if [ $? -ne 0 ]; then
    
    printf "%s\n" "Problems during test, sending a mail"
  
    attachment2="$cbuildDir/failedTests.tar.gz"
    subject2="Automatic tests failed!"

    failedHist="

List of failed tests:
---------------------
$(find $cvsHistRootDir -name "_failed_*" -exec cat {} \;)
"

    sendMail "$subject2" "$mailRecipients" "$mailBody2 $failedHist" "$cvsHistMailBackupDir" "$attachment2"
    let errors++

  fi

fi


if [ $[errors] != 0 ]; then

  printf "\n *** There were $errors errors in the automatic tests! ***\n"

else

  cd $cbuildDir
  ## run make clean
  printSep "Cleaning SECONDO"
  checkCmd "make realclean" > make-realclean2.log 2>&1

  printSep "Check for undeleted files ( *.{o,a,so,dll,class} )"
  find . -iregex ".*\.\([oa]\|so\|dll\|class\)"

  printf "\n%s\n" "files in SECONDO's /lib and /bin directory:"
  find ./lib ! -path "*CVS*" 
  find ./bin ! -path "*CVS*"

  printf "\n%s\n" "files unkown to CVS:"
  cvs -nQ update


  # move label for stable version
  tagSym="LAST_STABLE"
  tagMsg="Moving CVS tag $tagSym"
  printSep $tagMsg
  echo -e "Automatic regression test was successful. ${tagMsg}!" >> $cvsHistFile
  cvs -Q tag -d $tagSym 
  cvs -Q tag $tagSym
  make tag $tagSym src-archives
  cp /tmp/make-spieker/secondo-$tagSym* /www/secondo/internal
  rm -rf ${cbuildDir}

fi

exit $errors
