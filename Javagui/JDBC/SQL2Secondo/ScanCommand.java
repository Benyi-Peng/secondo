/* The following code was generated by JFlex 1.4.3 on 04.05.12 05:24 */

package SQL2Secondo;

import java_cup10.runtime.*;
import java.io.IOException;
import SecExceptions.*;

import SQL2Secondo.ParsCommandSym;
import static SQL2Secondo.ParsCommandSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04.05.12 05:24 from the specification file
 * <tt>D:/Daten/Eigene Programme/Java/SecondoSQL/src/SQL2Secondo/ScanCommand.lex</tt>
 */
final class ScanCommand implements java_cup10.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\23\1\0\1\60"+
    "\4\0\1\43\1\12\1\13\1\53\1\6\1\14\1\7\1\44\1\54"+
    "\1\5\1\42\10\11\1\45\1\0\1\55\1\57\1\56\2\0\1\17"+
    "\1\40\1\15\1\31\1\22\1\36\1\30\1\16\1\26\1\46\1\52"+
    "\1\33\1\32\1\27\1\37\1\41\1\51\1\20\1\35\1\21\1\34"+
    "\1\24\1\47\1\50\1\25\1\4\1\0\1\61\2\0\1\10\1\0"+
    "\1\17\1\40\1\15\1\31\1\22\1\36\1\30\1\16\1\26\1\46"+
    "\1\52\1\33\1\32\1\27\1\37\1\41\1\51\1\20\1\35\1\21"+
    "\1\34\1\24\1\47\1\50\1\25\1\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\23\2\1\11\1\12\1\0\2\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\0"+
    "\1\3\12\2\1\24\10\2\1\25\1\26\35\2\1\27"+
    "\1\2\1\30\2\2\1\31\4\2\1\32\2\2\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\15\2"+
    "\1\42\1\43\1\44\1\45\1\2\1\46\1\47\13\2"+
    "\1\50\6\2\1\51\4\2\1\50\6\2\1\52\1\53"+
    "\10\2\1\54\4\2\1\55\11\2\1\0\10\2\1\56"+
    "\2\2\1\57\12\2\1\60\2\2\1\61\3\2\1\62"+
    "\12\2\1\63\1\0\1\2\1\64\1\65\1\0\2\2"+
    "\1\66\5\2\1\67\4\2\1\70\6\2\1\71\2\2"+
    "\1\72\1\2\1\73\3\2\1\0\2\2\1\0\3\2"+
    "\1\74\1\2\1\0\1\2\1\0\1\75\11\2\1\76"+
    "\1\2\1\77\1\100\2\2\1\101\3\2\1\102\2\2"+
    "\1\103\4\2\1\0\1\2\3\0\5\2\1\104\2\0"+
    "\1\105\2\2\1\106\6\2\1\107\1\61\4\2\1\0"+
    "\1\110\1\2\1\0\3\2\1\111\1\0\1\2\1\0"+
    "\1\2\1\112\2\0\5\2\1\113\1\114\3\2\1\115"+
    "\1\116\1\117\6\2\4\0\1\50\1\0\5\2\2\0"+
    "\1\120\1\2\1\121\1\122\4\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\123\3\2\1\0\1\56\1\2"+
    "\1\0\1\124\7\2\1\50\1\2\1\0\1\2\1\50"+
    "\6\0\1\125\2\2\2\0\1\126\3\2\1\127\1\0"+
    "\2\2\1\0\1\2\1\0\1\130\1\123\1\131\1\2"+
    "\1\0\1\2\1\0\3\2\1\132\4\2\3\0\1\57"+
    "\1\133\3\0\1\134\1\2\2\0\2\2\1\61\1\135"+
    "\1\0\1\136\1\137\3\0\1\56\1\0\4\2\1\140"+
    "\1\141\12\0\1\2\1\0\1\74\2\2\4\0\2\2"+
    "\1\142\1\143\10\0\1\144\1\0\1\2\1\0\2\2"+
    "\4\0\2\2\1\145\6\0\1\146\2\2\1\147\1\150"+
    "\1\151\1\0\1\56\1\152\1\2\4\0\1\2\1\153"+
    "\1\0\1\154\1\0\1\2\2\0\1\2\4\0\1\155"+
    "\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\226\0\226"+
    "\0\226\0\226\0\226\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\226\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\226\0\226\0\u05aa\0\u05dc\0\226"+
    "\0\u060e\0\u0640\0\226\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\310\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\310\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\u12f2\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\310\0\310\0\310\0\310\0\u15ae\0\310"+
    "\0\310\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\310"+
    "\0\310\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\310\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\310\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\310\0\u222e\0\u2260\0\u2292"+
    "\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\310"+
    "\0\u2422\0\u2454\0\310\0\u2486\0\u24b8\0\u24ea\0\310\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\310\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\310"+
    "\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\310\0\u2a62\0\u2a94\0\u2ac6"+
    "\0\u2af8\0\u2b2a\0\u2b5c\0\310\0\u2b8e\0\u2bc0\0\310\0\u2bf2"+
    "\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82"+
    "\0\u2db4\0\u2de6\0\u2e18\0\310\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0"+
    "\0\310\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e"+
    "\0\u3070\0\u30a2\0\310\0\u30d4\0\310\0\310\0\u3106\0\u3138"+
    "\0\310\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426"+
    "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\310\0\u3584"+
    "\0\u35b6\0\u2f76\0\u35e8\0\u361a\0\310\0\u364c\0\u367e\0\u36b0"+
    "\0\u36e2\0\u3714\0\u3746\0\310\0\u3778\0\u37aa\0\u37dc\0\u380e"+
    "\0\u3840\0\u3872\0\310\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c"+
    "\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\310\0\u3a98\0\u3aca"+
    "\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\310\0\310\0\u3bf6"+
    "\0\u3c28\0\u3c5a\0\310\0\310\0\310\0\u3c8c\0\u3cbe\0\u3cf0"+
    "\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\226"+
    "\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde"+
    "\0\310\0\u4010\0\310\0\310\0\u4042\0\u4074\0\u40a6\0\u40d8"+
    "\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\226"+
    "\0\u4268\0\u429a\0\u42cc\0\u42fe\0\226\0\u4330\0\u4362\0\310"+
    "\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\310"+
    "\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650"+
    "\0\u4682\0\u46b4\0\310\0\u46e6\0\u4718\0\u474a\0\u477c\0\310"+
    "\0\u47ae\0\u47e0\0\u4812\0\310\0\u4844\0\u4876\0\u48a8\0\u48da"+
    "\0\u490c\0\u493e\0\310\0\310\0\310\0\u4970\0\u49a2\0\u49d4"+
    "\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\310\0\u4ace\0\u4b00\0\u4b32"+
    "\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\226\0\226\0\u4c2c\0\u4c5e"+
    "\0\u4c90\0\310\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\226"+
    "\0\310\0\u4dbc\0\226\0\310\0\u4dee\0\u4e20\0\u4e52\0\u4e84"+
    "\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\310\0\310\0\u4fb0"+
    "\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140"+
    "\0\u5172\0\u51a4\0\u51d6\0\226\0\u5208\0\u523a\0\u526c\0\u529e"+
    "\0\u52d0\0\u5302\0\u5334\0\u5366\0\310\0\310\0\u5398\0\u53ca"+
    "\0\u53fc\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\226\0\u5528"+
    "\0\u555a\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654\0\u5686\0\u56b8"+
    "\0\u56ea\0\u571c\0\226\0\u574e\0\u5780\0\u57b2\0\u57e4\0\u5816"+
    "\0\u5848\0\226\0\u587a\0\u58ac\0\310\0\226\0\226\0\u58de"+
    "\0\u5910\0\310\0\u5942\0\u5974\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c"+
    "\0\310\0\u5a6e\0\310\0\u5aa0\0\u5ad2\0\u5b04\0\u5b36\0\u5b68"+
    "\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30\0\226\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\10\1\0"+
    "\1\6\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\4\1\22\1\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\6\1\37\1\40\1\41\1\42\1\43\3\5"+
    "\1\44\1\45\1\46\1\47\1\50\2\0\1\51\2\0"+
    "\40\51\1\52\14\51\1\53\1\54\2\0\1\4\145\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\17\5\3\0"+
    "\5\5\14\0\1\6\3\0\1\6\10\0\1\55\17\0"+
    "\1\6\1\0\1\56\21\0\2\5\2\0\2\5\3\0"+
    "\1\5\1\57\1\60\1\61\2\5\1\0\10\5\1\62"+
    "\2\5\1\63\3\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\2\5\1\64\3\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\1\65\2\5\1\66\1\5\1\67\1\5\1\70\1\5"+
    "\1\71\5\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\72\1\73\1\0\2\5\1\74\14\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\75\1\76\1\5\1\77\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\17\5"+
    "\3\0\2\5\1\100\2\5\13\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\101\3\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\3\5"+
    "\1\102\5\5\1\103\5\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\104\3\5\1\0\10\5"+
    "\1\105\2\5\1\106\3\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\3\5\1\107\2\5\1\0\7\5"+
    "\1\110\7\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\111\1\112\1\5\1\113\1\0\2\5"+
    "\1\114\10\5\1\115\3\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\116\3\5\1\0\2\5"+
    "\1\117\14\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\120\1\0\2\5\1\121\10\5\1\122"+
    "\3\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\3\5\1\123\5\5\1\124\3\5\1\125"+
    "\1\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\126\1\0\1\5\1\127\4\5\1\130\1\5"+
    "\1\131\2\5\1\132\1\5\1\133\1\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\2\5\1\134\1\135"+
    "\2\5\1\0\7\5\1\136\1\137\2\5\1\140\3\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\3\5"+
    "\1\141\2\5\1\0\1\142\2\5\1\143\13\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\144"+
    "\1\145\1\0\1\5\1\146\1\147\10\5\1\150\3\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\151\1\152\2\5\1\0\17\5\3\0\5\5\14\0"+
    "\1\56\3\0\1\56\30\0\1\56\23\0\1\153\10\0"+
    "\6\153\1\0\16\153\4\0\5\153\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\13\5\1\154\3\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\5\1\155"+
    "\4\5\1\0\17\5\3\0\5\5\65\0\1\156\1\157"+
    "\61\0\1\160\2\0\1\51\2\0\40\51\1\0\14\51"+
    "\45\0\1\53\36\0\1\161\1\162\5\0\1\163\37\0"+
    "\1\164\2\165\1\0\1\164\30\0\1\164\24\0\1\56"+
    "\3\0\1\56\10\0\1\55\17\0\1\56\23\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\166\2\5\1\167\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\11\5\1\170\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\171\1\0\13\5"+
    "\1\172\3\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\3\5\1\173\2\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\2\5\1\174\1\175"+
    "\2\5\1\0\3\5\1\176\3\5\1\177\1\200\6\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\1\201\10\5\1\202\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\4\5\1\203"+
    "\12\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\1\5\1\204\3\5\1\205\11\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\5\5\1\206\11\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\207\1\5\1\0\7\5\1\210"+
    "\7\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\1\211\5\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\3\5\1\212\2\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\213\3\5\1\0\11\5\1\214\1\215\4\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\4\5\1\216\12\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\14\5\1\217\2\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\10\5\1\220\6\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\6\5\1\221\10\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\222\5\5"+
    "\1\0\2\5\1\223\14\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\7\5\1\224\7\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\4\5"+
    "\1\225\1\5\1\0\3\5\1\226\1\5\1\227\3\5"+
    "\1\230\5\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\231\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\6\5"+
    "\1\232\1\233\7\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\234\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\13\5\1\235\3\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\13\5\1\236\3\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\237"+
    "\1\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\13\5\1\240\3\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\241\5\5"+
    "\1\0\7\5\1\242\1\5\1\243\1\244\4\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\11\5\1\245\5\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\10\5\1\246\6\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\247"+
    "\1\5\1\0\17\5\3\0\2\5\1\250\2\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\3\5\1\251"+
    "\13\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\12\5\1\252\4\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\17\5\3\0"+
    "\4\5\1\253\13\0\2\5\2\0\2\5\3\0\1\254"+
    "\5\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\2\5\1\255\14\5\3\0"+
    "\4\5\1\256\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\257\1\0\2\5\1\260\14\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\5\5\1\261"+
    "\11\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\4\5\1\262\1\5\1\0\7\5\1\263\1\5\1\264"+
    "\5\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\11\5\1\265\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\266\3\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\6\5\1\267\10\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\6\5\1\270"+
    "\10\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\2\5\1\271\3\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\7\5\1\272"+
    "\7\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\13\5\1\273\3\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\13\5\1\274"+
    "\3\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\7\5\1\275\7\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\276\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\5\5\1\277\11\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\300\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\301\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\3\5\1\302\2\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\4\5\1\303\1\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\304\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\13\5"+
    "\1\305\3\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\3\5\1\306\2\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\2\5"+
    "\1\307\14\5\3\0\5\5\13\0\2\153\2\0\2\153"+
    "\3\0\6\153\1\0\17\153\3\0\5\153\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\2\5\1\310\14\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\311\1\0\17\5\3\0\5\5\14\0\1\164\3\0"+
    "\1\164\30\0\1\164\23\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\312\2\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\1\313\5\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\1\314"+
    "\3\5\2\315\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\316\3\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\11\5\1\317\5\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\3\5\1\320\2\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\7\5\1\321\7\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\3\5\1\322\2\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\11\5\1\323\5\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\7\5\1\324\1\325"+
    "\6\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\3\5\1\326\13\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\2\5\1\327"+
    "\14\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\4\5\1\330\12\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\331\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\332\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\7\5\1\333\7\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\334"+
    "\1\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\5\5\1\335\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\1\5\1\252\4\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\7\5\1\336\7\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\337\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\15\5\1\340\1\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\341\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\11\5\1\342\5\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\10\5\1\343\6\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\344\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\5\5\1\345\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\346\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\347\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\10\5\1\350\6\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\351\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\7\5\1\352\7\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\353"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\10\5\1\354\6\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\14\5\1\254"+
    "\2\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\355\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\15\5\1\356\1\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\1\357\2\0"+
    "\6\5\1\0\2\5\1\360\14\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\361\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\1\362"+
    "\5\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\2\5\1\363\3\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\364"+
    "\1\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\14\5\1\365\2\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\366\5\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\367\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\370\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\2\5\1\371\3\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\13\5\1\372"+
    "\3\5\3\0\3\5\1\373\1\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\3\5\1\374\13\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\3\5\1\375"+
    "\2\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\3\5\1\376\13\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\2\5\1\377"+
    "\3\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\5\5\1\u0100\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\11\5"+
    "\1\u0101\5\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\u0102\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\7\5"+
    "\1\u0103\7\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\u0104\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\4\5\1\u0105\1\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\11\5\1\u0106\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\6\5\1\u0107"+
    "\10\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\2\5\1\u0108\3\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\7\5\1\u0109"+
    "\7\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u010a\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u010b\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\3\5\1\u010c"+
    "\2\5\1\0\17\5\3\0\5\5\24\0\1\u010d\50\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\u010e\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\17\5\3\0\1\5\1\u010f\3\5\13\0\2\5"+
    "\2\0\2\5\1\u0110\2\0\6\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\7\5\1\u0111\7\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\u0112\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\6\5\1\u0113\10\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\3\5\1\u0114\13\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\3\5\1\u0115"+
    "\2\5\1\0\3\5\1\315\13\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\1\u0116\2\0\2\5\1\u0117\3\5"+
    "\1\u0118\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\17\5\3\0\4\5\1\u0119\13\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\u011a\3\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\4\5\1\u011b\1\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\11\5\1\u011c"+
    "\5\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u011d\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u011e\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\5\5\1\u011f"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\u0120\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\2\5\1\u0121\3\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\6\5\1\u0122\10\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\4\5\1\u0123\1\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\3\5\1\u0124\13\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\3\5\1\u0125\2\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\u0126\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\u0127\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u0128\2\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\u0129\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\13\5\1\u012a\3\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\15\5\1\u012b\1\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\4\5"+
    "\1\u012c\1\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u012d\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\3\5\1\u012e"+
    "\2\5\1\0\4\5\1\u012f\12\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\u011c\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\17\5\3\0\2\5\1\u0130\2\5\13\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\u0131\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u0132\2\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\u0133\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\2\5\1\u0134\14\5\3\0\5\5\36\0"+
    "\1\u0135\36\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\15\5\1\u0136\1\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\u0137\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\u0138\17\5\3\0"+
    "\5\5\20\0\1\u0139\30\0\1\u0139\23\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\6\5\1\u013a\10\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\4\5\1\u013b"+
    "\1\5\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\10\5\1\u013c\6\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\2\5\1\u013d\14\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\7\5\1\u013e\7\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\5\1\u013f"+
    "\4\5\1\0\17\5\3\0\5\5\10\0\1\u0140\2\u0141"+
    "\2\5\2\0\2\5\3\0\6\5\1\u0141\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\7\5\1\315\7\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\3\5\1\u0142\13\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\10\5\1\u0143\6\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\13\5\1\u0144\3\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\4\5\1\u0145\12\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\u0146\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\u0147\5\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\2\5\1\u0148\14\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\u0149\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\7\5\1\u014a\7\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\2\5\1\u014b"+
    "\14\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u014c\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\4\5\1\u014d\1\5\1\0\17\5"+
    "\3\0\5\5\10\0\1\u0140\2\u0141\2\5\2\0\2\5"+
    "\3\0\4\5\1\u014e\1\5\1\u0141\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\2\5"+
    "\1\u014f\14\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\3\5\1\u0150\2\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\7\5"+
    "\1\u0151\7\5\3\0\5\5\46\0\1\u0152\26\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u0153\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\5\5\1\u0154"+
    "\1\0\17\5\3\0\5\5\51\0\1\u0155\23\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u0156\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\2\5\1\u0157\14\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\2\5\1\u0158\3\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\5\5\1\u0159"+
    "\1\0\17\5\3\0\5\5\20\0\1\u015a\30\0\1\u015a"+
    "\23\0\2\5\2\0\2\5\3\0\1\u015b\5\5\1\0"+
    "\17\5\3\0\5\5\33\0\1\u015c\41\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\5\5\1\u015d\11\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\5\5\1\u015e"+
    "\1\0\17\5\3\0\5\5\10\0\1\u015f\2\u0160\2\5"+
    "\2\0\2\5\3\0\6\5\1\u0160\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\3\5"+
    "\1\u0161\13\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\11\5\1\u0162\5\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\11\5"+
    "\1\u0163\5\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\3\5\1\u0164\2\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\4\5\1\u0165\1\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\3\5\1\u0166\13\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\4\5"+
    "\1\u0167\12\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\2\5\1\u0168\14\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\u0169\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u016a\2\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\4\5\1\u016b\1\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\11\5\1\u016c\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\11\5\1\u016d"+
    "\5\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\11\5\1\u016e\5\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\5\5\1\u016f\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\4\5"+
    "\1\u0170\1\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\4\5\1\u0171\1\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\u0172\3\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\2\5\1\u0173\14\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\12\5\1\315\4\5\3\0\5\5\43\0\1\u0174"+
    "\31\0\2\5\2\0\2\5\3\0\6\5\1\u0175\17\5"+
    "\3\0\5\5\52\0\1\u0176\37\0\1\u0177\45\0\1\u0139"+
    "\3\0\1\u0139\1\0\1\u0178\1\u0179\25\0\1\u0139\23\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\u017a\3\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u017b\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\7\5\1\u017c\7\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\3\5\1\u017d\13\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u017e\1\0\17\5\3\0"+
    "\5\5\11\0\1\u0141\34\0\1\u017f\6\0\1\u0180\52\0"+
    "\1\u017f\6\0\1\u0180\17\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u0181\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\17\5\3\0\1\5"+
    "\1\u0182\3\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\u0183\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\u0184\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\13\5\1\u0185\3\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\6\5\1\u0186\10\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\2\5\1\u0187\14\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\2\5\1\u0188\3\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\1\u0189\2\0\6\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\u018a\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\4\5\1\u018b"+
    "\12\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\u018c\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\2\5\1\u018d\3\5\1\0\17\5\3\0"+
    "\5\5\41\0\1\u018e\33\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u018f\1\0\17\5\3\0\5\5\22\0\1\u0190"+
    "\52\0\2\5\2\0\2\5\3\0\2\5\1\u0191\3\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\u0192\3\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\3\5\1\u0193\2\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\u0194\17\5\3\0\5\5\14\0\1\u015a"+
    "\3\0\1\u015a\1\0\1\u0195\26\0\1\u015a\23\0\2\5"+
    "\2\0\2\5\3\0\4\5\1\u0196\1\5\1\0\17\5"+
    "\3\0\5\5\26\0\1\u0197\46\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\u0198\1\0\17\5\3\0\5\5\11\0"+
    "\1\u0160\43\0\1\u0180\61\0\1\u0180\17\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\u0199\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\1\u0165\5\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\15\5\1\u019a\1\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\2\5\1\u019b\3\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\315\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\1\u019c\5\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\3\5\1\u019d\13\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\u019e\3\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\5\5"+
    "\1\u019f\1\0\17\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\3\5\1\u01a0\2\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\1\5\1\u01a1\15\5\3\0\5\5\13\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\u01a2\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\7\5\1\u01a3"+
    "\7\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\1\u01a4\5\5\1\0\17\5\3\0\5\5\42\0\1\u01a5"+
    "\66\0\1\u01a6\26\0\1\u01a7\3\0\1\u01a7\30\0\1\u01a7"+
    "\36\0\1\u01a8\53\0\1\u01a9\30\0\1\u01a9\23\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\7\5\1\u01a4\7\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\u01aa\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\u01ab\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\1\u01ac\5\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\15\5\1\u01ad\1\5\3\0\5\5\43\0"+
    "\1\u01ae\64\0\1\u01af\26\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\3\5\1\u01b0\13\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\3\5\1\u01b1"+
    "\13\5\3\0\5\5\13\0\2\5\2\0\1\u01b2\1\5"+
    "\3\0\6\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\3\5\1\u01b3\13\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\7\5\1\u01b4\7\5\3\0\5\5\20\0\1\u01b5"+
    "\30\0\1\u01b5\23\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\17\5\3\0\2\5\1\u01b6\2\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\3\5\1\u01b7\13\5"+
    "\3\0\5\5\47\0\1\u01b8\25\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\15\5\1\u01b9\1\5\3\0\5\5"+
    "\41\0\1\u01ba\33\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\3\5\1\u01bb\13\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\3\5\1\u01bc\13\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\7\5\1\u01bd\7\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\1\5\1\u01be\15\5"+
    "\3\0\5\5\24\0\1\u01bf\50\0\2\5\2\0\2\5"+
    "\3\0\5\5\1\u01c0\1\0\17\5\3\0\5\5\27\0"+
    "\1\u01c1\45\0\2\5\2\0\1\u01c2\1\5\3\0\6\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\13\5\1\u01c3\3\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\2\5"+
    "\1\u01c4\14\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\u01c5\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\1\u01c6\5\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u01c7\2\5\1\0\17\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\1\u01c8\5\5\1\0\17\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\15\5\1\u01c9\1\5\3\0\5\5\35\0\1\u01ca"+
    "\34\0\1\u01cb\2\u01cc\2\5\2\0\2\5\3\0\6\5"+
    "\1\u01cc\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\1\357\2\0\6\5\1\0\17\5\3\0\5\5\42\0"+
    "\1\u01cd\53\0\1\u01ce\41\0\1\u01cf\3\0\1\u01cf\30\0"+
    "\1\u01cf\57\0\1\u01d0\26\0\1\u01a9\3\0\1\u01a9\1\0"+
    "\1\u0178\26\0\1\u01a9\55\0\1\u01d1\27\0\2\5\2\0"+
    "\2\5\3\0\4\5\1\u01d2\1\5\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\3\5\1\u01d3"+
    "\2\5\1\0\17\5\3\0\5\5\30\0\1\u01d4\66\0"+
    "\1\u01d5\37\0\2\5\2\0\1\u01d6\1\5\3\0\6\5"+
    "\1\0\17\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\10\5\1\u01d7\6\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\4\5\1\u01a0\1\5"+
    "\1\0\17\5\3\0\5\5\14\0\1\u01b5\3\0\1\u01b5"+
    "\1\0\1\u01d8\26\0\1\u01b5\23\0\2\5\2\0\2\5"+
    "\3\0\4\5\1\u01d9\1\5\1\0\17\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\u01da\17\5"+
    "\3\0\5\5\34\0\1\u01db\40\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\11\5\1\u01dc\5\5\3\0\5\5"+
    "\35\0\1\u01dd\37\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\u01de\17\5\3\0\5\5\43\0\1\u01df\31\0\2\5"+
    "\2\0\2\5\3\0\3\5\1\u01e0\2\5\1\0\17\5"+
    "\3\0\5\5\34\0\1\u01e1\40\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\10\5\1\u01e2\6\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\6\5\1\0\3\5"+
    "\1\u01e3\13\5\3\0\5\5\13\0\2\5\2\0\2\5"+
    "\3\0\6\5\1\0\3\5\1\u01e4\13\5\3\0\5\5"+
    "\13\0\2\5\2\0\2\5\3\0\5\5\1\u01e5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\1\5\1\315\15\5\3\0\5\5\13\0"+
    "\2\5\2\0\2\5\3\0\4\5\1\u01e6\1\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u01e7\1\0\17\5\3\0\5\5\36\0\1\u01e8"+
    "\34\0\1\u01cc\12\0\1\u01e9\2\0\1\u01ea\5\0\1\u01eb"+
    "\4\0\1\u01ec\1\u01ed\1\0\1\u01ee\7\0\1\u0180\30\0"+
    "\1\u01e9\2\0\1\u01ea\5\0\1\u01eb\4\0\1\u01ec\1\u01ed"+
    "\1\0\1\u01ee\7\0\1\u0180\20\0\1\u01ef\3\0\1\u01ef"+
    "\30\0\1\u01ef\52\0\1\u01f0\46\0\1\u01f1\45\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u01f2\1\0\17\5\3\0"+
    "\5\5\31\0\1\u01f3\66\0\1\u01f4\36\0\2\5\2\0"+
    "\2\5\3\0\6\5\1\0\10\5\1\u01f5\6\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\11\5\1\u01f6\5\5\3\0\5\5\61\0\1\u01f7\30\0"+
    "\1\u01cd\112\0\1\u01f8\27\0\1\u01f9\45\0\2\5\2\0"+
    "\2\5\1\u0116\2\0\6\5\1\u0118\17\5\3\0\5\5"+
    "\35\0\1\u01fa\37\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\11\5\1\u01fb\5\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\5\5\1\u01fc\11\5"+
    "\3\0\5\5\13\0\2\5\2\0\2\5\3\0\4\5"+
    "\1\u01fd\1\5\1\0\17\5\3\0\5\5\13\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\11\5\1\u01fe\5\5"+
    "\3\0\5\5\30\0\1\u01ff\60\0\1\u0200\67\0\1\u0201"+
    "\62\0\1\u0202\54\0\1\u0203\66\0\1\u0204\66\0\1\u0205"+
    "\32\0\1\u0206\3\0\1\u0206\30\0\1\u0206\41\0\1\u0207"+
    "\76\0\1\u0208\26\0\2\5\2\0\2\5\3\0\1\u0209"+
    "\5\5\1\0\17\5\3\0\5\5\27\0\1\u020a\45\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\11\5\1\u020b"+
    "\5\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\5\5\1\u020c\1\0\17\5\3\0\5\5\31\0\1\u020d"+
    "\61\0\1\u020e\57\0\1\u020f\70\0\1\u0210\36\0\2\5"+
    "\2\0\2\5\3\0\5\5\1\u0211\1\0\17\5\3\0"+
    "\5\5\13\0\2\5\2\0\2\5\3\0\6\5\1\0"+
    "\2\5\1\u0212\14\5\3\0\5\5\46\0\1\u0213\61\0"+
    "\1\u0214\52\0\1\u0215\60\0\1\u01d4\70\0\1\u0216\51\0"+
    "\1\u0217\66\0\1\u0218\35\0\1\u0219\104\0\1\u021a\33\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\2\5\1\u021b"+
    "\14\5\3\0\5\5\10\0\1\u015f\2\u0160\17\0\1\u0160"+
    "\42\0\2\5\2\0\2\5\3\0\5\5\1\u021c\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u021d\2\5\1\0\17\5\3\0\5\5\34\0"+
    "\1\u021e\61\0\1\u021f\56\0\1\u0220\67\0\1\u0221\35\0"+
    "\2\5\2\0\2\5\3\0\3\5\1\u0222\2\5\1\0"+
    "\17\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\3\5\1\u0223\13\5\3\0\5\5\44\0"+
    "\1\u0224\42\0\1\u0216\64\0\1\u0225\77\0\1\u0226\55\0"+
    "\1\u0225\33\0\1\u0227\3\0\1\u0227\30\0\1\u0227\23\0"+
    "\2\5\2\0\2\5\3\0\6\5\1\0\11\5\1\u0228"+
    "\5\5\3\0\5\5\13\0\2\5\2\0\2\5\3\0"+
    "\3\5\1\u0229\2\5\1\0\17\5\3\0\5\5\36\0"+
    "\1\u022a\44\0\1\u0116\53\0\2\5\2\0\2\5\3\0"+
    "\6\5\1\0\4\5\1\u022b\12\5\3\0\5\5\44\0"+
    "\1\u020a\25\0\1\u0140\2\u0141\17\0\1\u0141\65\0\1\u020a"+
    "\37\0\1\u022c\3\0\1\u022c\30\0\1\u022c\23\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\2\5\1\u022d\14\5"+
    "\3\0\5\5\30\0\1\u022e\47\0\1\u022f\56\0\2\5"+
    "\2\0\2\5\3\0\6\5\1\0\13\5\1\u0230\3\5"+
    "\3\0\5\5\32\0\1\u0231\43\0\1\u0232\3\0\1\u0232"+
    "\30\0\1\u0232\23\0\2\5\2\0\2\5\3\0\6\5"+
    "\1\0\3\5\1\333\13\5\3\0\5\5\46\0\1\u0233"+
    "\27\0\1\u0234\3\0\1\u0234\30\0\1\u0234\55\0\1\u0235"+
    "\66\0\1\u0236\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\2\1\5\11\23\1\1\11\1\1"+
    "\1\0\2\1\2\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\0\100\1\6\11\1\1\1\0\113\1\1\0\51\1"+
    "\1\0\3\1\1\0\35\1\1\0\2\1\1\0\5\1"+
    "\1\0\1\1\1\0\34\1\1\0\1\1\3\0\6\1"+
    "\2\0\20\1\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\2\0\23\1\4\0\1\11\1\0\5\1"+
    "\2\0\10\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\3\1\1\0\1\11\1\1\1\0\12\1\1\0"+
    "\2\1\6\0\3\1\2\0\5\1\1\0\2\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\10\1\3\0"+
    "\2\11\3\0\2\1\2\0\2\1\1\11\1\1\1\0"+
    "\1\11\1\1\3\0\1\1\1\0\6\1\12\0\1\1"+
    "\1\0\1\11\2\1\4\0\4\1\10\0\1\11\1\0"+
    "\1\1\1\0\2\1\4\0\2\1\1\11\6\0\1\11"+
    "\3\1\2\11\1\0\3\1\4\0\2\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	private Symbol sym(int type) {
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	
	/* Detected SQL keywords which are not supported by Secondo raise this exception*/
	private void notCompError(String message) throws IOException {
		throw new NotSuppException(message);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScanCommand(java.io.Reader in) {
  	// TODO: code that goes to constructor
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ScanCommand(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup10.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return sym(ParsCommandSym.CREATE);
          }
        case 111: break;
        case 49: 
          { return sym(ParsCommandSym.REAL);
          }
        case 112: break;
        case 58: 
          { return sym(ParsCommandSym.FROM);
          }
        case 113: break;
        case 14: 
          { return sym(ParsCommandSym.GREATER);
          }
        case 114: break;
        case 84: 
          { return sym(ParsCommandSym.CASCADE);
          }
        case 115: break;
        case 35: 
          { return sym(ParsCommandSym.ANY);
          }
        case 116: break;
        case 24: 
          { return sym(ParsCommandSym.ON);
          }
        case 117: break;
        case 99: 
          { return sym(ParsCommandSym.REFERENCES);
          }
        case 118: break;
        case 18: 
          { string.append("'");
          }
        case 119: break;
        case 72: 
          { return sym(ParsCommandSym.BTREE);
          }
        case 120: break;
        case 66: 
          { return sym(ParsCommandSym.VALUE);
          }
        case 121: break;
        case 90: 
          { return sym(ParsCommandSym.RESTRICT);
          }
        case 122: break;
        case 19: 
          { string.append("\\");
          }
        case 123: break;
        case 65: 
          { return sym(ParsCommandSym.TABLE);
          }
        case 124: break;
        case 89: 
          { return sym(ParsCommandSym.PARTIAL);
          }
        case 125: break;
        case 5: 
          { return sym(ParsCommandSym.MINUS);
          }
        case 126: break;
        case 105: 
          { return sym(ParsCommandSym.PRIM_KEY);
          }
        case 127: break;
        case 17: 
          { yybegin(YYINITIAL); return sym(ParsCommandSym.A_STRING, string.toString());
          }
        case 128: break;
        case 15: 
          { return sym(ParsCommandSym.EQUAL);
          }
        case 129: break;
        case 92: 
          { return sym(ParsCommandSym.DISTINCT);
          }
        case 130: break;
        case 82: 
          { return sym(ParsCommandSym.SELECT);
          }
        case 131: break;
        case 95: 
          { return sym(ParsCommandSym.OVERLAPS);
          }
        case 132: break;
        case 33: 
          { return sym(ParsCommandSym.ANL, yytext());
          }
        case 133: break;
        case 45: 
          { return sym(ParsCommandSym.SUM);
          }
        case 134: break;
        case 3: 
          { return sym(ParsCommandSym.ENL, yytext());
          }
        case 135: break;
        case 28: 
          { return sym(ParsCommandSym.LESS_EQUAL);
          }
        case 136: break;
        case 77: 
          { return sym(ParsCommandSym.EXCEPT);
          }
        case 137: break;
        case 61: 
          { return sym(ParsCommandSym.CHECK);
          }
        case 138: break;
        case 63: 
          { return sym(ParsCommandSym.ALTER);
          }
        case 139: break;
        case 64: 
          { return sym(ParsCommandSym.RTREE);
          }
        case 140: break;
        case 86: 
          { return sym(ParsCommandSym.UNKNOWN);
          }
        case 141: break;
        case 73: 
          { return sym(ParsCommandSym.WHERE);
          }
        case 142: break;
        case 52: 
          { return sym(ParsCommandSym.DATE);
          }
        case 143: break;
        case 9: 
          { string.setLength(0); yybegin(STRING);
          }
        case 144: break;
        case 13: 
          { return sym(ParsCommandSym.LESS);
          }
        case 145: break;
        case 76: 
          { return sym(ParsCommandSym.HAVING);
          }
        case 146: break;
        case 88: 
          { return sym(ParsCommandSym.BETWEEN);
          }
        case 147: break;
        case 62: 
          { return sym(ParsCommandSym.COUNT);
          }
        case 148: break;
        case 26: 
          { return sym(ParsCommandSym.PAR_VAR_NAME, yytext());
          }
        case 149: break;
        case 85: 
          { return sym(ParsCommandSym.DEFAULT);
          }
        case 150: break;
        case 70: 
          { return sym(ParsCommandSym.USING);
          }
        case 151: break;
        case 25: 
          { return sym(ParsCommandSym.BY);
          }
        case 152: break;
        case 69: 
          { return sym(ParsCommandSym.UNION);
          }
        case 153: break;
        case 75: 
          { return sym(ParsCommandSym.COLUMN);
          }
        case 154: break;
        case 38: 
          { return sym(ParsCommandSym.ALL);
          }
        case 155: break;
        case 59: 
          { return sym(ParsCommandSym.FULL);
          }
        case 156: break;
        case 97: 
          { return sym(ParsCommandSym.INDEXTYPE);
          }
        case 157: break;
        case 8: 
          { return sym(ParsCommandSym.COMMA);
          }
        case 158: break;
        case 46: 
          { return sym(ParsCommandSym.STRING);
          }
        case 159: break;
        case 11: 
          { return sym(ParsCommandSym.ASTERISK);
          }
        case 160: break;
        case 37: 
          { return sym(ParsCommandSym.ADD);
          }
        case 161: break;
        case 79: 
          { return sym(ParsCommandSym.VALUES);
          }
        case 162: break;
        case 42: 
          { return sym(ParsCommandSym.MAX);
          }
        case 163: break;
        case 2: 
          { return sym(ParsCommandSym.ID, yytext().toLowerCase());
          }
        case 164: break;
        case 16: 
          { string.append(yytext());
          }
        case 165: break;
        case 104: 
          { return sym(ParsCommandSym.FOREIGN_KEY);
          }
        case 166: break;
        case 20: 
          { return sym(ParsCommandSym.AS);
          }
        case 167: break;
        case 87: 
          { return sym(ParsCommandSym.SPATIAL);
          }
        case 168: break;
        case 27: 
          { return sym(ParsCommandSym.NOT_EQUAL);
          }
        case 169: break;
        case 32: 
          { string.append("\n");
          }
        case 170: break;
        case 44: 
          { return sym(ParsCommandSym.SET);
          }
        case 171: break;
        case 54: 
          { return sym(ParsCommandSym.DESC);
          }
        case 172: break;
        case 91: 
          { return sym(ParsCommandSym.GROUP_BY);
          }
        case 173: break;
        case 81: 
          { return sym(ParsCommandSym.UPDATE);
          }
        case 174: break;
        case 102: 
          { return sym(ParsCommandSym.DELETE_FROM);
          }
        case 175: break;
        case 53: 
          { return sym(ParsCommandSym.DROP);
          }
        case 176: break;
        case 50: 
          { return sym(ParsCommandSym.TRUE);
          }
        case 177: break;
        case 68: 
          { return sym(ParsCommandSym.MATCH);
          }
        case 178: break;
        case 29: 
          { return sym(ParsCommandSym.GREATER_EQUAL);
          }
        case 179: break;
        case 110: 
          { return sym(ParsCommandSym.DATE_VALUE);
          }
        case 180: break;
        case 51: 
          { return sym(ParsCommandSym.NULL);
          }
        case 181: break;
        case 10: 
          { return sym(ParsCommandSym.DOT);
          }
        case 182: break;
        case 30: 
          { string.append("\r");
          }
        case 183: break;
        case 78: 
          { return sym(ParsCommandSym.EXISTS);
          }
        case 184: break;
        case 4: 
          { return sym(ParsCommandSym.PLUS);
          }
        case 185: break;
        case 7: 
          { return sym(ParsCommandSym.RPARENT);
          }
        case 186: break;
        case 40: 
          { return sym(ParsCommandSym.INT);
          }
        case 187: break;
        case 36: 
          { return sym(ParsCommandSym.AND);
          }
        case 188: break;
        case 107: 
          { return sym(ParsCommandSym.SESSION_USER);
          }
        case 189: break;
        case 12: 
          { return sym(ParsCommandSym.SOLIDUS);
          }
        case 190: break;
        case 31: 
          { string.append("\t");
          }
        case 191: break;
        case 22: 
          { return sym(ParsCommandSym.IS);
          }
        case 192: break;
        case 103: 
          { return sym(ParsCommandSym.SYSTEM_USER);
          }
        case 193: break;
        case 108: 
          { return sym(ParsCommandSym.CORRESPONDING);
          }
        case 194: break;
        case 80: 
          { return sym(ParsCommandSym.UNIQUE);
          }
        case 195: break;
        case 56: 
          { return sym(ParsCommandSym.USER);
          }
        case 196: break;
        case 41: 
          { return sym(ParsCommandSym.NOT);
          }
        case 197: break;
        case 106: 
          { return sym(ParsCommandSym.CURRENT_USER);
          }
        case 198: break;
        case 96: 
          { return sym(ParsCommandSym.INTERSECT);
          }
        case 199: break;
        case 48: 
          { return sym(ParsCommandSym.HASH);
          }
        case 200: break;
        case 55: 
          { return sym(ParsCommandSym.LIKE);
          }
        case 201: break;
        case 34: 
          { return sym(ParsCommandSym.AVG);
          }
        case 202: break;
        case 57: 
          { return sym(ParsCommandSym.SOME);
          }
        case 203: break;
        case 1: 
          { /* ignore */
          }
        case 204: break;
        case 39: 
          { return sym(ParsCommandSym.ASC);
          }
        case 205: break;
        case 98: 
          { return sym(ParsCommandSym.CONSTRAINT);
          }
        case 206: break;
        case 6: 
          { return sym(ParsCommandSym.LPARENT);
          }
        case 207: break;
        case 21: 
          { return sym(ParsCommandSym.IN);
          }
        case 208: break;
        case 47: 
          { notCompError(yytext());
          }
        case 209: break;
        case 67: 
          { return sym(ParsCommandSym.INDEX);
          }
        case 210: break;
        case 100: 
          { return sym(ParsCommandSym.DROP_TABLE);
          }
        case 211: break;
        case 109: 
          { return sym(ParsCommandSym.WHERE_CURRENT_OF);
          }
        case 212: break;
        case 23: 
          { return sym(ParsCommandSym.OR);
          }
        case 213: break;
        case 101: 
          { return sym(ParsCommandSym.INSERT_INTO);
          }
        case 214: break;
        case 71: 
          { return sym(ParsCommandSym.FALSE);
          }
        case 215: break;
        case 94: 
          { return sym(ParsCommandSym.ORDER_BY);
          }
        case 216: break;
        case 60: 
          { return sym(ParsCommandSym.JOIN_TYPE, yytext().toLowerCase());
          }
        case 217: break;
        case 93: 
          { return sym(ParsCommandSym.FULLTEXT);
          }
        case 218: break;
        case 83: 
          { return sym(ParsCommandSym.BOOL);
          }
        case 219: break;
        case 43: 
          { return sym(ParsCommandSym.MIN);
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup10.runtime.Symbol(SQL2Secondo.ParsCommandSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
