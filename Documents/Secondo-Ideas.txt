/*
----
This file is part of SECONDO.

Copyright (C) 2004, University in Hagen, Department of Computer Science,
Database Systems for New Applications.

SECONDO is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

SECONDO is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SECONDO; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
----

//paragraph [1]  Title:         [{\Large \bf \begin{center}] [\end{center}}]
//paragraph [2]  Center:        [{\begin{center}] [\end{center}}]
//paragraph [10] Footnote:      [{\footnote{] [}}]
//paragraph [44] table4columns: [\begin{quote}\begin{tabular}{llll}]    [\end{tabular}\end{quote}]

//characters    [20]    verbatim:   [\verb@]    [@]
//characters    [21]    formula:    [$]         [$]
//characters    [22]    capital:    [\textsc{]  [}]
//characters    [23]    teletype:   [\texttt{]  [}]

//[--------]    [\hline]
//[TOC]         [\tableofcontents]
//[p]           [\par]
//[@]           [\@]
//[LISTING-SH]  [\lstsetSH]

[1]  New Ideas for Secondo 


[2]        Database Systems for new Applications           [p] 
                  University of Hagen                      [p] 
	http://www.informatik.fernuni-hagen.de/secondo     [p]


Last Changes: 11/23/06, M. Spiekermann

[TOC]
""[20]

1 Introduction

This document contains open problems, missing features and proposals for future
improvements of Secondo. It should be used to keep results of discussions as a
small transcript in order to let others participate and contribute. 

2 Ideas for Testing (11/16/06)

In the future the query example given in the operator specification should be
based on objects from a special test database which contains some example data
for each Secondo type. Moreover, it should be possible to specify more than one
query with expected results. Thus the examples will be expanded into
little test specifications. Further, this will not be specified in the
C++-Source code any longer but in special files instead.

The file must be named as the algebra module but without the suffix "Algebra", e.g.

*/


Standard.examples, Relation.examples, FText.examples ...

/*
It contains entries of the following form: 

If the result type is a simple standard type like int, real, string, bool or text
or if it is a small list you may specify it directly.

*/

Operator : *                       # name or symbol of the operator
Number   : 1                       # number of the test case
Signature: (int real) -> real      # the used signature of the operator
Example  : query 5 * 1.4           # query expression 
Result   : 7.0                     # expected result 


Operator : cumulate
Number   : 1
Signature: ((array t) (map t t t)) -> (array t)
Example  : query intset_a10 cumulate[. + ..]
Result   : ((array int) (1 3 6 10 15 21 28 36 45 55))

/*

If the result is more complex it should be stored in a file which must be
stored below the directory Selftest. The files have unique names which are
composed by the operator name, the example number and the algebra name. If
the operator is a special sign like "<" or "#" you must specify an alias name
for it.

*/

Operator : < alias LOWER
Number   : 4
Signature: real x mreal -> mbool
Example  : query 1000.0 < distance(train1, mehringdamm)
Result   : file

/*

For the examble above the result will be expected in the file 

*/

  Selftest/result4_LOWER_TemporalLifted

/*

This is a more simplified form of ~TestRunner~ specifications. Make will
concatenate them to a complete list which can be read in by the ~TestRunner~ and
Secondo at startup. During algebra registration missing examples will be detected
and printed to the display. The Example with number 1 will be used as entry for
the list operators command, whereas the system table "SEC2OPERATORINFO" contains
all examples.

For testing quickly all operators, a new command called ~Selftest~ can be
invoked.  This will start the TestRunner in a special mode. For every algebra
the query examples will be tested on the specified databases which will be
automatically restored if it is not present. Hence overnight runs will
guarantee that all example queries work.

Objects referred in queries must be stored in the database "berlintest" which
is maintained in the secondo-data repository and must be copied to the bin
directory. 

2.1 Implementation 

  * make copies the examples into a new directoy "bin/examples". 

  * A new class ~ExampleReader~ which can read in an examples file and converts examples
    to an internal format will be implemented.

  * The new ~TestRunner~ option opens or restores "berlintest" and runs the
    examples. The name of the test database can be configured in
    "SecondoConfig.ini". 

  * The Secondo-Kernel needs was changed in order to complete the operator specifications
    with the example queries.
    

2.2 Future Improvements

Database berlintest should become a cvs-member of the bin directory. If it has
changed (md5sum) since the last run of the ~TestRunner~  it will be restored.


*/



