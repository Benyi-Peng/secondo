/*
----
This file is part of SECONDO.

Copyright (C) 2004, University in Hagen, Department of Computer Science,
Database Systems for New Applications.

SECONDO is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

SECONDO is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SECONDO; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
----

//paragraph [1]  Title:         [{\Large \bf \begin{center}] [\end{center}}]
//paragraph [2]  Center:        [{\begin{center}] [\end{center}}]
//paragraph [10] Footnote:      [{\footnote{] [}}]
//paragraph [44] table4columns: [\begin{quote}\begin{tabular}{llll}]    [\end{tabular}\end{quote}]

//characters    [20]    verbatim:   [\verb@]    [@]
//characters    [21]    formula:    [$]         [$]
//characters    [22]    capital:    [\textsc{]  [}]
//characters    [23]    teletype:   [\texttt{]  [}]

//[--------]    [\hline]
//[TOC]         [\tableofcontents]
//[p]           [\par]
//[@]           [\@]
//[LISTING-SH]  [\lstsetSH]

[1]  New Ideas for Secondo 


[2]        Database Systems for new Applications           [p] 
                  University of Hagen                      [p] 
	http://www.informatik.fernuni-hagen.de/secondo     [p]


Last Changes: 11/23/06, M. Spiekermann

[TOC]
""[20]

1 Introduction

This document contains open problems, missing features and proposals for future
improvements of Secondo. It should be used to keep results of discussions as a
small transcript in order to let others participate and contribute. 

2 Ideas for Testing (11/16/06)

In the future the query example given in the operator specification should be
based on objects from a special test database which contains some example data
for each Secondo type. Moreover, it should be possible to specify more than one
query with expected results. Thus the examples will be expanded into
little test specifications. Further, this will not be specified in the
C++-Source code any longer but in special files instead.

The file must be named as the algebra module but without the suffix "Algebra", e.g.

*/


Standard.examples, Relation.examples, FText.examples ...

/*
It contains entries of the following form: 

*/

Operator  : isempty                 # name or symbol of the operator
Number    : 1                       # number of the test case
Signature : mpoint -> bool          # the used signature of the operator
Example   : query isempty(train5)   # query expression 
Result    : file                    # the expected result list is stored 
                                    # a file called TestResults/isempty_1.nl 
or

Result  : FALSE                     # Result specified inline as list


/*

This is a more simplified form of ~TestRunner~ specifications. Make will
concatenate them to a complete list which can be read in by the ~TestRunner~ and
Secondo at startup. During algebra registration missing examples will be detected
and printed to the display. The Example with number 1 will be used as entry for
the list operators command, whereas the system table "SEC2OPERATORINFO" contains
all examples.

For testing quickly all operators, the ~TestRunner~ can be invoked with the
parameter "-checkall". In this case it will open the database "berlintest" and
run test cases for all query examples.  Hence overnight runs will guarantee
that all example queries work.

Objects referred in queries must be stored in the database "berlintest" which will
become a cvs-member in the bin directory. If it has changed since the last run
of the ~TestRunner~ or is not present in the list of databases it will be restored.


2.1 Implementation 

  * Make copies the examples into a new directoy "bin/examples". 

  * A new class ~ExampleReader~ which can read in an examples file and converts examples
    to an internal format will be implemented.

  * The new ~TestRunner~ option opens or restores "berlintest" and runs the
    examples. The name of the test database can be configured in
    "SecondoConfig.ini". 

  * The Secondo-Kernel needs to be changed in order to complete the operator specifications
    with the example queries.
    

*/



