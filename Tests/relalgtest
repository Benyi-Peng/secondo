# a test for the relational algebra
# run with : TestRunner -c MyConfig.config <relalgtest
# (TestRunner can be found in directory UserInterfaces)

# clean up what may be left over from e.g. a segfault
delete database relalgtest;

#setup
create database relalgtest;
open database relalgtest;
e

(create tenTest : (rel(tuple((no int)))));
(update tenTest := ((rel(tuple((no int))))((1)(2)(3)(4)(5)(6)(7)(8)(9)(10))));

(create twentyTest : (rel(tuple((no int)))));
(update twentyTest := ((rel(tuple((no int))))((1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20))));

(create evenTest : (rel(tuple((no int)))));
(update evenTest := ((rel(tuple((no int))))((2)(4)(6)(8)(10)(12)(14)(16)(18)(20))));

(create oddTest : (rel(tuple((no int)))));
(update oddTest := ((rel(tuple((no int))))((1)(3)(5)(7)(9)(11)(13)(15)(17)(19))));

(create duplicatesTest : (rel(tuple((no int)))));
(update duplicatesTest := ((rel(tuple((no int))))((1)(1)(1)(6)(6)(7)(9)(9)(9)(9))));

(create realTest : (rel(tuple((no real)))));
(update realTest := ((rel(tuple((no real))))((1.0)(3.0)(-6.0)(7.0)(9.0)(0.875)(-9.875)(-23.625))));

(create EmployeeTest :
	(rel
                (tuple
                    (
                        (EName string)
                        (EmpNr int)
                        (DeptNr int)))));

(update EmployeeTest :=
	((rel
                (tuple
                    (
                        (EName string)
                        (EmpNr int)
                        (DeptNr int))))
		(
                ("Smith" 12 3)
                ("Myers" 13 2)
                ("Bush" 11 1)
                ("Jones" 14 2)
                ("Smith" 16 1)
                ("Langdon" 9 3)
                ("Lambert" 4 3)
                ("Callahan" 1 2)
                ("Myers" 17 2)
                ("Simpson" 8 3))));

(create DeptTest : (rel
                (tuple
                    (
                        (Leader string)
                        (DeptNr int)))));

(update DeptTest := ((rel
                (tuple
                    (
                        (Leader string)
                        (DeptNr int))))
            (
                ("Smith" 3)
                ("Myers" 2)
                ("Bush" 1))));


(create StaedteTest : (rel
                    (tuple
                      (
                        (SName string)
                        (Bev int)
                        (PLZ int)
                        (Vorwahl string)
                        (Kennzeichen string)))));



(update StaedteTest := ((rel
                (tuple
                    (
                        (SName string)
                        (Bev int)
                        (PLZ int)
                        (Vorwahl string)
                        (Kennzeichen string))))
            (
                ("Aachen" 239000 5100 "0241" "AC")
                ("Berlin" 1859000 1000 "030" "B")
                ("Bielefeld" 300000 4800 "0521" "BI")
                ("Bochum" 382000 4630 "0234" "BO")
                ("Bonn" 291000 5300 "0228" "BN")
                ("Braunschweig" 248000 3300 "0531" "BS")
                ("Bremen" 526000 2800 "0421" "HB")
                ("Bremerhaven" 134000 2850 "0471" "HB")
                ("Darmstadt" 134000 6100 "06151" "DA")
                ("Dortmund" 572000 4600 "0231" "DO")
                ("Duesseldorf" 562000 4000 "0211" "D")
                ("Duisburg" 518000 4100 "0203" "DU")
                ("Erlangen" 100000 8520 "09131" "ER")
                ("Essen" 620000 4300 "0201" "E")
                ("Frankfurt(Main)" 595000 6000 "069" "F")
                ("Freiburg" 184000 7800 "0761" "FR")
                ("Gelsenkirchen" 285000 4650 "0209" "GE")
                ("Goettingen" 133000 3400 "0551" "GOE")
                ("Hagen" 206000 5800 "02331" "HA")
                ("Hamburg" 1580000 2000 "040" "HH")
                ("Hamm" 166000 4700 "02381" "HAM")
                ("Hannover" 508000 3000 "0511" "H")
                ("Heidelberg" 135000 6900 "06221" "HD")
                ("Heilbronn" 111000 7100 "07131" "HN")
                ("Hildesheim" 101000 3200 "05121" "HI")
                ("Karlsruhe" 268000 7500 "0721" "KA")
                ("Kassel" 184000 3500 "0561" "KS")
                ("Kiel" 246000 2300 "0431" "KI")
                ("Koblenz" 111000 5400 "0261" "KO")
                ("Koeln" 916000 5000 "0221" "K")
                ("Krefeld" 217000 4150 "02151" "KR")
                ("Leverkusen" 155000 5090 "0214" "LEV")
                ("Ludwigshafen" 154000 6700 "0621" "LU")
                ("Luebeck" 210000 2400 "0451" "HL")
                ("Mainz" 189000 6500 "06131" "MZ")
                ("Mannheim" 295000 6800 "0621" "MA")
                ("Moenchengladbach" 254000 4050 "02161" "MG")
                ("Muehlheim(Ruhr)" 172000 4330 "0208" "MH")
                ("Muenchen" 1267000 8000 "089" "M")
                ("Muenster" 270000 4400 "0251" "MS")
                ("Nuernberg" 465000 8500 "0911" "N")
                ("Offenbach(Main)" 107000 6050 "069" "OF")
                ("Oldenburg" 138000 2900 "0441" "OL")
                ("Osnabrueck" 153000 4500 "0541" "OS")
                ("Paderborn" 110000 4790 "05251" "PB")
                ("Pforzheim" 104000 7530 "07231" "PF")
                ("Recklinghausen" 118000 4350 "02361" "RE")
                ("Regensburg" 124000 8400 "0941" "R")
                ("Remscheid" 121000 5630 "02191" "RS")
                ("Saarbruecken" 187000 6600 "0681" "SB")
                ("Salzgitter" 106000 3320 "05341" "SZ")
                ("Siegen" 107000 5900 "0271" "SI")
                ("Solingen" 158000 5650 "0212" "SG")
                ("Stuttgart" 562000 7000 "0711" "S")
                ("Wiesbaden" 267000 6200 "06121" "WI")
                ("Wolfsburg" 122000 3180 "05361" "WOB")
                ("Wuerzburg" 128000 8700 "0931" "WUE")
                ("Wuppertal" 377000 5600 "0202" "W"))));

#testcase FilterTest1
#yields (int 5)
query tenTest feed filter[.no > 5] consume count;

#testcase FilterTest2
#yields (int 0)
query tenTest feed head[0] filter[.no > 5] consume count;

#testcase FilterTest3
#yields error
query StaedteTest feed filter[.SName > 5] consume count;

#testcase AverageTest1
#yields (real 325017.25)
query StaedteTest feed avg[Bev];

#testcase AverageTest2
#yields (real -2.328125)
query realTest feed avg[no];

#testcase AverageTest3
#yields error
query StaedteTest feed avg[SName];

#testcase AverageTest4
#yields (real undef)
query realTest feed head[0] avg[no];

#testcase HeadTest1
#yields ((rel(tuple((no int))))((1)(2)(3)(4)(5)))
query tenTest feed head[5] consume;

#testcase HeadTest2
#yields ((rel(tuple((no int))))())
query tenTest feed head[0] consume;

#testcase ConcatTest1
#yields ((rel(tuple((no int))))((1)(2)(3)(1)(2)(3)))
query tenTest feed head[3] twentyTest feed head[3] concat consume;

#testcase ConcatTest2
#yields ((rel(tuple((no int))))((1)(2)(3)))
query tenTest feed head[0] twentyTest feed head[3] concat consume;

#testcase ExtendTest1
#yields ((rel(tuple((no int)(mod2 int))))((1 1)(2 0)(3 1)))
query tenTest feed extend[mod2 : .no mod 2] head[3] consume;

#testcase ExtendTest2
#yields ((rel(tuple((no int)(mod2 int))))())
query tenTest feed head[0] extend[mod2 : .no mod 2] head[3] consume;

#testcase ExtractTest1
#yields (int 239000)
query StaedteTest feed extract[Bev];

#testcase ExtractTest2
#yields (int undef)
query StaedteTest feed head[0] extract[Bev];

#testcase GroupByTest1
#yields ((rel (tuple ((DeptNr int) (anz int))))((1 2) (2 4) (3 4)))
query EmployeeTest feed sortby[DeptNr asc] groupby[DeptNr; anz : group feed count] consume;

#testcase GroupByTest2
#yields ((rel (tuple ((DeptNr int) (anz int))))((1 2) (2 4) (3 4)))
query EmployeeTest feed sortby[DeptNr asc] groupby[DeptNr; anz : group count] consume;

#testcase GroupByTest3
#yields ((rel (tuple ((DeptNr int) (anz int))))())
query EmployeeTest feed head[0] sortby[DeptNr asc] groupby[DeptNr; anz : group feed count] consume;

#testcase HashJoinTest1
#yields ((rel(tuple((EName string)(EmpNr int)(DeptNr int)\
    (Leader_A string)(DeptNr_A int))))\
    (("Bush" 11 1 "Bush" 1)("Callahan" 1 2 "Myers" 2)("Jones" 14 2 "Myers" 2)))
query EmployeeTest feed DeptTest feed rename[A] hashjoin[DeptNr, DeptNr_A, 17] sort head[3] consume;

#testcase HashJoinTest2
#yields ((rel(tuple((no int)(no_A int))))((1 1)(6 6)(7 7)(9 9)))
query duplicatesTest feed tenTest feed rename[A] hashjoin[no, no_A, 23] sort rdup consume

#testcase HashJoinTest3
#yields (int 0)
query EmployeeTest feed head[0] DeptTest feed rename[A] hashjoin[DeptNr, DeptNr_A, 17] count;

#testcase MergeJoinTest1
#yields ((rel(tuple((EName string)(EmpNr int)(DeptNr int)\
    (Leader_A string)(DeptNr_A int))))\
    (("Bush" 11 1 "Bush" 1)("Callahan" 1 2 "Myers" 2)("Jones" 14 2 "Myers" 2)))
query EmployeeTest feed DeptTest feed rename[A] sortmergejoin[DeptNr, DeptNr_A] sort head[3] consume;

#testcase MergeJoinTest2
#yields ((rel(tuple((no int)(no_A int))))((1 1)(6 6)(7 7)(9 9)))
query duplicatesTest feed tenTest feed rename[A] mergejoin[no, no_A] sort rdup consume

#testcase MergeJoinTest3
#yields (int 0)
query EmployeeTest feed head[0] DeptTest feed rename[A] sortmergejoin[DeptNr, DeptNr_A] count;

#testcase MaxTest1
#yields (string "Wuppertal")
query StaedteTest feed max[SName];

#testcase MaxTest2
#yields (string undef)
query StaedteTest feed head[0] max[SName];

#testcase MaxTest3
#yields (real 9.0)
query realTest feed max[no];

#testcase MinTest1
#yields (string "Aachen")
query StaedteTest feed min[SName];

#testcase MinTest2
#yields (real -23.625)
query realTest feed min[no];

#testcase SumTest1
#yields (int 18851000)
query StaedteTest feed sum[Bev];

#testcase SumTest2
#yields (real -18.625)
query realTest feed sum[no];

#testcase SumTest3
#yields (int undef)
query StaedteTest feed head[0] sum[Bev];

#testcase ProductTest1
#yields error
query tenTest feed twentyTest feed product count

#testcase ProductTest2
#yields (int 200)
query tenTest feed twentyTest feed rename[A] product count

#testcase ProductTest3
#yields (int 0)
query tenTest feed twentyTest feed head[0] rename[A] product count

#testcase SortTest1
#yields (int 200)
query tenTest feed twentyTest feed rename[A] product sort count

#testcase SortTest2
#yields (int 0)
query tenTest feed head[0] twentyTest feed rename[A] product sort count

#testcase RdupTest1
#yields (int 20)
query twentyTest feed tenTest feed concat sort rdup count

#testcase RdupTest2
#yields (int 0)
query twentyTest feed tenTest feed concat sort head[0] rdup count

#testcase ProjectTest1
#yields (int 20)
query tenTest feed twentyTest feed rename[A] product project[no_A] sort rdup count

#testcase ProjectTest2
#yields (int 0)
query tenTest feed head[0] twentyTest feed rename[A] product project[no_A] sort rdup count

#testcase DiffTest1
#yields (int 10)
query twentyTest feed oddTest feed mergediff count

#testcase DiffTest2
#yields (int 100)
query twentyTest feed oddTest feed rename[A] product sort tenTest feed oddTest feed rename[A] product sort mergediff count

#testcase DiffTest3
#yields (int 20)
query twentyTest feed oddTest feed head[0] mergediff count

#testcase DiffTest4
#yields (int 0)
query twentyTest feed head[0] oddTest feed mergediff count

#testcase SecTest1
#yields (int 10)
query twentyTest feed oddTest feed mergesec count

#testcase SecTest2
#yields (int 100)
query twentyTest feed oddTest feed rename[A] product sort tenTest feed oddTest feed rename[A] product sort mergesec count

#testcase SecTest3
#yields (int 0)
query twentyTest feed head[0] oddTest feed mergesec count

#testcase UnionTest1
#yields (int 20)
query twentyTest feed oddTest feed mergeunion count

#testcase UnionTest2
#yields (int 200)
query twentyTest feed oddTest feed rename[A] product sort tenTest feed oddTest feed rename[A] product sort mergeunion count

#testcase UnionTest3
#yields (int 10)
query twentyTest feed head[0] oddTest feed mergeunion count

#testcase SampleTest1
#yields error
query StaedteTest sample[a, 0.1] count

#testcase SampleTest2
#yields error
query 1 sample[10, 0.1] count

#testcase SampleTest3
#yields (int 58)
query StaedteTest sample[100, 0.01] count

#testcase SampleTest4
#yields (int 0)
query StaedteTest feed head[0] consume sample[100, 0.01] count

#testcase SampleTest5
#yields (int 58)
query StaedteTest sample[-2345, 200.0] count

#testcase SampleTest6
#yields (int 10)
query StaedteTest sample[10, 0.0] count

#testcase SampleTest7
#yields (int 58)
query StaedteTest sample[0, 1.0] count


#teardown
close database;
delete database relalgtest;
