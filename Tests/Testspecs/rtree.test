#This file is part of SECONDO.
#
#Copyright (C) 2004, University in Hagen, Department of Computer Science,
#Database Systems for New Applications.
#
#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# a test for the relational algebra
# run with : Runner -c MyConfig.config <relalgtest
# (Runner can be found in directory UserInterfaces)

#setup
restore database rtreetestb from '$(SECONDO_BUILD_DIR)/bin/berlintest';

#open database rtreetestb;

let strassen_geoData_1 = strassen creatertree[geoData];
let strassen_geoData_2 = strassen feed extend[id: tupleid(.)] creatertree[geoData];

let fluss_FVerlauf_1 = WStrassen creatertree[geoData];
let fluss_FVerlauf_2 = WStrassen feed extend[id: tupleid(.)] creatertree[geoData];

let kreis_Gebiet_1 = Flaechen creatertree[geoData];
let kreis_Gebiet_2 = Flaechen feed extend[id: tupleid(.)] creatertree[geoData];


#testcase test1
#yields (int 42)
query RBahn feed {a} loopjoin[fun(t:TUPLE) WStrassen feed filter[bbox(.geoData) intersects bbox(attr(t, geoData_a))]] count;

#testcase test2
#yields (int 42)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_1 WStrassen windowintersects[attr(t, geoData_a)]] count;

#testcase test3
#yields (int 42)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_2 WStrassen windowintersects[attr(t, geoData_a)]] count;

#testcase test4
#yields (int 42)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_1 windowintersectsS[attr(t, geoData_a)]] count;

#testcase test5
#yields (int 42)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_2 windowintersectsS[attr(t, geoData_a)]] count;

#testcase test6
#yields (int 17)
query RBahn feed {a} loopjoin[fun(t:TUPLE) WStrassen feed filter[.geoData intersects attr(t, geoData_a)]] count;

#testcase test7
#yields (int 17)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_1 WStrassen windowintersects[attr(t, geoData_a)]
  filter[.geoData intersects attr(t, geoData_a)]] count;

#testcase test8
#yields (int 17)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_2 WStrassen windowintersects[attr(t, geoData_a)]
  filter[.geoData intersects attr(t, geoData_a)]] count;

#testcase test9
#yields (int 17)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_1 windowintersectsS[attr(t, geoData_a)]
  WStrassen gettuples filter[.geoData intersects attr(t, geoData_a)]] count;

#testcase test10
#yields (int 17)
query RBahn feed {a} loopjoin[fun(t:TUPLE) fluss_FVerlauf_2 windowintersectsS[attr(t, geoData_a)]
  WStrassen gettuples filter[.geoData intersects attr(t, geoData_a)]] count;

#testcase test11
#yields (int 244)
query Flaechen feed {X} loopjoin[fun(t: TUPLE) Flaechen feed filter[bbox(.geoData) intersects bbox(attr(t, geoData_X))]] count;

#testcase test12
#yields (int 244)
query Flaechen feed {X} loopjoin[fun(t: TUPLE) kreis_Gebiet_1 Flaechen windowintersects[attr(t, geoData_X)]] count;

#testcase test13
#yields (int 244)
query Flaechen feed {X} loopjoin[fun(t: TUPLE) kreis_Gebiet_2 Flaechen windowintersects[attr(t, geoData_X)]] count;

#testcase test14
#yields (int 244)
query Flaechen feed {X} loopjoin[fun(t: TUPLE) kreis_Gebiet_1 windowintersectsS[attr(t, geoData_X)]] count;

#testcase test15
#yields (int 244)
query Flaechen feed {X} loopjoin[fun(t: TUPLE) kreis_Gebiet_2 windowintersectsS[attr(t, geoData_X)]] count;

#testcase test16
#yields (int 10)
query Flaechen feed {X} filter[.geoData_X intersects koepenick]
  loopjoin[fun(t: TUPLE) Flaechen feed filter[bbox(.geoData) intersects bbox(attr(t, geoData_X))]
  filter[.geoData intersects attr(t, geoData_X)]] count;

#testcase test17
#yields (int 10)
query Flaechen feed {X} filter[.geoData_X intersects koepenick]
  loopjoin[fun(t: TUPLE) kreis_Gebiet_1 Flaechen windowintersects[attr(t, geoData_X)]
  filter[.geoData intersects attr(t, geoData_X)]] count;

#testcase test18
#yields (int 10)
query Flaechen feed {X} filter[.geoData_X intersects koepenick]
  loopjoin[fun(t: TUPLE) kreis_Gebiet_2 Flaechen windowintersects[attr(t, geoData_X)]
  filter[.geoData intersects attr(t, geoData_X)]] count;

#testcase test19
#yields (int 10)
query Flaechen feed {X} filter[.geoData_X intersects koepenick]
  loopjoin[fun(t: TUPLE) kreis_Gebiet_1 windowintersectsS[attr(t, geoData_X)]
  Flaechen gettuples filter[.geoData intersects attr(t, geoData_X)]] count;

#testcase test20
#yields (int 10)
query Flaechen feed {X} filter[.geoData_X intersects koepenick]
  loopjoin[fun(t: TUPLE) kreis_Gebiet_2 windowintersectsS[attr(t, geoData_X)]
  Flaechen gettuples filter[.geoData intersects attr(t, geoData_X)]] count;

#teardown
delete strassen_geoData_1;
delete strassen_geoData_2;
delete fluss_FVerlauf_1;
delete fluss_FVerlauf_2;
delete kreis_Gebiet_1;
delete kreis_Gebiet_2;
close database;

