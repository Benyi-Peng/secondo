#This file is part of SECONDO.
#
#Copyright (C) 2004, University in Hagen, Department of Computer Science, 
#Database Systems for New Applications.
#
#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#########################################################################
# Testing the TemporalUnitAlgebra
#
# Here: testing operators on unit datatypes
#
# Written Sept 2006 by Chrstian Duentgen
#
# run with : TestRunner -c SecondoConfig.ini < temporalunit.test
#########################################################################


########################
# set up test database #
########################
# clean up what may be left over from e.g. a segfault
delete database tempunittest;

#setup
create database tempunittest;
open database tempunittest;

let up1 = [const upoint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (2000.0 2000.0 1000.0 1000.0))];
let up2 = [const upoint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (1000.0 1000.0 2000.0 2000.0))];
let up3 = [const upoint value undef];
let up4 = [const upoint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 0.0 1000.0))];
let up5 = [const upoint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 0.0 -1000.0))];
let up6 = [const upoint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (1500.0 1500.0 1500.0 1500.0))];
let up7 = [const upoint value (("2000-01-02-23:50" "2000-01-03-00:10" TRUE TRUE) (1000.0 1000.0 2000.0 2000.0))];
let up8 = [const upoint value (("2003-01-01-12:00" "2003-01-01-12:20" TRUE TRUE) (1000.0 1000.0 2000.0 2000.0))];
let up9 = [const upoint value (("2003-11-20-05:30" "2003-11-20-06:30" TRUE TRUE) (0.0 0.0 0.0 0.0))];


let mp1 = [const mpoint value ((("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (-100.0 -100.0 100.0 100.0)))];
let mp2 = [const mpoint value ((("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (100.0 100.0 -100.0 -100.0)))];

let p = [const point value (1500.0 1500.0)];
let p3 = [const point value undef];

let ui1 = [const uint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) 1500)];
let ui2 = [const uint value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) 1000)];
let ui3 = [const uint value undef];
let ui4 = [const uint value (("2003-11-20-06:30" "2003-11-20-07:30" TRUE FALSE) 1000)];

let ci = [const int value 1000];
let i1 = [const int value 100];
let i3 = [const int value undef];

let ur1 = [const ureal value (("2000-01-01-00:00:00.000" "2000-01-05-00:00:00.000" TRUE TRUE) (1.0 0.0 -1.0 FALSE))];
let ur2 = [const ureal value (("2000-01-02-23:59:59.900" "2000-01-03-00:00:00.100" TRUE TRUE) (-1.0 -1.0 -1.0 FALSE))];
let ur3 = [const ureal value undef];
let ur4 = [const ureal value (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (1.0 1.0 1.0 TRUE))];

let r = [const real value 0.0];
let rundef = [const real value undef];


let line1 = [const line value ((1500.0 1000.0 1500.0 2000.0))];
let line2 = [const line value ((1010 1010 1100 1100)(1100 1100 1200 1000)(1200 1000 1600 1000)(1600 1000 1600 2010)(1600 2010 1700 1100)(1700 1100 1800 1800)(1800 1800 2300 2300))];
let line3 = [const line value ()];
let line4 = [const line value ((1000 1000 2000 2000))];

(create ten : (rel(tuple((no int)))));
(update ten := ((rel(tuple((no int))))((1)(2)(3)(4)(5)(6)(7)(8)(9)(10))));

restore zug5 from '$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5';

let LinesRel = units(zug5) suse[fun(ZZ:STREAMELEM) trajectory(ZZ)] transformstream consume;

##################
#   makemvalue   #
##################

#testcase makemvalue EMPTY INPUT
#yields (mpoint ())
query units([const mpoint value ()]) transformstream makemvalue[elem]

#testcase makemvalue UNDEF in INPUT
#yields (mpoint ())
query sfeed([const upoint value undef]) transformstream makemvalue[elem]

#testcase makemvalue SORTED INPUT
#yields @$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5AsResult
query units(zug5) transformstream makemvalue[elem]

#testcase makemvalue SHUFFLED INPUT
#yields @$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5AsResult
query units(zug5) transformstream extend[no: randint(1000)] sortby[no asc] makemvalue[elem]

##################
# unit operators #
##################

#testcase deftime
#tolerance_real 0.001
#yields (periods (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)))
query deftime(up1)

#testcase deftime_undef
#tolerance_real 0.001
#yields (periods ( ) )
query deftime(up3)

#testcase atinstant up1
#tolerance_real 0.001
#yields (ipoint ("2003-11-20-06:30" (1500.0 1500.0))) 
query up1 atinstant [const instant value "2003-11-20-06:30"]

#testcase atinstant undef_upoint
#tolerance_real 0.001
#yields (ipoint undef) 
query up3 atinstant [const instant value "2003-11-20-06:30"]

#testcase atinstant upoint undef_instant
#tolerance_real 0.001
#yields (ipoint undef) 
query up1 atinstant [const instant value undef]

#testcase atperiods upoint
#tolerance_real 0.001
#yields ((rel (tuple ( (elem upoint)))) ( (   (   ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) (1916.666666666667 1916.666666666667 1833.333333333333 1833.333333333333))) (   (   ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE) (1166.666666666667 1166.666666666667 1083.333333333334 1083.333333333334))))) 
query (up1 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) 
("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ] ) transformstream consume

#testcase atperiods undef_upoint
#tolerance_real 0.001
#yields ((rel (tuple ( (elem upoint)))) ( )) 
query (up3 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ] ) transformstream consume


# as there are no undef-periods values, we use empt-periods here:
#testcase atperiods upoint undef_periods
#tolerance_real 0.001
#yields ((rel (tuple ( (elem upoint)))) ( )) 
query (up1 atperiods [const periods value ( ) ] ) transformstream consume

#testcase initial_up
#tolerance_real 0.001
#yields (ipoint ("2003-11-20-06:00" (2000.0 2000.0)))
query initial(up1)

#testcase initial_up undef
#tolerance_real 0.001
#yields (ipoint undef)
query initial(up3)

#testcase final_up
#tolerance_real 0.001
#yields (ipoint ("2003-11-20-07:00" (1000.0 1000.0)))
query final(up1)

#testcase final_up undef
#tolerance_real 0.001
#yields (ipoint undef)
query final(up3)

#testcase present_I
#tolerance_real 0.001
#yields (bool TRUE)
query (up1 present [const instant value "2003-11-20-06:33"])

#testcase present_I instant-undef
#tolerance_real 0.001
#yields (bool undef)
query (up1 present [const instant value undef])

#testcase present_I upoint-undef
#tolerance_real 0.001
#yields (bool undef)
query (up3 present [const instant value "2003-11-20-06:33"])

#testcase present_P
#tolerance_real 0.001
#yields (bool TRUE)
query (up1 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ])

#testcase at_up_p1
#tolerance_real 0.001
#yields (upoint ( ("2003-11-20-06:30" "2003-11-20-06:30" TRUE TRUE) (1500.0 1500.0 1500.0 1500.0)))
query (up2 at p) 

#testcase at_up_p2
#tolerance_real 0.001
#yields (upoint ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (1500.0 1500.0 1500.0 1500.0)))
query (up6 at p)

#testcase at_undef-upoint_p1
#tolerance_real 0.001
#yields (upoint undef)
query (up3 at p) 

#testcase at_up_undef-point
#tolerance_real 0.001
#yields (upoint undef)
query (up2 at p3) 

#testcase passes TRUE
#yields (bool TRUE)
query ( up2 passes p)

#testcase passes FALSE
#yields (bool FALSE)
query ( up4 passes p)

#testcase passes undef-upoint p
#yields (bool undef)
query ( up3 passes p)

#testcase passes up2 undef-point
#yields (bool undef)
query ( up2 passes p3)

#testcase velocity_up
#tolerance_real 0.001
#yields (upoint (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (-0.2777777777772725 -0.2777777777772725 -0.2777777777772725 -0.2777777777772725)))
query velocity(up1)

#testcase velocity_up 2
#tolerance_real 0.001
#yields (upoint (("2003-11-20-06:00" "2003-11-20-06:01" TRUE TRUE) (16.66667 0.0 16.66667 0.0)))
query velocity([const upoint value(("2003-11-20-06:00" "2003-11-20-06:01" TRUE TRUE) (0.0 0.0 1000.0 0.0))])

#testcase velocity undef-upoint
#tolerance_real 0.001
#yields (upoint undef)
query velocity(up3)

#testcase derivable_ur4
#tolerance_real 0.001
#yields (ubool ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) FALSE))
query derivable(ur4)

#testcase derivable_ur2
#tolerance_real 0.001
#yields (ubool ( ("2000-01-02-23:59:59.900" "2000-01-03-00:00:00.100" TRUE TRUE) TRUE))
query derivable(ur2)

#Testcase derivative_ur4 (radix)
#tolerance_real 0.001
#yields (ureal undef)
query derivative(ur4)

#Testcase derivative_ur3 (undefined)
#tolerance_real 0.001
#yields (ureal undef)
query derivative(ur3)

#testcase derivative_ur2 (defined)
#tolerance_real 0.001
#yields (ureal ( ("2000-01-02-23:59:59.900" "2000-01-03-00:00:00.100" TRUE TRUE) (0.0 -2.0 -1.0 FALSE)))
query derivative(ur2)

#testcase atmax_uconst
#tolerance_real 0.001
#yields (uint ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) 1500))
query atmax(ui1)

#testcase atmin_uconst
#tolerance_real 0.001
#yields (uint ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) 1000))
query atmin(ui2)

#testcase distance_ui3_i
#tolerance_real 0.001
#yields (ureal undef)
query distance(ui3, i1)

#testcase distance_ui1_i
#tolerance_real 0.001
#yields (ureal ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 1400.0 FALSE)))
query distance(ui1, i1)

#testcase distance_i_ui3
#tolerance_real 0.001
#yields (ureal undef)
query distance(i1, ui3)

#testcase atmax_ureal ur1
#tolerance_real 0.001
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-01" "2000-01-01" TRUE TRUE) (1.0 0.0 -1.0 FALSE))) ((("2000-01-05" "2000-01-05" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))))
query atmax(ur1) transformstream consume

#testcase atmax_ureal ur2
#tolerance_real 0.001
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-02-23:59:59.900" "2000-01-02-23:59:59.900" TRUE TRUE) (-1.0 -1.0 -1.0 FALSE)))))
query atmax(ur2) transformstream consume

#testcase atmax_ureal ur3
#tolerance_real 0.001
#yields (int 0)
query atmax(ur3) count

#testcase atmin_ureal ur1
#tolerance_real 0.001
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-03" "2000-01-03" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))))
query atmin(ur1) transformstream consume

#testcase atmin_ureal ur2
#tolerance_real 0.001
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-03-00:00:00.100" "2000-01-03-00:00:00.100" TRUE TRUE) (-1.0 -1.0 -1.0 FALSE)))))
query atmin(ur2) transformstream consume

#testcase atmin_ureal ur3
#tolerance_real 0.001
#yields (int 0)
query atmin(ur3) count

#testcase at_ureal ur1 def 1
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-03" "2000-01-03" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))))
query (ur1 at [const real value -1.0]) transformstream consume

#testcase at_ureal ur1 def 2
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-01" "2000-01-01" TRUE TRUE) (1.0 0.0 -1.0 FALSE))) ((("2000-01-05" "2000-01-05" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))))
query (ur1 at [const real value 3.0]) transformstream consume

#testcase at_ureal ureal-undef def
#yields (int 0)
query (ur3 at [const real value 3.0]) count

#testcase at_ureal ur1 real-undef
#yields (int 0)
query (ur1 at rundef) count


#testcase present_uconst_instant positive
#yields (bool TRUE)
query ui1 present [const instant value "2003-11-20-06:33"]

#testcase present_uconst_instant negative
#yields (bool FALSE)
query ui1 present [const instant value "2003-11-20-07:00"]

#testcase present_uconst_instant inst-undef
#yields (bool undef)
query ui1 present [const instant value undef]

#testcase present_uconst_instant unit-undef
#yields (bool undef)
query ui3 present [const instant value "2003-11-20-06:33"]


#testcase present_ureal_instant positive
#yields (bool TRUE)
query ur4 present [const instant value "2003-11-20-06:33"]

#testcase present_ureal_instant negative
#yields (bool FALSE)
query ur4 present [const instant value "2003-11-20-07:00"]

#testcase present_ureal_instant inst-undef
#yields (bool undef)
query ur4 present [const instant value undef]

#testcase present_ureal_instant unit-undef
#yields (bool undef)
query ur3 present [const instant value "2003-11-20-06:33"]


#testcase present_uconst_periods TRUE
#yields (bool TRUE)
query (ui1 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ])

#testcase present_uconst_periods FALSE
#yields (bool FALSE)
query (ui1 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-07:00" TRUE TRUE)) ])

#testcase present_uconst_periods uconst-undef
#yields (bool undef)
query (ui3 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-07:00" TRUE TRUE)) ])

#testcase present_uconst_periods periods-empty
#yields (bool undef)
query (ui3 present [const periods value ( ) ])



#testcase present_ureal_periods TRUE
#yields (bool TRUE)
query (ur4 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ])

#testcase present_ureal_periods FALSE
#yields (bool FALSE)
query (ur4 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-07:00" TRUE TRUE)) ])

#testcase present_ureal_periods undef-ureal
#yields (bool undef)
query (ur3 present [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ])

#testcase present_ureal_periods empty-periods
#yields (bool undef)
query (ur3 present [const periods value ( ) ])



#testcase atinstant_uconst
#yields (iint ("2003-11-20-06:33" 1500) )
query ui1 atinstant [const instant value "2003-11-20-06:33"]

#testcase atinstant_uconst uconst-undef
#yields (iint undef)
query ui3 atinstant [const instant value "2003-11-20-06:33"]

#testcase atinstant_uconst instant-undef
#yields (iint undef)
query ui1 atinstant [const instant value undef]



#testcase atinstant_ureal DEF
#yields (ireal ("2000-01-03" -1.0) )
query ur1 atinstant [const instant value "2000-01-03-00:00"]

#testcase atinstant_ureal UNDEF
#yields (ireal undef)
query ur1 atinstant [const instant value "1999-01-03-00:00"]

#testcase atinstant_ureal ureal-undef
#yields (ireal undef)
query ur3 atinstant [const instant value "2000-01-03-00:00"]

#testcase atinstant_ureal instant-undef
#yields (ireal undef)
query ur1 atinstant [const instant value undef]



#testcase atperiods_uconst BOTHINSIDE
#yields ((rel (tuple ( (elem uint))))  (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) 1500)) ((("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE) 1500) ) ) ) 
query (ui1 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ]) transformstream consume

#testcase atperiods_uconst ONEAHALFINSIDE
#yields ((rel (tuple ( (elem uint))))  (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) 1500)) ((("2003-11-20-06:50" "2003-11-20-07:00" TRUE FALSE) 1500) ) ) ) 
query (ui1 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-08:55" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_uconst ONEINSIDE
#yields ((rel (tuple ( (elem uint)))) (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) 1500)) ) )
query (ui1 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-08:50" "2003-11-20-09:55" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_uconst OUTSIDE
#yields ((rel (tuple ( (elem uint)))) () )
query (ui1 atperiods [const periods value ( ("2001-11-20-06:05" "2002-11-20-06:10" TRUE FALSE) ("2004-11-20-06:50" "2005-11-20-07:00" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_uconst uconst-undef
#yields ((rel (tuple ( (elem uint)))) ( ) )
query (ui3 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ]) transformstream consume

#testcase atperiods_uconst periods-empty
#yields ((rel (tuple ( (elem uint)))) ( ) ) 
query (ui1 atperiods [const periods value ( ) ]) transformstream consume


#testcase atperiods_ureal BOTHINSIDE
#yields ((rel (tuple ( (elem ureal))))  (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) (1.0 1.0 1.0 TRUE))) ((("2003-11-20-06:50" "2003-11-20-06:55" FALSE TRUE) (1.0 1.0 1.0 TRUE)) ) ) ) 
query (ur4 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" FALSE TRUE)) ]) transformstream consume

#testcase atperiods_ureal ONEAHALFINSIDE
#yields ((rel (tuple ( (elem ureal))))  (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) (1.0 1.0 1.0 TRUE))) ((("2003-11-20-06:50" "2003-11-20-07:00" TRUE FALSE) (1.0 1.0 1.0 TRUE)) ) ) )
query (ur4 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-08:55" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_ureal ONEINSIDE
#yields ((rel (tuple ( (elem ureal))))  (((("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) (1.0 1.0 1.0 TRUE))) ) )
query (ur4 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-08:50" "2003-11-20-09:55" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_ureal OUTSIDE
#yields ((rel (tuple ( (elem ureal)))) () )
query (ur4 atperiods [const periods value ( ("2001-11-20-06:05" "2002-11-20-06:10" TRUE FALSE) ("2004-11-20-06:50" "2005-11-20-07:00" TRUE TRUE)) ]) transformstream consume

#testcase atperiods_ureal ureal-undef
#yields ((rel (tuple ( (elem ureal)))) ( ) )
query  (ur3 atperiods [const periods value ( ("2003-11-20-06:05" "2003-11-20-06:10" TRUE FALSE) ("2003-11-20-06:50" "2003-11-20-06:55" TRUE FALSE)) ]) transformstream consume

#testcase atperiods_ureal periods-empty
#yields ((rel (tuple ( (elem ureal)))) ( ) )
query (ur4 atperiods [const periods value ( ) ]) transformstream consume

#testcase atperiods_ureal MANYCASES
#yields ((rel (tuple ( (elem ureal))))  (((("2003-11-20-06:00" "2003-11-20-06:05" TRUE FALSE) (1.0 1.0 1.0 TRUE))) ((("2003-11-20-06:05" "2003-11-20-06:10" FALSE FALSE) (1.0 1.0 1.0 TRUE))) ((("2003-11-20-06:50" "2003-11-20-07:00" FALSE FALSE) (1.0 1.0 1.0 TRUE))) ) ) 
query (ur4 atperiods [const periods value ( ("2003-11-20-05:05" "2003-11-20-05:10" TRUE TRUE) ("2003-11-20-05:55" "2003-11-20-06:05" TRUE FALSE) ("2003-11-20-06:05" "2003-11-20-06:10" FALSE FALSE) ("2003-11-20-06:50" "2003-11-20-07:55" FALSE TRUE) ("2003-11-20-07:59" "2003-11-20-08:55" FALSE TRUE) ) ]) transformstream consume



#testcase initial_uconst defined
#yields (iint ("2003-11-20-06:00" 1500))
query initial(ui1)

#testcase initial_uconst undefined
#yields (iint undef)
query initial(ui3)

#testcase initial_ureal defined
#tolerance_real 0.00001
#yields (ireal ("2000-01-01" 3.0))
query initial(ur1)

#testcase initial_ureal undefined
#yields (ireal undef)
query initial(ur3)



#testcase final_uconst defined
#yields (iint ("2003-11-20-07:00" 1500))
query final(ui1)

#testcase final_uconst undefined
#yields (iint undef)
query initial(ui3)

#testcase final_ureal defined
#tolerance_real 0.00001
#yields (ireal ("2000-01-05" 3.0))
query final(ur1)

#testcase final_ureal undefined
#yields (ireal undef)
query final(ur3)



#testcase trajectory_up undefined
#yields (line ())
query trajectory(up3)

#testcase trajectory_up defined up1
#yields (line ( (1000.0 1000.0 2000.0 2000.0) ) )
query trajectory(up1)

#testcase trajectory_up defined up2
#yields (line ( (1000.0 1000.0 2000.0 2000.0) ) )
query trajectory(up2)



#testcase speed_upoint undef
#yields (ureal undef)
query speed(up3)

#testcase speed_upoint def1
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.277777 FALSE)))
query speed(up4)

#testcase speed_upoint def2
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.0 FALSE)))
query speed(up6)

#testcase speed_upoint def3
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.392837 FALSE)))
query speed(up1)



#testcase distance_point_upoint ZERODISTANCE
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.0 TRUE)))
query distance(p, up6)

#testcase distance_upoint_point ZERODISTANCE
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.0 TRUE)))
query distance(up6, p)

#testcase distance_point_upoint NONZERODISTANCE 1
#tolerance_real 0.001
#yields (ureal (("2000-01-02-23:50" "2000-01-03-00:10" TRUE TRUE)(10368000000.0 -7.989001460373402e-09 2.842170943040401e-14 TRUE)))
query distance(p, up7)

#testcase distance_point_upoint NONZERODISTANCE 2
#tolerance_real 0.001
#yields (ureal (("2003-01-01-12:00" "2003-01-01-12:20" TRUE TRUE)(10368000000.0 -22695696000000.0 1.24202984405e+16 TRUE)))
query distance(p, up8)



#tolerance_real 0.001

# distance_upoint_point


#testcase distance_upoint_upoint undef undef
#yields (ureal undef)
query distance(up3, up3)

#testcase distance_upoint_upoint def undef
#yields (ureal undef)
query distance(up1, up3)

#testcase distance_upoint_upoint undef def
#yields (ureal undef)
query distance(up3, up2)

#testcase distance_upoint_upoint def def
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (4608000000.0 -13061568000000.0 9255889682000000.0 TRUE)))
query distance(up1, up2)

#testcase distance_upoint_upoint def def ZERO
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(0.0 0.0 0.0 FALSE)))
query distance(up1, up1)

#testcase distance_upoint_upoint def def ClipLeft
#yields (ureal (("2003-11-20-06:00" "2003-11-20-06:30" TRUE TRUE) (1152000000.0 -3265536000000.0 2314176512000000.0 TRUE)))
query distance(up1,up9)


#testcase distance_int_uint DEF DEF
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 1400.0 FALSE)))
query distance(i1, ui1)

#testcase distance_int_uint DEF UNDEF
#yields (ureal undef)
query distance(i1, ui3)

#testcase distance_int_uint UNDEF DEF
#yields (ureal undef)
query distance(i3, ui1)

#testcase distance_uint_int DEF DEF
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 1400.0 FALSE)))
query distance(ui1, i1)

#testcase distance_uint_int UNDEF DEF
#yields (ureal undef)
query distance(ui3, i1)

#testcase distance_uint_int DEF UNDEF
#yields (ureal undef)
query distance(ui1, i3)



#testcase distance_uint_uint ZERO
#yields (ureal (("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (0.0 0.0 0.0 FALSE)))
query distance(ui1, ui1)

#testcase distance_uint_uint DEF UNDEF
#yields (ureal undef)
query distance(ui1, ui3)

#testcase distance_uint_uint UNDEF DEF
#yields (ureal undef)
query distance(ui3, ui1)


#testcase intersection_uconst_const def undef
#yields (int 0)
query intersection(ui1, i3) count

#testcase intersection_uconst_const undef def
#yields (int 0)
query intersection(ui3, i1) count

#testcase intersection_uconst_const EMPTY
#yields (int 0)
query intersection(ui1, i1) count

#testcase intersection_uconst_const NONEMPTY
#yields (int 1)
query intersection(ui1, [const int value 1500]) count


#testcase intersection_const_uconst undef def
#yields (int 0)
query intersection(i3, ui1) count

#testcase intersection_const_uconst def undef
#yields (int 0)
query intersection(i1, ui3) count

#testcase intersection_const_uconst EMPTY
#yields (int 0)
query intersection(i1, ui1) count

#testcase intersection_const_uconst NONEMPTY
#yields (int 1)
query intersection([const int value 1500], ui1) count


#testcase intersection_uconst_uconst def undef
#yields (int 0)
query intersection(ui1, ui3) count

#testcase intersection_uconst_uconst undef def
#yields (int 0)
query intersection(ui3, ui2) count

#testcase intersection_uconst_uconst EMPTY
#yields (int 0)
query intersection(ui1, ui2) count

#testcase intersection_uconst_uconst NONEMPTY
#yields ((rel (tuple ( (elem uint)))) (((("2003-11-20-06:30" "2003-11-20-07:00" TRUE FALSE) 1000))))
query intersection(ui2, ui4) transformstream consume




#testcase intersection_ureal_real DEF UNDEF
#yields (int 0)
query intersection(ur1, [const real value undef]) count

#testcase intersection_ureal_real UNDEF DEF
#yields (int 0)
query intersection(ur3, r) count

#testcase intersection_ureal_real EMPTY
#yields (int 0)
query intersection(ur1, [const real value -500000.0]) count

#testcase intersection_ureal_real NONEMPTY
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-02" "2000-01-02" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))((("2000-01-04" "2000-01-04" TRUE TRUE)(1.0 0.0 -1.0 FALSE)))))
query intersection(ur1, r) transformstream consume



#testcase intersection_real_ureal DEF UNDEF
#yields (int 0)
query intersection([const real value undef], ur1) count

#testcase intersection_real_ureal UNDEF DEF
#yields (int 0)
query intersection(r, ur3) count

#testcase intersection_real_ureal EMPTY
#yields (int 0)
query intersection([const real value -500000.0], ur1) count

#testcase intersection_real_ureal NONEMPTY
#yields ((rel (tuple ( (elem ureal)))) (((("2000-01-02" "2000-01-02" TRUE TRUE) (1.0 0.0 -1.0 FALSE)))((("2000-01-04" "2000-01-04" TRUE TRUE)(1.0 0.0 -1.0 FALSE)))))
query intersection(r, ur1) transformstream consume



#testcase intersection_ureal_ureal DEF UNDEF
#yields (int 0)
query intersection(ur1, ur3) count

#testcase intersection_ureal_ureal UNDEF DEF
#yields (int 0)
query intersection(ur3, ur2) count


## NOT YET IMPLEMENTED:
##testcase intersection_ureal_ureal EMPTY
##yields (int 0)
#query intersection(ur2, ur4) count

## NOT YET IMPLEMENTED:
##testcase intersection_ureal_ureal NONEMPTY
##yields (int 1)
#query intersection(ur1, ur1) count



#testcase intersection_upoint_point UNDEF DEF
#yields (int 0)
query intersection(up3,p) count

#testcase intersection_upoint_point DEF UNDEF
#yields (int 0)
query intersection(up1,p3) count

#testcase intersection_upoint_point EMPTY
#yields (int 0)
query intersection(up4,p) count

#testcase intersection_upoint_point NONEMPTY
#yields ((rel (tuple ( (elem upoint)))) (((("2003-11-20-06:30" "2003-11-20-06:30" TRUE TRUE)(1500.0 1500.0 1500.0 1500.0)))))
query intersection(up1,p) transformstream consume



#testcase intersection_point_upoint UNDEF DEF
#yields (int 0)
query intersection(p3,up2) count

#testcase intersection_point_upoint DEF UNDEF
#yields (int 0)
query intersection(p,up3) count

#testcase intersection_point_upoint EMPTY
#yields (int 0)
query intersection(p,up5) count

#testcase intersection_point_upoint NONEMPTY
#yields ((rel (tuple ( (elem upoint)))) (((("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE)(1500.0 1500.0 1500.0 1500.0)))))
query intersection(p,up6) transformstream consume



#testcase intersection_upoint_upoint UNDEF DEF
#yields (int 0)
query intersection(up3,up4) count

#testcase intersection_upoint_upoint DEF UNDEF
#yields (int 0)
query intersection(up2,up3) count

#testcase intersection_upoint_upoint EMPTY
#yields (int 0)
query intersection(up2,up5) count

#testcase intersection_upoint_upoint NONEMPTY
#yields ((rel (tuple ( (elem upoint)))) (((("2003-11-20-06:30" "2003-11-20-06:30" TRUE TRUE)(1500.0 1500.0 1500.0 1500.0)))))
query intersection(up1,up2) transformstream consume




#testcase intersection_upoint_line DEF EMPTY
#yields (int 0)
query intersection(up1, line3) count

#testcase intersection_upoint_line UNDEF NONEMPTY
#yields (int 0)
query intersection(up3, line2) count

#testcase intersection_upoint_line EMPTYRESULT
#yields (int 0)
query intersection(up9, line1) count

#testcase intersection_upoint_line SINGLE POINT
#yields (upoint ( ("2003-11-20-06:30" "2003-11-20-06:30" TRUE TRUE) (1500.0 1500.0 1500.0 1500.0) ) )
query intersection(up2, line1) transformstream consume

#testcase intersection_upoint_line SINGLE LINE
#yields (upoint ( ("2003-11-20-06:00" "2003-11-20-07:00" TRUE FALSE) (2000.0 2000.0 1000.0 1000.0) ) )
query intersection(up1, line4) transformstream consume



##testcase intersection_upoint_line MIXED
##yields (int 4)
#query intersection(up2, line2) count



# intersection_line_upoint







# intersection_upoint_region
# intersection_region_upoint
# intersection_upoint_uregion
# intersection_uregion_upoint

# intersects_uconst_uconst
# intersects_upoint_upoint
# intersects_ureal_ureal



############################
#    Complex testcases     #
############################

#testcase COMPLEX1 aggregate
#yields @$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5Trajectory
query units(zug5) suse[fun(ZZ:STREAMELEM) trajectory(ZZ)] transformstream aggregateB[elem; fun(XX:line, YY:line) union_new(XX, YY); [const line value ()]];

#testcase COMPLEX2 aggregateB
#yields @$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5Trajectory
query units(zug5) suse[fun(ZZ:STREAMELEM) trajectory(ZZ)] transformstream aggregate[elem; fun(XX:line, YY:line) union_new(XX, YY); [const line value ()]];

#testcase COMPLEX3 saggregate
#yields @$(SECONDO_BUILD_DIR)/Tests/Testspecs/tempunitalg/zug5Trajectory
query units(zug5) suse[fun(ZZ:STREAMELEM) trajectory(ZZ)] saggregate[fun(XX:line, YY:line) union_new(XX, YY); [const line value ()]];


############################
# mopping up test database #
############################

#teardown
close database;
delete database tempunittest

