#This file is part of SECONDO.
#
#Copyright (C) 2004, University in Hagen, Department of Computer Science, 
#Database Systems for New Applications.
#
#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# a test for the relational algebra
# run with : Runner -c MyConfig.config <relalgtest
# (Runner can be found in directory UserInterfaces)

#stop

#setup
open database germany3;

#testcase test1
#yields (int 674)
query Autobahn feed Fluss feed spatialjoin[AVerlauf, FVerlauf] count;

#testcase test2
#yields (bool TRUE)
query Autobahn feed loopjoin[fun(t:TUPLE) Fluss feed filter[bbox(.FVerlauf) intersects bbox(attr(t, AVerlauf))]] count =
      Autobahn feed Fluss feed spatialjoin[AVerlauf, FVerlauf] count;

#testcase test3
#yields (int 235)
query Autobahn feed loopjoin[fun(t:TUPLE) Fluss feed filter[.FVerlauf intersects attr(t, AVerlauf)]] count;

#testcase test4
#yields (bool TRUE)
query Autobahn feed loopjoin[fun(t:TUPLE) Fluss feed filter[.FVerlauf intersects attr(t, AVerlauf)]] count =
      Autobahn feed Fluss feed spatialjoin[AVerlauf, FVerlauf] filter[.AVerlauf intersects .FVerlauf] count;

#testcase test5
#yields (int 67400)
query AutobahnR100 feed {X} FlussR100 feed spatialjoin[AR_X, FR] count;

#testcase test6
#yields (bool TRUE)
query AutobahnR100 feed filter[.no_A < 2] {X} loopjoin[fun(t:TUPLE) FlussR100 feed 
  filter[.no_A < 2] filter[.FR intersects attr(t, AR_X)]] count =
      AutobahnR100 feed {X} FlussR100 feed spatialjoin[AR_X, FR] count;

#testcase test7
#yields (int 3303)
query Kreis feed {X} loopjoin[fun(t: TUPLE) Kreis feed filter[bbox(.Gebiet) intersects bbox(attr(t, Gebiet_X))]] count;

#testcase test8
#yields (int 330300)
query KreisR100 feed {X} KreisR100 feed spatialjoin[KR_X, KR] count;

#testcase test9
#yields (int 52848) 
query KreisR16 feed {X} KreisR16 feed spatialjoin[KR_X, KR] count;

#testcase test10
#yields (bool TRUE)
query KreisR16 feed {X} loopjoin[fun(t: TUPLE) KreisR16 feed filter[.KR intersects attr(t, KR_X)]] count =
      KreisR16 feed {X} KreisR16 feed spatialjoin[KR_X, KR] count;

#testcase test11
#yields (int 82575) 
query KreisR25 feed {X} KreisR25 feed spatialjoin[KR_X, KR] count;

#testcase test12
#yields (bool TRUE)
query KreisR25 feed {X} loopjoin[fun(t: TUPLE) KreisR25 feed filter[.KR intersects attr(t, KR_X)]] count =
      KreisR25 feed {X} KreisR25 feed spatialjoin[KR_X, KR] count;

#testcase test13
#yields (int 1321200) 
query KreisR400 feed {X} KreisR400 feed spatialjoin[KR_X, KR] count;

#testcase test14
#yields (int 2972700) 
query KreisR900 feed {X} KreisR900 feed spatialjoin[KR_X, KR] count;

#testcase test15
#yields (bool TRUE)
query KreisR100 feed {X} loopjoin[kreisR100_KR KreisR100 windowintersects[.KR_X]] count =
      KreisR100 feed {X} KreisR100 feed spatialjoin[KR_X, KR] count;

#testcase test16
#yields (int 2707) 
query Kreis feed {X} loopjoin[fun(t: TUPLE) Kreis feed filter[bbox(.Gebiet) intersects bbox(attr(t, Gebiet_X))] 
  filter[.Gebiet touches attr(t, Gebiet_X)]] count;

#testcase test17
#yields (bool TRUE)
query Kreis feed {X} Kreis feed spatialjoin[Gebiet_X, Gebiet] filter[.Gebiet_X touches .Gebiet] count =
      Kreis feed {X} loopjoin[fun(t: TUPLE) Kreis feed filter[bbox(.Gebiet) intersects bbox(attr(t, Gebiet_X))]
        filter[.Gebiet touches attr(t, Gebiet_X)]] count;

#teardown
close database;

