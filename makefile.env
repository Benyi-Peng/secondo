########################################################################
#
# SECONDO makefile.env - definition of global macro values included by
# every other makefile.
#
#######################################################################

# OS-Type
platform := $(SECONDO_PLATFORM)

# Berkeley DB library
BDBDIR := $(BERKELEY_DB_DIR)

# Secondo build directory
BUILDDIR := $(SECONDO_BUILD_DIR)


# set USE_JNI to true if you want to use a Java based algebra
USE_JNI := "false"
ifeq ($(USE_JNI),"true")
include $(BUILDDIR)/makefile.jni
endif


# check if all environment variables are set
ifndef platform
 $(error Variable SECONDO_PLATFORM not defined. Set it to linux, win32 or solaris!)
endif


ifndef BDBDIR
 $(error Variable BERKELEY_DB_DIR not defined. It must point to the root directory of the Berkeley DB installation!)
endif

ifndef BUILDDIR
 $(error Variable SECONDO_BUILD_DIR not defined. I don't know the root directory of the SECONDO source tree!)
endif

# Check if optimizer should be compiled
include $(BUILDDIR)/makefile.optimizer

# set path for creating source archives used
# in a Secondo-CDROM
ifeq ($(platform),win32)
  NETDEV = /cvs-projects/SECONDO_CD/Windows
else
  NETDEV = /cvs-projects/SECONDO_CD/Unix
endif

# set the java compiler
JAVAC=javac
JAVAH=javah


# define directories
INCLUDEDIR := $(BUILDDIR)/include
LIBDIR := $(BUILDDIR)/lib
BINDIR := $(BUILDDIR)/bin
OPTDIR := $(BUILDDIR)/Optimizer

# add directories with template classes here. Don't forget
# to add an dependency between .h and .cpp file in the file
# include.dep.
TEMPLATES := \
	Tools/ListsAndTables

TEMPLATEFLAGS := $(addprefix -I$(BUILDDIR)/,$(TEMPLATES))
TEMPLATEDIRS := $(strip $(foreach dir,$(TEMPLATES), $(BUILDDIR)/$(dir):))


# directories where make searches for prerequisites
VPATH := $(INCLUDEDIR):$(TEMPLATEDIRS)$(LIBDIR):$(BINDIR)

# compilation options for the PROLOG shell
PLINCLUDEFLAGS := -I$(PL_INCLUDE_DIR)

# load Platform specific definitions
include $(BUILDDIR)/makefile.$(platform)

# expand compiler flags again to use the profiler (gprof)
PROFILERFLAGS =
# PROFILERFLAGS += -pg

# expand compiler flags
DEFAULTCCFLAGS += $(TEMPLATEFLAGS) $(PROFILERFLAGS)

# flags for persistent relational algebra. Comment this line below to have
# main memory relational algebra.
# DEFAULTCCFLAGS += -DRELALG_PERSISTENT

# flag for a persistent implementation of class NestedList. Comment out the line below to 
# use temporary Berkeley-DB record files instead of main memory. 
# Currently this switch is for experimental use only! 
#NL_PERSISTENT := "true"

# flag for a persistent implementation of class NestedList. Comment out the line below to
# use temporary Berkeley-DB record files instead of main memory.
# Currently this switch is for experimental use only! It works not with Win32-Systems.
#NL_PERSISTENT := "true"

ifeq ($(smitype),ora)
SMIUP:=ORA
SMILOW:=ora
else
SMIUP:=BDB
SMILOW:=bdb
endif

# load algebra definitions
include $(BUILDDIR)/makefile.algebras

# concat the algebras depending on USE_JNI
ifeq ($(USE_JNI),"true")
ALGEBRAS += $(ALGEBRAS) $(JNIALGEBRAS)
endif

SDB_LIBRARIES = \
	sdbsys \
	sdbtool \
	sdbutils \
	smi$(SMILOW) \
	sdbsocket

# To make the managment of linking libraries easier two macros which are used in the linker command are defined.
# This files mainly cover all cases of linkage. Some libraries are not necessarey for all applications but
# writing specific rules for every application is more complicated and error prone.

ALGLIBS := $(addprefix -l, $(ALGEBRAS))
ALGLIBFILES := $(addprefix lib, $(addsuffix .$(LIBEXT),$(ALGEBRAS)))

SECLIBFILES := $(addprefix lib, $(addsuffix .$(LIBEXT),$(SDB_LIBRARIES)))

# There seems to be some inter dependencies between sdbtool and sdbutils and smi libraries therfore some
# libraries are repeated since the linker can not resolve this automatically.
SECLIBS_ALG :=  -lsdbsys $(ALGLIBS) -lsdbtool -lsdbutils -lsmi$(SMILOW) -lsdbtool -lsdbsocket -lsdbutils -lsdbsocket
SECLIBS :=  -lsdbsys -lsdbtool -lsdbutils -lsmi$(SMILOW) -lsdbtool -lsdbsocket -lsdbutils -lsdbsocket

LD_LINK_LIBS_ALG := -L$(LIBDIR) $(BDBLIBDIR) $(SECLIBS_ALG) $(BDBLIB) $(DEFAULTLIB) $(JNILINKOPTS)
LD_LINK_LIBS := -L$(LIBDIR) $(BDBLIBDIR) $(SECLIBS) $(BDBLIB) $(DEFAULTLIB)
