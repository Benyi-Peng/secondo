#This file is part of SECONDO.
#
#Copyright (C) 2004, University in Hagen, Department of Computer Science, 
#Database Systems for New Applications.
#
#SECONDO is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#SECONDO is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with SECONDO; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
########################################################################
#
# SECONDO makefile.env - definition of global macro values included by
# every other makefile.
#
#######################################################################

# OS-Type
platform := $(SECONDO_PLATFORM)

# Berkeley DB library

BDBDIR := $(BERKELEY_DB_DIR)

ifndef BERKELEY_DB_LIB
ifeq ($(platform),win32)
BDBLIB := -ldb32
else
BDBLIB := -ldb_cxx
endif
else
BDBLIB := -l$(BERKELEY_DB_LIB)
endif

# Secondo build directory
BUILDDIR := $(SECONDO_BUILD_DIR)

# Directory name for a demo installation (TTY only)
SECONDO_DEMO = secondo-demo

# check if all environment variables are set
ifndef platform
 $(error Variable SECONDO_PLATFORM not defined. Set it to linux, win32 or solaris!)
endif


ifndef BDBDIR
 $(error Variable BERKELEY_DB_DIR not defined. It must point to the root directory of the Berkeley DB installation!)
endif

ifndef BUILDDIR
 $(error Variable SECONDO_BUILD_DIR not defined. I don't know the root directory of the SECONDO source tree!)
endif

# Check if optimizer should be compiled
include $(BUILDDIR)/makefile.optimizer


# set the java compiler
JAVAC=javac
JAVAH=javah


# define directories
INCLUDEDIR := $(BUILDDIR)/include
LIBDIR := $(BUILDDIR)/lib
BINDIR := $(BUILDDIR)/bin
OPTDIR := $(BUILDDIR)/Optimizer


DEP_FILES = $(patsubst %.cpp, %.dep, $(shell ls *.cpp))
OBJECTS = $(patsubst %.dep, %.$(OBJEXT), $(DEP_FILES)) 

# create dependencies from include directives
%.dep: %.cpp
	$(CC) -MM $(CCFLAGS) $< -o $@

#compile object
%.o: %.cpp 
	$(CC) -c -o $@ $< $(CCFLAGS)


# add directories with template classes here. Don't forget
# to add an dependency between .h and .cpp file in the file
# include.dep.
TEMPLATES := \
	Tools/ListsAndTables

TEMPLATEFLAGS := $(addprefix -I$(BUILDDIR)/,$(TEMPLATES))
TEMPLATEDIRS := $(strip $(foreach dir,$(TEMPLATES), $(BUILDDIR)/$(dir):))


# directories where make searches for prerequisites
VPATH := $(INCLUDEDIR):$(TEMPLATEDIRS)$(LIBDIR):$(BINDIR)

# compilation options for the PROLOG shell
PLINCLUDEFLAGS := -I$(PL_INCLUDE_DIR)

# load Platform specific definitions
ifndef WINE
  include $(BUILDDIR)/makefile.$(platform)
else
  include $(BUILDDIR)/makefile.wine
endif


# Uncomment next line to compile with debugging information:
DEBUG = -ggdb

# Uncomment next line to comile with code optimizations.
#OPTIMIZE = -finline-functions -O2

# Use special optimizations for a given cpu 
#OPTIMIZE += -mcpu=athlon-xp  

# Do not use assertions. Currently, this does not work
# since some code uses assertions to check if functions
# were successful. This must be changed. Assertions should
# only check logical constraints without doing any program
# logic!
#OPTIMIZE += -DNDEBUG  

# Uncomment next lines to generate profiling data used by gprof
#DEBUG += -pg
#LDFLAGS += -pg

# Set up default flags for the compiler
DEFAULTCCFLAGS += $(DEBUG) $(OPTIMIZE) 

# Set up directory search
DEFAULTCCFLAGS += -I. -I$(BDBDIR)/include -I$(INCLUDEDIR)  $(TEMPLATEFLAGS)

# Show all warnings
DEFAULTCCFLAGS += -Wall  
#-pedantic -Wunreachable-code -Wunknown-pragmas -Wshadow -Wformat=2 -Wundef  -Wbad-function-cast -Wcast-qual  -Wsign-compare -fbounds-check -fstack-check -fcheck-new 

# Define some macros which define optional behaviour in some
# libraries
DEFAULTCCFLAGS += -D_REENTRANT -D_GLIBCPP_DEPRECATED 


# Flag for the persistent relational algebra implementation. Comment the line below 
# to compile the implementation of the main memory relational algebra.
DEFAULTCCFLAGS += -DRELALG_PERSISTENT

# Flag for a persistent implementation of class NestedList. Remove the comment
# in the line below to use temporary Berkeley-DB record files instead of main
# memory. This is needed if you want to restore large objects. 
DEFAULTCCFLAGS += -DNL_PERSISTENT

# Flag to compile SecondoPL with the maximize_entropy predicate
# using the third party library OPT++. For details refer to 
# directory Optimizer/Entropy. Uncomment next line to use it.
#ENTROPY := true


# the macro below should be used in local makefiles to
# add specific flags
CCFLAGS := $(DEFAULTCCFLAGS)

# Storage Manager suffix
SMIUP:=BDB
SMILOW:=bdb

# load algebra definitions

alg := auto
include $(BUILDDIR)/makefile.algebras

ifdef SECONDO_ACTIVATE_ALL_ALGEBRAS

ALGEBRA_ARCHIVES := $(subst lib,,$(subst Algebra.a,,$(shell find $(BUILDDIR)/lib -name "lib*Algebra*" -printf "%f ")))
JNIALGEBRAS := 
JNIALGEBRA_DIRS := 

USE_JNI := "true"
include $(BUILDDIR)/makefile.jni

else

# check if JNI algebras are used
ifdef JNIALGEBRAS
ALGEBRA_DIRS += $(JNI_ALGEBRA_DIRS)
ALGEBRAS += $(JNIALGEBRAS)

USE_JNI := "true"
include $(BUILDDIR)/makefile.jni
endif

ALGEBRA_ARCHIVES := $(ALGEBRA_DIRS) 
endif


# define standard rule for creating configuration files by
# copying the sample files.
define cp-config-file
@([ ! -f $@ ] && (cp $< $@; echo -e "Make created $@ as a copy of $<")) \
|| (echo -e "\a\n* Warning: Example file $< is newer than $@"; sleep 2)
endef


SDB_LIBRARIES = \
	sdbsys \
	sdbtool \
	sdbutils \
	smi$(SMILOW) \
	sdbsocket


# In order to make the managment of linking libraries easier two macros which are used in the linker command are defined.
# This files mainly cover all cases of linkage. Some libraries are not necessary for all applications but
# writing specific rules for every application is more complicated and error prone.

ALGBASE := $(addsuffix Algebra, $(ALGEBRA_ARCHIVES))
#ALGBASE := $(ALGEBRAS)
ALGLIBS := $(addprefix -l, $(ALGBASE))
ALGDEPS := -L $(SECONDO_SDK)/lib $(addprefix -l, $(ALGEBRA_DEPS))


# define the algdirname as the value of the currect directory
DIR_NAME_TMP=$(subst /, ,$(shell pwd))
ALG_DIR_NAME=$(word $(words $(DIR_NAME_TMP)),$(DIR_NAME_TMP))


# the variables below will be used in makefiles at the algebra level. The
# define the name of the library file based on the directory name.
LIBNAME = lib$(ALG_DIR_NAME)Algebra
LIBOBJ = $(LIBDIR)/$(LIBNAME).$(LIBEXT)


ALGLIBFILES := $(addprefix lib, $(addsuffix .$(LIBEXT),$(ALGBASE)))
ALGLIBFILES += $(JVMINIT_O_FILE)

SECLIBFILES := $(addprefix lib, $(addsuffix .$(LIBEXT),$(SDB_LIBRARIES)))

# There are some circular dependencies between sdbtool and sdbutils and also for 
# other libraries the order may be relevant. By putting them into groups with the linker
# options -( -la1 .. -lan -) the archives will be read multiple times. 
SECLIBS_ALG :=  -Xlinker -\( -lsdbsys $(ALGLIBS) $(ALGDEPS) -lsdbtool -lsmi$(SMILOW) -lsdbutils -lsdbsocket -Xlinker -\)
SECLIBS :=  -Xlinker -\( -lsdbsys -lsdbtool -lsmi$(SMILOW) -lsdbutils -lsdbsocket -Xlinker -\)

LD_LINK_LIBS_ALG := -L$(LIBDIR) -L$(BDBDIR)/lib $(SECLIBS_ALG) $(BDBLIB) $(DEFAULTLIB) $(JNILINKOPTS)
LD_LINK_LIBS := -L$(LIBDIR) -L$(BDBDIR)/lib $(SECLIBS) $(BDBLIB) $(DEFAULTLIB)
